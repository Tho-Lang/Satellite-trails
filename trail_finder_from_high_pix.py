{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c4529fc5",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Function names are:\n",
      "flash_geom_x , flash_geom_y\n",
      "lin_fit(x, m, t)\n",
      "intersection(lst1, lst2)\n",
      "plot_scatter(x, y, z)\n",
      "plot_from_pix(pix, z), uncomment in functions_import.py for title with nrun\n",
      "draw_box()\n",
      "get_x_y_from_pix(pix), output x,y\n",
      "plot_lin_fit(track)\n",
      "read_data_sets(firstrun, lastrun)\n",
      "apply_selection_cut(dict_high_pixel)\n",
      "get_nn_pix(size) mit nn_pix, bzw. typed_nn_pix for @jit\n",
      "Function names are:\n",
      "flash_geom_x , flash_geom_y\n",
      "lin_fit(x, m, t)\n",
      "intersection(lst1, lst2)\n",
      "plot_scatter(x, y, z)\n",
      "plot_from_pix(pix, z), uncomment in functions_import.py for title with nrun\n",
      "draw_box()\n",
      "get_x_y_from_pix(pix), output x,y\n",
      "plot_lin_fit(track)\n",
      "read_data_sets(firstrun, lastrun)\n",
      "apply_selection_cut(dict_high_pixel)\n",
      "get_nn_pix(size) mit nn_pix, bzw. typed_nn_pix for @jit\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from scipy import ndimage\n",
    "import matplotlib as mpl\n",
    "import matplotlib.pyplot as plt\n",
    "from scipy.optimize import curve_fit\n",
    "from tables import *\n",
    "import os\n",
    "import operator\n",
    "import sys\n",
    "import csv\n",
    "import h5py\n",
    "import time\n",
    "from astropy.time import Time\n",
    "import astropy.units as u\n",
    "from numba import jit,njit,int32,float32\n",
    "from numba.typed import List\n",
    "from functions_import import lin_fit, intersection, plot_scatter, plot_from_pix, draw_box,get_x_y_from_pix\n",
    "from functions_import import get_nn_pix, plot_lin_fit, read_data_sets,apply_selection_cut\n",
    "def import_module(filename):\n",
    "    with open(filename, 'r') as file:\n",
    "        file_contents = file.read()\n",
    "    module_object =  exec(file_contents)\n",
    "    return module_object\n",
    "import_module(\"D:\\\\Masterarbeit ECAP\\\\Trail finder\\\\functions_import.py\")\n",
    "typed_nn_pix = List()\n",
    "for i in range(len(nn_pix)):\n",
    "    typed_nn_pix_entry = List()\n",
    "    [typed_nn_pix_entry.append(x) for x in nn_pix[i]]\n",
    "    typed_nn_pix.append(typed_nn_pix_entry)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "368728c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "from functions_import import lin_fit, intersection, plot_scatter, plot_from_pix, draw_box,get_x_y_from_pix\n",
    "from functions_import import get_nn_pix, plot_lin_fit, read_data_sets, apply_selection_cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b37c7cf4",
   "metadata": {},
   "outputs": [],
   "source": [
    "###Initialisation of variable nruns and dictionaries:\n",
    "#BE CAREFUL NOT TO DELETE EVERYTHING THAT'S READ IN !!!!!\n",
    "####perhaps not neccessary anymore...########\n",
    "\n",
    "nruns = []\n",
    "trails_high_avg = {}\n",
    "avg_pix = {}\n",
    "avg_tmp = {}\n",
    "delta_pixel = {}\n",
    "high_pixel = {}\n",
    "roll_avg = {}\n",
    "zenith = {}\n",
    "azimuth = {}\n",
    "broken_pixel = {}\n",
    "trackruns = {}\n",
    "possible_meteorites = {}\n",
    "\n",
    "path = {}\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3394ce6d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "#Reading data of new_nruns using .txt files, not overwriting the old ones \n",
    "#Use pix ID to get x and y pos\n",
    "\n",
    "####perhaps not neccessary anymore...########\n",
    "telId = 5\n",
    "for nrun in new_nruns:\n",
    "    high_pixel[nrun] = {}\n",
    "    high_path = \"high_pixel\\\\\"+runs_directory+\"\\\\\"+str(nrun)+\"\\\\\"\n",
    "    print(high_path)\n",
    "    #for telId in range(5,6):#Set to only load in CT5 data, can be adjusted later on   \n",
    "    try:\n",
    "        print(\"Reading high_pix_\"+str(nrun)+\"_CT_\"+str(telId)+\".txt\")        \n",
    "        high_pixel[nrun][\"pix\"+str(telId)] = np.loadtxt(high_path + \"high_pix_\"+str(nrun)+\"_CT_\"+str(telId)+\".txt\", \n",
    "                                                        usecols = 0, delimiter = \";\")\n",
    "        high_pixel[nrun][telId] = np.loadtxt(high_path + \"high_pix_\"+str(nrun)+\"_CT_\"+str(telId)+\".txt\", \n",
    "                                                        usecols = 1, delimiter = \";\")\n",
    "        high_pixel[nrun][\"tmp\"+str(telId)] = np.loadtxt(high_path + \"high_pix_\"+str(nrun)+\"_CT_\"+str(telId)+\".txt\", \n",
    "                                                        usecols = 2, delimiter = \";\")\n",
    "    except:\n",
    "        print(\"No file named high_pix_\"+str(nrun)+\"_CT_\"+str(telId)+\".txt found\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "27cd38d3",
   "metadata": {},
   "outputs": [],
   "source": [
    "#This only looks for CT5.h5 files, hence no separation for telId \n",
    "\n",
    "####already in funtinons_import########\n",
    "def read_data_sets(firstrun, lastrun):\n",
    "    if (firstrun%200!=0  or lastrun%200!=0):\n",
    "        print(\"Numbers divisible by 200 needed!\")\n",
    "        return\n",
    "    if firstrun> lastrun:\n",
    "        print(\"Second number needs to be larger than first one!\")\n",
    "        return\n",
    "    run_set = 0\n",
    "    new_nruns = []\n",
    "    new_high_pixel = {}\n",
    "    os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\\\\eval_data\\\\high_pixel\")\n",
    "    while (run_set<(lastrun-firstrun)/200):\n",
    "        runs_directory = \"run\"+str(firstrun+run_set*200)+\"-\"+str(firstrun+run_set*200+199)\n",
    "        try:\n",
    "            os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\\\\eval_data\\\\high_pixel\\\\\"+runs_directory)\n",
    "        except:\n",
    "            print(\"folder\",\"\\\"\"+runs_directory+\"\\\"\", \"does not exist\")\n",
    "            run_set+=1\n",
    "            continue\n",
    "        run_numbers = os.listdir(os.curdir)\n",
    "        for i in range(len(run_numbers)):\n",
    "            try:\n",
    "                new_nruns.append(int(run_numbers[i]))\n",
    "                try:\n",
    "                    print(os.getcwd())\n",
    "#                     print(str(run_numbers[i])+\"\\\\high_pix_\"+str(run_numbers[i]))#+\"_CT_\"+str(telId)+\".h5\")\n",
    "                    hfile = h5py.File(str(run_numbers[i])+\"\\\\high_pix_\"+str(run_numbers[i])+\"_CT_\"+str(5)+\".h5\", \"r\") \n",
    "                    print(\"Reading high_pix_\"+str(run_numbers[i])+\"_CT_\"+str(5)+\".h5\")\n",
    "                    new_high_pixel[int(run_numbers[i])] = {}\n",
    "                    new_high_pixel[int(run_numbers[i])][\"pix\"] = hfile[\"Pix ID\"]\n",
    "                    new_high_pixel[int(run_numbers[i])][\"brightness\"] = hfile[\"Brightness\"]\n",
    "                    new_high_pixel[int(run_numbers[i])][\"time\"] = hfile[\"Time\"]\n",
    "                    hfile.close()\n",
    "                    print(\"Reading successful\")\n",
    "                except:\n",
    "                    print(\"No file named high_pix_\"+str(run_numbers[i])+\"_CT_\"+str(5)+\".h5 found in folder\", run_numbers[i])\n",
    "            except:\n",
    "                print(\"No runs in folder/not a folder:\", run_numbers[i])\n",
    "        \n",
    "        run_set+=1\n",
    "    return new_high_pixel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "242391b8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "folder \"run157000-157199\" does not exist\n",
      "folder \"run157200-157399\" does not exist\n",
      "folder \"run157400-157599\" does not exist\n",
      "folder \"run157600-157799\" does not exist\n",
      "folder \"run157800-157999\" does not exist\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "Reading high_pix_158035_CT_5.h5\n",
      "Reading successful\n",
      "No runs in folder/not a folder: 158035high_pix_158035_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158037_CT_5.h5 found in folder 158037\n",
      "No runs in folder/not a folder: 158037high_pix_158037_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158038_CT_5.h5 found in folder 158038\n",
      "No runs in folder/not a folder: 158038high_pix_158038_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158039_CT_5.h5 found in folder 158039\n",
      "No runs in folder/not a folder: 158039high_pix_158039_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158040_CT_5.h5 found in folder 158040\n",
      "No runs in folder/not a folder: 158040high_pix_158040_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158041_CT_5.h5 found in folder 158041\n",
      "No runs in folder/not a folder: 158041high_pix_158041_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158042_CT_5.h5 found in folder 158042\n",
      "No runs in folder/not a folder: 158042high_pix_158042_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158043_CT_5.h5 found in folder 158043\n",
      "No runs in folder/not a folder: 158043high_pix_158043_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158044_CT_5.h5 found in folder 158044\n",
      "No runs in folder/not a folder: 158044high_pix_158044_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158051_CT_5.h5 found in folder 158051\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158052_CT_5.h5 found in folder 158052\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158054_CT_5.h5 found in folder 158054\n",
      "No runs in folder/not a folder: 158054high_pix_158054_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158055_CT_5.h5 found in folder 158055\n",
      "No runs in folder/not a folder: 158055high_pix_158055_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158114_CT_5.h5 found in folder 158114\n",
      "No runs in folder/not a folder: 158114high_pix_158114_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158115_CT_5.h5 found in folder 158115\n",
      "No runs in folder/not a folder: 158115high_pix_158115_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158116_CT_5.h5 found in folder 158116\n",
      "No runs in folder/not a folder: 158116high_pix_158116_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158117_CT_5.h5 found in folder 158117\n",
      "No runs in folder/not a folder: 158117high_pix_158117_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158118_CT_5.h5 found in folder 158118\n",
      "No runs in folder/not a folder: 158118high_pix_158118_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158126_CT_5.h5 found in folder 158126\n",
      "No runs in folder/not a folder: 158126high_pix_158126_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158127_CT_5.h5 found in folder 158127\n",
      "No runs in folder/not a folder: 158127high_pix_158127_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158128_CT_5.h5 found in folder 158128\n",
      "No runs in folder/not a folder: 158128high_pix_158128_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158136_CT_5.h5 found in folder 158136\n",
      "No runs in folder/not a folder: 158136high_pix_158136_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158137_CT_5.h5 found in folder 158137\n",
      "No runs in folder/not a folder: 158137high_pix_158137_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158149_CT_5.h5 found in folder 158149\n",
      "No runs in folder/not a folder: 158149high_pix_158149_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158151_CT_5.h5 found in folder 158151\n",
      "No runs in folder/not a folder: 158151high_pix_158151_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158212_CT_5.h5 found in folder 158212\n",
      "No runs in folder/not a folder: 158212high_pix_158212_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158213_CT_5.h5 found in folder 158213\n",
      "No runs in folder/not a folder: 158213high_pix_158213_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158214_CT_5.h5 found in folder 158214\n",
      "No runs in folder/not a folder: 158214high_pix_158214_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "Reading high_pix_158229_CT_5.h5\n",
      "Reading successful\n",
      "No runs in folder/not a folder: 158229high_pix_158229_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158230_CT_5.h5 found in folder 158230\n",
      "No runs in folder/not a folder: 158230high_pix_158230_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158231_CT_5.h5 found in folder 158231\n",
      "No runs in folder/not a folder: 158231high_pix_158231_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158232_CT_5.h5 found in folder 158232\n",
      "No runs in folder/not a folder: 158232high_pix_158232_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158233_CT_5.h5 found in folder 158233\n",
      "No runs in folder/not a folder: 158233high_pix_158233_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158251_CT_5.h5 found in folder 158251\n",
      "No runs in folder/not a folder: 158251high_pix_158251_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158252_CT_5.h5 found in folder 158252\n",
      "No runs in folder/not a folder: 158252high_pix_158252_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158253_CT_5.h5 found in folder 158253\n",
      "No runs in folder/not a folder: 158253high_pix_158253_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158254_CT_5.h5 found in folder 158254\n",
      "No runs in folder/not a folder: 158254high_pix_158254_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158255_CT_5.h5 found in folder 158255\n",
      "No runs in folder/not a folder: 158255high_pix_158255_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158285_CT_5.h5 found in folder 158285\n",
      "No runs in folder/not a folder: 158285high_pix_158285_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158286_CT_5.h5 found in folder 158286\n",
      "No runs in folder/not a folder: 158286high_pix_158286_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158287_CT_5.h5 found in folder 158287\n",
      "No runs in folder/not a folder: 158287high_pix_158287_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158288_CT_5.h5 found in folder 158288\n",
      "No runs in folder/not a folder: 158288high_pix_158288_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158331_CT_5.h5 found in folder 158331\n",
      "No runs in folder/not a folder: 158331high_pix_158331_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158332_CT_5.h5 found in folder 158332\n",
      "No runs in folder/not a folder: 158332high_pix_158332_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158333_CT_5.h5 found in folder 158333\n",
      "No runs in folder/not a folder: 158333high_pix_158333_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158334_CT_5.h5 found in folder 158334\n",
      "No runs in folder/not a folder: 158334high_pix_158334_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158353_CT_5.h5 found in folder 158353\n",
      "No runs in folder/not a folder: 158353high_pix_158353_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158354_CT_5.h5 found in folder 158354\n",
      "No runs in folder/not a folder: 158354high_pix_158354_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158355_CT_5.h5 found in folder 158355\n",
      "No runs in folder/not a folder: 158355high_pix_158355_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158356_CT_5.h5 found in folder 158356\n",
      "No runs in folder/not a folder: 158356high_pix_158356_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158357_CT_5.h5 found in folder 158357\n",
      "No runs in folder/not a folder: 158357high_pix_158357_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158358_CT_5.h5 found in folder 158358\n",
      "No runs in folder/not a folder: 158358high_pix_158358_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "Reading high_pix_158359_CT_5.h5\n",
      "Reading successful\n",
      "No runs in folder/not a folder: 158359high_pix_158359_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158360_CT_5.h5 found in folder 158360\n",
      "No runs in folder/not a folder: 158360high_pix_158360_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158361_CT_5.h5 found in folder 158361\n",
      "No runs in folder/not a folder: 158361high_pix_158361_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158362_CT_5.h5 found in folder 158362\n",
      "No runs in folder/not a folder: 158362high_pix_158362_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158363_CT_5.h5 found in folder 158363\n",
      "No runs in folder/not a folder: 158363high_pix_158363_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158375_CT_5.h5 found in folder 158375\n",
      "No runs in folder/not a folder: 158375high_pix_158375_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158376_CT_5.h5 found in folder 158376\n",
      "No runs in folder/not a folder: 158376high_pix_158376_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158382_CT_5.h5 found in folder 158382\n",
      "No runs in folder/not a folder: 158382high_pix_158382_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158383_CT_5.h5 found in folder 158383\n",
      "No runs in folder/not a folder: 158383high_pix_158383_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158384_CT_5.h5 found in folder 158384\n",
      "No runs in folder/not a folder: 158384high_pix_158384_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158385_CT_5.h5 found in folder 158385\n",
      "No runs in folder/not a folder: 158385high_pix_158385_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158386_CT_5.h5 found in folder 158386\n",
      "No runs in folder/not a folder: 158386high_pix_158386_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158387_CT_5.h5 found in folder 158387\n",
      "No runs in folder/not a folder: 158387high_pix_158387_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158388_CT_5.h5 found in folder 158388\n",
      "No runs in folder/not a folder: 158388high_pix_158388_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158389_CT_5.h5 found in folder 158389\n",
      "No runs in folder/not a folder: 158389high_pix_158389_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158390_CT_5.h5 found in folder 158390\n",
      "No runs in folder/not a folder: 158390high_pix_158390_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158391_CT_5.h5 found in folder 158391\n",
      "No runs in folder/not a folder: 158391high_pix_158391_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158392_CT_5.h5 found in folder 158392\n",
      "No runs in folder/not a folder: 158392high_pix_158392_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158394_CT_5.h5 found in folder 158394\n",
      "No runs in folder/not a folder: 158394high_pix_158394_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158395_CT_5.h5 found in folder 158395\n",
      "No runs in folder/not a folder: 158395high_pix_158395_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158396_CT_5.h5 found in folder 158396\n",
      "No runs in folder/not a folder: 158396high_pix_158396_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158397_CT_5.h5 found in folder 158397\n",
      "No runs in folder/not a folder: 158397high_pix_158397_CT_5.h5\n",
      "folder \"run158400-158599\" does not exist\n",
      "folder \"run158600-158799\" does not exist\n",
      "folder \"run158800-158999\" does not exist\n",
      "folder \"run159000-159199\" does not exist\n",
      "folder \"run159200-159399\" does not exist\n",
      "folder \"run159400-159599\" does not exist\n",
      "folder \"run159600-159799\" does not exist\n",
      "folder \"run159800-159999\" does not exist\n",
      "folder \"run160000-160199\" does not exist\n",
      "folder \"run160200-160399\" does not exist\n",
      "folder \"run160400-160599\" does not exist\n",
      "folder \"run160600-160799\" does not exist\n",
      "folder \"run160800-160999\" does not exist\n",
      "folder \"run161000-161199\" does not exist\n",
      "folder \"run161200-161399\" does not exist\n",
      "folder \"run161400-161599\" does not exist\n",
      "folder \"run161600-161799\" does not exist\n",
      "folder \"run161800-161999\" does not exist\n",
      "folder \"run162000-162199\" does not exist\n",
      "folder \"run162200-162399\" does not exist\n",
      "folder \"run162400-162599\" does not exist\n",
      "folder \"run162600-162799\" does not exist\n",
      "folder \"run162800-162999\" does not exist\n",
      "folder \"run163000-163199\" does not exist\n",
      "folder \"run163200-163399\" does not exist\n",
      "folder \"run163400-163599\" does not exist\n",
      "folder \"run163600-163799\" does not exist\n",
      "folder \"run163800-163999\" does not exist\n",
      "folder \"run164000-164199\" does not exist\n",
      "folder \"run164200-164399\" does not exist\n",
      "folder \"run164400-164599\" does not exist\n",
      "folder \"run164600-164799\" does not exist\n",
      "folder \"run164800-164999\" does not exist\n",
      "folder \"run165000-165199\" does not exist\n",
      "folder \"run165200-165399\" does not exist\n",
      "folder \"run165400-165599\" does not exist\n",
      "folder \"run165600-165799\" does not exist\n",
      "folder \"run165800-165999\" does not exist\n",
      "folder \"run166000-166199\" does not exist\n",
      "folder \"run166200-166399\" does not exist\n",
      "folder \"run166400-166599\" does not exist\n",
      "folder \"run166600-166799\" does not exist\n",
      "folder \"run166800-166999\" does not exist\n",
      "folder \"run167000-167199\" does not exist\n",
      "folder \"run167200-167399\" does not exist\n",
      "folder \"run167400-167599\" does not exist\n",
      "folder \"run167600-167799\" does not exist\n",
      "folder \"run167800-167999\" does not exist\n",
      "folder \"run168000-168199\" does not exist\n",
      "folder \"run168200-168399\" does not exist\n",
      "folder \"run168400-168599\" does not exist\n",
      "folder \"run168600-168799\" does not exist\n",
      "folder \"run168800-168999\" does not exist\n",
      "folder \"run169000-169199\" does not exist\n",
      "folder \"run169200-169399\" does not exist\n",
      "folder \"run169400-169599\" does not exist\n",
      "folder \"run169600-169799\" does not exist\n",
      "folder \"run169800-169999\" does not exist\n",
      "folder \"run170000-170199\" does not exist\n",
      "folder \"run170200-170399\" does not exist\n",
      "folder \"run170400-170599\" does not exist\n",
      "folder \"run170600-170799\" does not exist\n",
      "folder \"run170800-170999\" does not exist\n",
      "folder \"run171000-171199\" does not exist\n",
      "folder \"run171200-171399\" does not exist\n",
      "folder \"run171400-171599\" does not exist\n",
      "folder \"run171600-171799\" does not exist\n",
      "folder \"run171800-171999\" does not exist\n",
      "folder \"run172000-172199\" does not exist\n",
      "folder \"run172200-172399\" does not exist\n",
      "folder \"run172400-172599\" does not exist\n",
      "folder \"run172600-172799\" does not exist\n",
      "folder \"run172800-172999\" does not exist\n",
      "folder \"run173000-173199\" does not exist\n",
      "folder \"run173200-173399\" does not exist\n",
      "folder \"run173400-173599\" does not exist\n",
      "folder \"run173600-173799\" does not exist\n",
      "folder \"run173800-173999\" does not exist\n",
      "folder \"run174000-174199\" does not exist\n",
      "folder \"run174200-174399\" does not exist\n",
      "folder \"run174400-174599\" does not exist\n",
      "folder \"run174600-174799\" does not exist\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No file named high_pix_174808_CT_5.h5 found in folder 174808\n",
      "No runs in folder/not a folder: 174808high_pix_174808_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174809_CT_5.h5 found in folder 174809\n",
      "No runs in folder/not a folder: 174809high_pix_174809_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174810_CT_5.h5 found in folder 174810\n",
      "No runs in folder/not a folder: 174810high_pix_174810_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174811_CT_5.h5 found in folder 174811\n",
      "No runs in folder/not a folder: 174811high_pix_174811_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174812_CT_5.h5 found in folder 174812\n",
      "No runs in folder/not a folder: 174812high_pix_174812_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174813_CT_5.h5 found in folder 174813\n",
      "No runs in folder/not a folder: 174813high_pix_174813_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174851_CT_5.h5 found in folder 174851\n",
      "No runs in folder/not a folder: 174851high_pix_174851_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174852_CT_5.h5 found in folder 174852\n",
      "No runs in folder/not a folder: 174852high_pix_174852_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174853_CT_5.h5 found in folder 174853\n",
      "No runs in folder/not a folder: 174853high_pix_174853_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174854_CT_5.h5 found in folder 174854\n",
      "No runs in folder/not a folder: 174854high_pix_174854_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174855_CT_5.h5 found in folder 174855\n",
      "No runs in folder/not a folder: 174855high_pix_174855_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174886_CT_5.h5 found in folder 174886\n",
      "No runs in folder/not a folder: 174886high_pix_174886_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174887_CT_5.h5 found in folder 174887\n",
      "No runs in folder/not a folder: 174887high_pix_174887_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174888_CT_5.h5 found in folder 174888\n",
      "No runs in folder/not a folder: 174888high_pix_174888_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174889_CT_5.h5 found in folder 174889\n",
      "No runs in folder/not a folder: 174889high_pix_174889_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174890_CT_5.h5 found in folder 174890\n",
      "No runs in folder/not a folder: 174890high_pix_174890_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174901_CT_5.h5 found in folder 174901\n",
      "No runs in folder/not a folder: 174901high_pix_174901_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174902_CT_5.h5 found in folder 174902\n",
      "No runs in folder/not a folder: 174902high_pix_174902_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174903_CT_5.h5 found in folder 174903\n",
      "No runs in folder/not a folder: 174903high_pix_174903_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174904_CT_5.h5 found in folder 174904\n",
      "No runs in folder/not a folder: 174904high_pix_174904_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174926_CT_5.h5 found in folder 174926\n",
      "No runs in folder/not a folder: 174926high_pix_174926_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174927_CT_5.h5 found in folder 174927\n",
      "No runs in folder/not a folder: 174927high_pix_174927_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174928_CT_5.h5 found in folder 174928\n",
      "No runs in folder/not a folder: 174928high_pix_174928_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174929_CT_5.h5 found in folder 174929\n",
      "No runs in folder/not a folder: 174929high_pix_174929_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174947_CT_5.h5 found in folder 174947\n",
      "No runs in folder/not a folder: 174947high_pix_174947_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174949_CT_5.h5 found in folder 174949\n",
      "No runs in folder/not a folder: 174949high_pix_174949_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175117_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175118_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175119_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175120_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175121_CT_5.h5\n",
      "Reading successful\n",
      "Wall time: 219 ms\n"
     ]
    }
   ],
   "source": [
    "%%time \n",
    "test = read_data_sets(157000,175200)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "5231e630",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_selection_cut_from_h5(dict_high_pixel):\n",
    "    max_counts = 70\n",
    "    high_pixel_cut = {}\n",
    "    for nrun in dict_high_pixel.keys():\n",
    "        high_pixel_cut[nrun] = {}\n",
    "        print(type(dict_high_pixel[nrun][\"pix\"]))\n",
    "        values, counts = np.unique(np.array(dict_high_pixel[nrun][\"pix\"]), return_counts=True)\n",
    "        mask_max_counts = counts<max_counts       \n",
    "        st = set(values[mask_max_counts])\n",
    "        result = [i for i, e in enumerate(np.array(dict_high_pixel[nrun][\"pix\"])) if e in st]\n",
    "        high_pixel_cut[nrun][\"pix\"] = np.array(dict_high_pixel[nrun][\"pix\"])[result].astype(int)\n",
    "        high_pixel_cut[nrun][\"brightness\"] = np.array(dict_high_pixel[nrun][\"brightness\"])[result]\n",
    "        high_pixel_cut[nrun][\"time\"] = np.array(dict_high_pixel[nrun][\"time\"])[result]-dict_high_pixel[nrun][\"time\"][0]\n",
    "    return high_pixel_cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "id": "98ea72d8",
   "metadata": {},
   "outputs": [
    {
     "ename": "TypeError",
     "evalue": "get_config() takes no arguments (1 given)",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<timed exec>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n",
      "\u001b[1;31mTypeError\u001b[0m: get_config() takes no arguments (1 given)"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "hfile = h5py.(test[158229][\"pix\"])\n",
    "\n",
    "# print(test.keys())\n",
    "# # test_cut = apply_selection_cut(test)\n",
    "# print(type(test[158229][\"pix\"]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7f5ea1a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "######NEEDS TO BE DONE SOME TIME##################\n",
    "# def print_important_params(track_x, track_y, track_z):\n",
    "#     print(\"Track\", N, end =\": \")    \n",
    "#     start_time = track_z[0]\n",
    "#     stop_time = track_z[-1]\n",
    "#     print(\"Start:\", int(start_time), \"s , Stop: \", int(stop_time), \"s , Duration: \", int(stop_time-start_time), \"s\" )\n",
    "#     popt_param, pcov_param = curve_fit(lin_fit, track_x, track_y)\n",
    "#     print(\"linear fit : y =\",round(popt_param[0],4),\"* x +\",round(popt_param[1],4)) \n",
    "#     x_y_len = np.sqrt((track_x[-1]-track_x[0])**2+\n",
    "#                       (lin_fit(np.array(track_x), *popt_param)[-1] - \n",
    "#                        lin_fit(np.array(track_x), *popt_param)[0])**2 \n",
    "#                              )\n",
    "#     print(\"Length on cam:\", round(x_y_len, 4), \"m(?)\")\n",
    "#     print(\"Speed on cam: \", round(x_y_len/dur,4), \"m/s\")\n",
    "#     x_y = []\n",
    "#     for i in range(len(track_x)):\n",
    "#         x_y.append((round(track_x[i],4), \n",
    "#                     round(track_y[i],4)))\n",
    "#     print(\"Unique pixels:\",len(list(set(x_y))))\n",
    "#     print(\"Pixels per unit of length:\", round(len(list(set(x_y)))/x_y_len, 4) )   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "c88a87d1",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit \n",
    "##################Best Sorter yet##################\n",
    "\n",
    "def track_sorter(dict_pix, dict_tmp, dict_brightness, typed_nn_pixels):#typed_nn_pixels needed to work together with @jit\n",
    "    if len(dict_pix)==0:\n",
    "        tracks = List([[[-1.],[-1.],[-1.]]])\n",
    "        possible_meteorites = List([[[-1.],[-1.],[-1.]]])\n",
    "        #It is not possible to have neg. values in track, hence if -1, no track was found\n",
    "        return tracks, possible_meteorites\n",
    "    pix = list(dict_pix)\n",
    "    tmp = list(dict_tmp)\n",
    "    brightness = list(dict_brightness)    \n",
    "    nn_pixels = list(typed_nn_pixels)\n",
    "####Comments are for jit compatible List(), if this is needed in the future######\n",
    "#     x = List()\n",
    "#     y = List()\n",
    "#     z = List()\n",
    "#     x.append(float(pix[0]))\n",
    "#     y.append(float(tmp[0]))\n",
    "#     z.append(float(brightness[0]))\n",
    "#     track_zero = List()\n",
    "#     track_zero.append(x)\n",
    "#     track_zero.append(y)\n",
    "#     track_zero.append(z)\n",
    "#     tracks = List()\n",
    "#     tracks.append(track_zero)\n",
    "#     x = List(float(pix[0]))\n",
    "#     y = List(float(tmp[0]))\n",
    "#     z = List(float(brightness[0]))\n",
    "#     print(x,y,z)\n",
    "#     track_zero = List([x,y,z])\n",
    "#     x_met = List()\n",
    "#     y_met = List()\n",
    "#     z_met = List()\n",
    "#     x_met.append(float(pix[0]))\n",
    "#     y_met.append(float(tmp[0]))\n",
    "#     z_met.append(float(brightness[0]))\n",
    "#     track_zero_met = List()\n",
    "#     track_zero_met.append(x)\n",
    "#     track_zero_met.append(y)\n",
    "#     track_zero_met.append(z)\n",
    "#     possible_meteorites = List()\n",
    "#     possible_meteorites.append(track_zero_met)\n",
    "####Comments are for jit compatible List(), if this is needed in the future######\n",
    "    tracks = List([ [[float(pix[0])],[float(tmp[0])], [float(brightness[0])]]])\n",
    "    \n",
    "#     tracks = List([tracks_zero])\n",
    "    for i in range(1, len(pix)):\n",
    "        appended_to_track = False\n",
    "        for N in range(len(tracks)):\n",
    "            if tmp[i]-5 < tracks[N][1][-1]:\n",
    "                if len([x for x in nn_pixels[pix[i]] if x in tracks[N][0][-20:]])>0:\n",
    "                    tracks[N][0].append(pix[i])\n",
    "                    tracks[N][1].append(tmp[i])\n",
    "                    tracks[N][2].append(brightness[i])\n",
    "                    appended_to_track  = True \n",
    "                    break \n",
    "        if appended_to_track == False:\n",
    "            tracks.append([[float(pix[i])],[float(tmp[i])], [float(brightness[i])]])\n",
    "\n",
    "    possible_meteorites = List([[[0.],[0.],[0.]]])\n",
    "    to_remove = np.full((1,len(tracks)), -1)[0]   \n",
    "    for N in range(len(tracks)):        \n",
    "        if len(np.unique(np.array(tracks[N][0])))<3:\n",
    "            possible_meteorites.append(tracks[N])\n",
    "            to_remove[N] = N\n",
    "        elif len(np.unique(np.array(tracks[N][1])))<3:\n",
    "            possible_meteorites.append(tracks[N])\n",
    "            to_remove[N] = N\n",
    "    del possible_meteorites[0]\n",
    "    if len(possible_meteorites)==0:\n",
    "        possible_meteorites = List([[[-1.],[-1.],[-1.]]])\n",
    "    \n",
    "    to_remove = to_remove[to_remove != -1]\n",
    "    for i in range(len(to_remove)):\n",
    "        del tracks[to_remove[-(i+1)]]\n",
    "    if len(tracks)==0:\n",
    "        tracks = List([[[-1.],[-1.],[-1.]]])\n",
    "    return tracks, possible_meteorites"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "29d1c2f9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# @jit\n",
    "def adding_possible_meteorites(possible_met):# entry needs to be list of possible meteorite tracks with lists for pix, tmp, brightness\n",
    "    tmp = list(possible_met)    \n",
    "    trash = []\n",
    "    if len(possible_met)==0:\n",
    "        return tmp, trash\n",
    "#     for i in range(len(possible_met)):\n",
    "#         print(possible_met[i])\n",
    "    if len(tmp) == 0:\n",
    "        return \n",
    "    for N in reversed(range(len(tmp)-1)):\n",
    "        if len([x for x in tmp[N][1] if x in tmp[N-1][1]])>0:\n",
    "            tmp[N-1][0] = tmp[N][0]+ tmp[N-1][0]#pix\n",
    "            tmp[N-1][1] = tmp[N][1]+ tmp[N-1][1]#tmp\n",
    "            tmp[N-1][2] = tmp[N][2]+ tmp[N-1][2]#brightness\n",
    "            del tmp[N]\n",
    "    trash = []\n",
    "    for N in range(len(tmp)):\n",
    "        if (len(np.unique(tmp[N][0]))<2 or len(np.unique(tmp[N][1]))>100):\n",
    "            trash.append(tmp[N])\n",
    "    return tmp, trash"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "5571a17d",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit \n",
    "def adding_possible_meteorites_jit(pos_met):\n",
    "    tmp = List(pos_met)\n",
    "    trash = List()\n",
    "    if (len(pos_met)==0 or len(tmp)==0):\n",
    "        trash.append([[-1.],[-1.],[-1.]])\n",
    "        return tmp, trash\n",
    "    print(len(tmp))\n",
    "    index_to_del = List()\n",
    "    for N in range(len(tmp)-1):\n",
    "        if len([x for x in tmp[-(N+1)][1] if x in tmp[-(N+2)][1]])>0:\n",
    "#             trash.append(1)\n",
    "            tmp[-(N+2)][0] = tmp[-(N+2)][0]+ tmp[-(N+1)][0]#pix\n",
    "            tmp[-(N+2)][1] = tmp[-(N+2)][1]+ tmp[-(N+1)][1]#tmp\n",
    "            tmp[-(N+2)][2] = tmp[-(N+2)][2]+ tmp[-(N+1)][2]#brightness\n",
    "            index_to_del.append(-(N+1))\n",
    "#             del tmp[-(N+1)]\n",
    "    print(len(tmp))\n",
    "    for N in range(len(tmp)):\n",
    "        if (len(np.unique(np.array(tmp[N][0])))<2 or len(np.unique(np.array(tmp[N][1])))>100):\n",
    "            trash.append(tmp[N])\n",
    "            print(len(tmp))\n",
    "            index_to_del.append(N)\n",
    "#             del tmp[-(N+1)]\n",
    "    print(index_to_del)\n",
    "    return tmp, trash\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "0485e7cc",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175117_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175118_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175119_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175120_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175121_CT_5.h5\n",
      "Reading successful\n",
      "dict_keys([175117, 175118, 175119, 175120, 175121])\n"
     ]
    }
   ],
   "source": [
    "high_pixel = read_data_sets(175000,175200)\n",
    "print(high_pixel.keys())\n",
    "# a,b = adding_possible_meteorites_jit(possible_meteorite)\n",
    "# for i in range(len(a)):\n",
    "    \n",
    "# print(a)\n",
    "# print(b)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "97c036bc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def plot_poss_met(poss_met):#Input is possible meteorite or track\n",
    "    if len(poss_met)==0:\n",
    "        return\n",
    "    for i in range(len(poss_met)):\n",
    "        plot_from_pix(poss_met[i][0], poss_met[i][1])\n",
    "        draw_box()\n",
    "        #plt.colorbar()\n",
    "        plt.show()\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "1e9ad8d6",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_lin_fit(track):\n",
    "    if track[0][0][0] == -1:\n",
    "        return \n",
    "    x_box = np.arange(-1.25, 1.25, 0.1)\n",
    "    for i in range(len(track)):\n",
    "        pix_x, pix_y = get_x_y_from_pix(track[i][0])\n",
    "        popt, pcov = curve_fit(lin_fit, pix_x, pix_y)\n",
    "        print(popt)\n",
    "        plt.plot(x_box, lin_fit(x_box, popt[0], popt[1]))\n",
    "        plt.scatter(pix_x, pix_y)\n",
    "        plt.xlim(-1.25, 1.25)\n",
    "        plt.ylim(-1.25, 1.25)\n",
    "    plt.show\n",
    "    return"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "c106bb3d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_center_of_gravity(track):\n",
    "    if track[0][0][0] == -1:\n",
    "        cog = [[-10,-10]]\n",
    "        return cog\n",
    "    cog = []\n",
    "    for i in range(len(track)):\n",
    "        pix_x, pix_y = get_x_y_from_pix(track[i][0])\n",
    "        cog_x = round(np.average(pix_x), 6)\n",
    "        cog_y = round(np.average(pix_y), 6)\n",
    "        cog.append([cog_x, cog_y])\n",
    "    plt.show()\n",
    "    return cog"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "adba1b21",
   "metadata": {},
   "outputs": [],
   "source": [
    "#velocity and direction\n",
    "def get_velo(track):\n",
    "    if track[0][0][0] == -1:\n",
    "        vel = [0]\n",
    "        return vel\n",
    "    vel = []\n",
    "    for i in range(len(track)):\n",
    "        pix_x, pix_y = get_x_y_from_pix(track[i][0])\n",
    "        d = np.sqrt((pix_x[-1]-pix_x[0])**2+(pix_y[-1]-pix_y[0])**2)\n",
    "        t = track[i][1][-1]-track[i][1][0]\n",
    "        v = round(d/t, 5)\n",
    "        vel.append(v)\n",
    "    return vel\n",
    "def get_direction(track): #get direction from center of gravtiy in polar coordinates\n",
    "    if track[0][0][0] == -1:\n",
    "        direction = [[-1, 0]]\n",
    "        return direction\n",
    "    direction = []\n",
    "    cent_of_grav = get_center_of_gravity(track)\n",
    "    for i in range(len(track)):\n",
    "        pix_x, pix_y = get_x_y_from_pix(track[i][0])\n",
    "        direction_vec = [pix_x[-1]-cent_of_grav[i][0],pix_y[-1]-cent_of_grav[i][1]]\n",
    "        direction_polar_r = np.sqrt(direction_vec[0]**2+direction_vec[1]**2)\n",
    "        direction_polar_phi = np.arctan(direction_vec[1]/direction_vec[0])*180/np.pi\n",
    "        direction.append([round(direction_polar_r,6), round(direction_polar_phi,6)])\n",
    "    return direction"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "b8a13908",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_box():\n",
    "    mask_x_top = np.around(np.array(flash_geom_x), 6) == np.max(np.around(flash_geom_x, 6))\n",
    "    mask_x_bot = np.around(np.array(flash_geom_x), 6) == np.min(np.around(flash_geom_x, 6))\n",
    "    mask_y_top = np.around(np.array(flash_geom_y), 6) == np.max(np.around(flash_geom_y, 6))\n",
    "    mask_y_bot = np.around(np.array(flash_geom_y), 6) == np.min(np.around(flash_geom_y, 6))\n",
    "    \n",
    "    y_secondtolast = sorted(np.unique(np.around(flash_geom_y, 6)))[-2]\n",
    "    y_secondtofirst = sorted(np.unique(np.around(flash_geom_y, 6)))[1]\n",
    "    mask1 = np.around(np.array(flash_geom_y), 6) == y_secondtolast\n",
    "    mask2 = np.around(np.array(flash_geom_y), 6) == y_secondtofirst\n",
    "    \n",
    "    box_x = [flash_geom_x[mask_x_top][0],\n",
    "             np.max(np.around(flash_geom_x[mask1], 6)),\n",
    "            np.max(flash_geom_x[mask_y_top]),\n",
    "            np.min(flash_geom_x[mask_y_top]),\n",
    "            flash_geom_x[mask_x_bot][0],\n",
    "            flash_geom_x[mask_x_bot][-1],\n",
    "            np.min(flash_geom_x[mask_y_bot]),\n",
    "            np.max(flash_geom_x[mask_y_bot]),\n",
    "             np.max(np.around(flash_geom_x[mask2], 6)),\n",
    "            flash_geom_x[mask_x_top][0],\n",
    "            flash_geom_x[mask_x_top][0]]\n",
    "    box_y = [flash_geom_y[mask_x_top][0],\n",
    "             y_secondtolast,\n",
    "             flash_geom_y[mask_y_top][0],\n",
    "             flash_geom_y[mask_y_top][-1],\n",
    "             np.max(flash_geom_y[mask_x_bot]),\n",
    "             np.min(flash_geom_y[mask_x_bot]),\n",
    "             flash_geom_y[mask_y_bot][0],\n",
    "             flash_geom_y[mask_y_bot][-1],\n",
    "             y_secondtofirst,\n",
    "             flash_geom_y[mask_x_top][0],\n",
    "             flash_geom_y[mask_x_top][0]]\n",
    "#     for i in range(len(box_x)-2):\n",
    "#         if (box_x[i+1]-box_x[i]) !=0:\n",
    "#             if (box_x[i+1]-box_x[i])> 0:\n",
    "#                 x_vals = np.arange(box_x[i], box_x[i+1], 0.001)\n",
    "#             else:\n",
    "#                 x_vals = np.arange(box_x[i+1], box_x[i], 0.001)\n",
    "#             m_box = (box_y[i+1]-box_y[i])/(box_x[i+1]-box_x[i])\n",
    "#             t_box = box_y[i]- m_box*box_x[i]\n",
    "#             y_vals = m_box*x_vals + t_box\n",
    "#             plt.plot(x_vals, y_vals, c = \"black\")\n",
    "#             #idx = np.argwhere(np.diff(np.sign(m*x_vals+t - y_vals))).flatten()\n",
    "# #             if len(idx) !=0:\n",
    "# #                 intersections.append([x_vals[idx][0], y_vals[idx][0]])\n",
    "# #             plt.scatter(x_vals[idx], y_vals[idx], facecolors='none', edgecolors=\"black\")\n",
    "#         else:\n",
    "#             x_vals = [box_x[i]]\n",
    "#             if box_y[i]<box_y[i+1]:\n",
    "#                 y_vals = np.arange(box_y[i], box_y[i+1], 0.001)\n",
    "#             else:\n",
    "#                 y_vals = np.arange(box_y[i+1], box_y[i], 0.001)\n",
    "#             for j in range(len(y_vals)-1):\n",
    "#                 x_vals.append(x_vals[0])\n",
    "#             plt.vlines(box_x[i], box_y[i], box_y[i+1], colors =\"black\")\n",
    "    return box_x, box_y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "7215f42d",
   "metadata": {},
   "outputs": [],
   "source": [
    "def apply_selection_cut(dict_high_pixel):\n",
    "    max_counts = 70\n",
    "    high_pixel_cut = {}\n",
    "    for nrun in dict_high_pixel.keys():\n",
    "        high_pixel_cut[nrun] = {}\n",
    "        values, counts = np.unique(dict_high_pixel[nrun][\"pix\"], return_counts=True)\n",
    "        mask_max_counts = counts<max_counts       \n",
    "        st = set(values[mask_max_counts])\n",
    "        result = [i for i, e in enumerate(dict_high_pixel[nrun][\"pix\"]) if e in st]\n",
    "        high_pixel_cut[nrun][\"pix\"] = np.array(dict_high_pixel[nrun][\"pix\"])[result].astype(int)\n",
    "        high_pixel_cut[nrun][\"brightness\"] = np.array(dict_high_pixel[nrun][\"brightness\"])[result]\n",
    "        high_pixel_cut[nrun][\"time\"] = np.array(dict_high_pixel[nrun][\"time\"])[result]-dict_high_pixel[nrun][\"time\"][0]\n",
    "    return high_pixel_cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "535e8948",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit\n",
    "def apply_selection_cut_single_run_jit(high_pixel_single_run):\n",
    "    max_counts = 70\n",
    "    #[0,1,2] will correspond to [pixId, time, brightness]\n",
    "    values, counts = np.unique(high_pixel_single_run[0], return_counts=True)\n",
    "    high_pixel_cut = 1\n",
    "    return high_pixel_cut"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "1c1c42a5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "dict_keys([175117, 175118, 175119, 175120, 175121])\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "<ipython-input-11-872b2f8702b1>:1: NumbaWarning: \u001b[1m\n",
      "Compilation is falling back to object mode WITH looplifting enabled because Function \"apply_selection_cut_single_run_jit\" failed type inference due to: \u001b[1m\u001b[1mnon-precise type pyobject\u001b[0m\n",
      "\u001b[0m\u001b[1mDuring: typing of argument at <ipython-input-11-872b2f8702b1> (3)\u001b[0m\n",
      "\u001b[1m\n",
      "File \"<ipython-input-11-872b2f8702b1>\", line 3:\u001b[0m\n",
      "\u001b[1mdef apply_selection_cut_single_run_jit(high_pixel_single_run):\n",
      "\u001b[1m    max_counts = 70\n",
      "\u001b[0m    \u001b[1m^\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "  @jit\n",
      "c:\\users\\thomas\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\numba\\core\\object_mode_passes.py:152: NumbaWarning: \u001b[1mFunction \"apply_selection_cut_single_run_jit\" was compiled in object mode without forceobj=True.\n",
      "\u001b[1m\n",
      "File \"<ipython-input-11-872b2f8702b1>\", line 2:\u001b[0m\n",
      "\u001b[1m@jit\n",
      "\u001b[1mdef apply_selection_cut_single_run_jit(high_pixel_single_run):\n",
      "\u001b[0m\u001b[1m^\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "  state.func_ir.loc))\n",
      "c:\\users\\thomas\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\numba\\core\\object_mode_passes.py:162: NumbaDeprecationWarning: \u001b[1m\n",
      "Fall-back from the nopython compilation path to the object mode compilation path has been detected, this is deprecated behaviour.\n",
      "\n",
      "For more information visit https://numba.readthedocs.io/en/stable/reference/deprecation.html#deprecation-of-object-mode-fall-back-behaviour-when-using-jit\n",
      "\u001b[1m\n",
      "File \"<ipython-input-11-872b2f8702b1>\", line 2:\u001b[0m\n",
      "\u001b[1m@jit\n",
      "\u001b[1mdef apply_selection_cut_single_run_jit(high_pixel_single_run):\n",
      "\u001b[0m\u001b[1m^\u001b[0m\u001b[0m\n",
      "\u001b[0m\n",
      "  state.func_ir.loc))\n"
     ]
    },
    {
     "ename": "KeyError",
     "evalue": "0",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-12-1f1ea1fd6c73>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mhigh_pixel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      2\u001b[0m \u001b[1;32mfor\u001b[0m \u001b[0mnrun\u001b[0m \u001b[1;32min\u001b[0m \u001b[0mhigh_pixel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m:\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 3\u001b[1;33m     \u001b[0mcut_high_pixel\u001b[0m \u001b[1;33m=\u001b[0m \u001b[0mapply_selection_cut_single_run_jit\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mhigh_pixel\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnrun\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      4\u001b[0m     \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mcut_high_pixel\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mKeyError\u001b[0m: 0"
     ]
    }
   ],
   "source": [
    "print(high_pixel.keys())\n",
    "for nrun in high_pixel.keys():\n",
    "    cut_high_pixel = apply_selection_cut_single_run_jit(high_pixel[nrun])\n",
    "    print(cut_high_pixel.keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "ca878462",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[1.198002, 0.591784, 0.548483, -0.57735, -1.183568, -1.183568, -0.620652, 0.591784, 0.635085, 1.198002, 1.198002]\n",
      "[-0.025, 1.025, 1.05, 1.05, 0.0, -0.05, -1.025, -1.025, -1.0, -0.025, -0.025]\n",
      "[-0.17492489  0.35436308]\n",
      "[-0.18252257 -0.12108783]\n",
      "[-1.73210162  2.05005774]\n",
      "0.5918 1.1978 607\n",
      "[-0.57736721  1.36668591]\n",
      "0.5485 0.5915 44\n",
      "[2.94280378e-10 1.05000000e+00]\n",
      "-0.5774 0.5476 1126\n",
      "[1.73210162 2.05011547]\n",
      "-1.1836 -0.5776 607\n",
      "[ 93.50249506 110.64455273]\n",
      "-1.1836 -1.1836 1\n",
      "[-1.73210162 -2.10011547]\n",
      "-1.1836 -0.6216 563\n",
      "[ 4.91366559e-09 -1.02500000e+00]\n",
      "-0.6207 0.5913 1213\n",
      "[ 0.57736721 -1.36668591]\n",
      "0.5918 0.6348 44\n",
      "[ 1.73210162 -2.10005774]\n",
      "0.6351 1.1971 563\n",
      "[ 2.48330551 -3.        ]\n",
      "1.198 1.198 1\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "c:\\users\\thomas\\appdata\\local\\programs\\python\\python37\\lib\\site-packages\\scipy\\optimize\\minpack.py:829: OptimizeWarning: Covariance of the parameters could not be estimated\n",
      "  category=OptimizeWarning)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.collections.PathCollection at 0x1b027e25860>"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "a,b = get_box()\n",
    "print(a)\n",
    "print(b)\n",
    "r = []\n",
    "phi = []\n",
    "a = np.around(a, 4)\n",
    "b = np.around(b, 4)\n",
    "get_lin_fit(track)\n",
    "for i in range(len(track)):\n",
    "    plot_from_pix(track[i][0], track[i][1])\n",
    "x_ranges =[]\n",
    "for i in range(len(a)-1):\n",
    "    popt, pcov= curve_fit(lin_fit, [a[i], a[i+1]], [b[i], b[i+1]] ) ##need to ignore bad pcov somehow\n",
    "    print(popt)\n",
    "    if a[i]<a[i+1]:\n",
    "        x_range = np.arange(a[i], a[i+1], 0.001)\n",
    "    elif a[i]>a[i+1]:\n",
    "        x_range = np.arange(a[i+1], a[i], 0.001)\n",
    "    else:\n",
    "        x_range = np.array([a[i]])\n",
    "    x_range = np.around(x_range, 4)\n",
    "    print(min(x_range), max(x_range), len(x_range))\n",
    "    #plt.plot(x_range, lin_fit(x_range, popt[0], popt[1]))\n",
    "    x_ranges.append(x_range)\n",
    "plt.scatter(a,b, c = np.arange(len(a)), cmap = \"jet\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8099d6c",
   "metadata": {},
   "source": [
    ".\n",
    "\n",
    ".\n",
    "\n",
    ".\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "Evaluation of data starts here\n",
    ".\n",
    "\n",
    ".\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "63cbb85b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "Reading high_pix_158035_CT_5.h5\n",
      "Reading successful\n",
      "No runs in folder/not a folder: 158035high_pix_158035_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158037_CT_5.h5 found in folder 158037\n",
      "No runs in folder/not a folder: 158037high_pix_158037_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158038_CT_5.h5 found in folder 158038\n",
      "No runs in folder/not a folder: 158038high_pix_158038_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158039_CT_5.h5 found in folder 158039\n",
      "No runs in folder/not a folder: 158039high_pix_158039_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158040_CT_5.h5 found in folder 158040\n",
      "No runs in folder/not a folder: 158040high_pix_158040_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158041_CT_5.h5 found in folder 158041\n",
      "No runs in folder/not a folder: 158041high_pix_158041_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158042_CT_5.h5 found in folder 158042\n",
      "No runs in folder/not a folder: 158042high_pix_158042_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158043_CT_5.h5 found in folder 158043\n",
      "No runs in folder/not a folder: 158043high_pix_158043_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158044_CT_5.h5 found in folder 158044\n",
      "No runs in folder/not a folder: 158044high_pix_158044_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158051_CT_5.h5 found in folder 158051\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158052_CT_5.h5 found in folder 158052\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158054_CT_5.h5 found in folder 158054\n",
      "No runs in folder/not a folder: 158054high_pix_158054_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158055_CT_5.h5 found in folder 158055\n",
      "No runs in folder/not a folder: 158055high_pix_158055_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158114_CT_5.h5 found in folder 158114\n",
      "No runs in folder/not a folder: 158114high_pix_158114_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158115_CT_5.h5 found in folder 158115\n",
      "No runs in folder/not a folder: 158115high_pix_158115_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158116_CT_5.h5 found in folder 158116\n",
      "No runs in folder/not a folder: 158116high_pix_158116_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158117_CT_5.h5 found in folder 158117\n",
      "No runs in folder/not a folder: 158117high_pix_158117_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158118_CT_5.h5 found in folder 158118\n",
      "No runs in folder/not a folder: 158118high_pix_158118_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158126_CT_5.h5 found in folder 158126\n",
      "No runs in folder/not a folder: 158126high_pix_158126_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158127_CT_5.h5 found in folder 158127\n",
      "No runs in folder/not a folder: 158127high_pix_158127_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158128_CT_5.h5 found in folder 158128\n",
      "No runs in folder/not a folder: 158128high_pix_158128_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158136_CT_5.h5 found in folder 158136\n",
      "No runs in folder/not a folder: 158136high_pix_158136_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158137_CT_5.h5 found in folder 158137\n",
      "No runs in folder/not a folder: 158137high_pix_158137_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158149_CT_5.h5 found in folder 158149\n",
      "No runs in folder/not a folder: 158149high_pix_158149_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158000-158199\n",
      "No file named high_pix_158151_CT_5.h5 found in folder 158151\n",
      "No runs in folder/not a folder: 158151high_pix_158151_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158212_CT_5.h5 found in folder 158212\n",
      "No runs in folder/not a folder: 158212high_pix_158212_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158213_CT_5.h5 found in folder 158213\n",
      "No runs in folder/not a folder: 158213high_pix_158213_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158214_CT_5.h5 found in folder 158214\n",
      "No runs in folder/not a folder: 158214high_pix_158214_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "Reading high_pix_158229_CT_5.h5\n",
      "Reading successful\n",
      "No runs in folder/not a folder: 158229high_pix_158229_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158230_CT_5.h5 found in folder 158230\n",
      "No runs in folder/not a folder: 158230high_pix_158230_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158231_CT_5.h5 found in folder 158231\n",
      "No runs in folder/not a folder: 158231high_pix_158231_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158232_CT_5.h5 found in folder 158232\n",
      "No runs in folder/not a folder: 158232high_pix_158232_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158233_CT_5.h5 found in folder 158233\n",
      "No runs in folder/not a folder: 158233high_pix_158233_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158251_CT_5.h5 found in folder 158251\n",
      "No runs in folder/not a folder: 158251high_pix_158251_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158252_CT_5.h5 found in folder 158252\n",
      "No runs in folder/not a folder: 158252high_pix_158252_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158253_CT_5.h5 found in folder 158253\n",
      "No runs in folder/not a folder: 158253high_pix_158253_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158254_CT_5.h5 found in folder 158254\n",
      "No runs in folder/not a folder: 158254high_pix_158254_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158255_CT_5.h5 found in folder 158255\n",
      "No runs in folder/not a folder: 158255high_pix_158255_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158285_CT_5.h5 found in folder 158285\n",
      "No runs in folder/not a folder: 158285high_pix_158285_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158286_CT_5.h5 found in folder 158286\n",
      "No runs in folder/not a folder: 158286high_pix_158286_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158287_CT_5.h5 found in folder 158287\n",
      "No runs in folder/not a folder: 158287high_pix_158287_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158288_CT_5.h5 found in folder 158288\n",
      "No runs in folder/not a folder: 158288high_pix_158288_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158331_CT_5.h5 found in folder 158331\n",
      "No runs in folder/not a folder: 158331high_pix_158331_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158332_CT_5.h5 found in folder 158332\n",
      "No runs in folder/not a folder: 158332high_pix_158332_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158333_CT_5.h5 found in folder 158333\n",
      "No runs in folder/not a folder: 158333high_pix_158333_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158334_CT_5.h5 found in folder 158334\n",
      "No runs in folder/not a folder: 158334high_pix_158334_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158353_CT_5.h5 found in folder 158353\n",
      "No runs in folder/not a folder: 158353high_pix_158353_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158354_CT_5.h5 found in folder 158354\n",
      "No runs in folder/not a folder: 158354high_pix_158354_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158355_CT_5.h5 found in folder 158355\n",
      "No runs in folder/not a folder: 158355high_pix_158355_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158356_CT_5.h5 found in folder 158356\n",
      "No runs in folder/not a folder: 158356high_pix_158356_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158357_CT_5.h5 found in folder 158357\n",
      "No runs in folder/not a folder: 158357high_pix_158357_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158358_CT_5.h5 found in folder 158358\n",
      "No runs in folder/not a folder: 158358high_pix_158358_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "Reading high_pix_158359_CT_5.h5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Reading successful\n",
      "No runs in folder/not a folder: 158359high_pix_158359_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158360_CT_5.h5 found in folder 158360\n",
      "No runs in folder/not a folder: 158360high_pix_158360_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158361_CT_5.h5 found in folder 158361\n",
      "No runs in folder/not a folder: 158361high_pix_158361_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158362_CT_5.h5 found in folder 158362\n",
      "No runs in folder/not a folder: 158362high_pix_158362_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158363_CT_5.h5 found in folder 158363\n",
      "No runs in folder/not a folder: 158363high_pix_158363_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158375_CT_5.h5 found in folder 158375\n",
      "No runs in folder/not a folder: 158375high_pix_158375_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158376_CT_5.h5 found in folder 158376\n",
      "No runs in folder/not a folder: 158376high_pix_158376_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158382_CT_5.h5 found in folder 158382\n",
      "No runs in folder/not a folder: 158382high_pix_158382_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158383_CT_5.h5 found in folder 158383\n",
      "No runs in folder/not a folder: 158383high_pix_158383_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158384_CT_5.h5 found in folder 158384\n",
      "No runs in folder/not a folder: 158384high_pix_158384_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158385_CT_5.h5 found in folder 158385\n",
      "No runs in folder/not a folder: 158385high_pix_158385_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158386_CT_5.h5 found in folder 158386\n",
      "No runs in folder/not a folder: 158386high_pix_158386_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158387_CT_5.h5 found in folder 158387\n",
      "No runs in folder/not a folder: 158387high_pix_158387_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158388_CT_5.h5 found in folder 158388\n",
      "No runs in folder/not a folder: 158388high_pix_158388_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158389_CT_5.h5 found in folder 158389\n",
      "No runs in folder/not a folder: 158389high_pix_158389_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158390_CT_5.h5 found in folder 158390\n",
      "No runs in folder/not a folder: 158390high_pix_158390_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158391_CT_5.h5 found in folder 158391\n",
      "No runs in folder/not a folder: 158391high_pix_158391_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158392_CT_5.h5 found in folder 158392\n",
      "No runs in folder/not a folder: 158392high_pix_158392_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158394_CT_5.h5 found in folder 158394\n",
      "No runs in folder/not a folder: 158394high_pix_158394_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158395_CT_5.h5 found in folder 158395\n",
      "No runs in folder/not a folder: 158395high_pix_158395_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158396_CT_5.h5 found in folder 158396\n",
      "No runs in folder/not a folder: 158396high_pix_158396_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run158200-158399\n",
      "No file named high_pix_158397_CT_5.h5 found in folder 158397\n",
      "No runs in folder/not a folder: 158397high_pix_158397_CT_5.h5\n",
      "folder \"run158400-158599\" does not exist\n",
      "folder \"run158600-158799\" does not exist\n",
      "folder \"run158800-158999\" does not exist\n",
      "folder \"run159000-159199\" does not exist\n",
      "folder \"run159200-159399\" does not exist\n",
      "folder \"run159400-159599\" does not exist\n",
      "folder \"run159600-159799\" does not exist\n",
      "folder \"run159800-159999\" does not exist\n",
      "folder \"run160000-160199\" does not exist\n",
      "folder \"run160200-160399\" does not exist\n",
      "folder \"run160400-160599\" does not exist\n",
      "folder \"run160600-160799\" does not exist\n",
      "folder \"run160800-160999\" does not exist\n",
      "folder \"run161000-161199\" does not exist\n",
      "folder \"run161200-161399\" does not exist\n",
      "folder \"run161400-161599\" does not exist\n",
      "folder \"run161600-161799\" does not exist\n",
      "folder \"run161800-161999\" does not exist\n",
      "folder \"run162000-162199\" does not exist\n",
      "folder \"run162200-162399\" does not exist\n",
      "folder \"run162400-162599\" does not exist\n",
      "folder \"run162600-162799\" does not exist\n",
      "folder \"run162800-162999\" does not exist\n",
      "folder \"run163000-163199\" does not exist\n",
      "folder \"run163200-163399\" does not exist\n",
      "folder \"run163400-163599\" does not exist\n",
      "folder \"run163600-163799\" does not exist\n",
      "folder \"run163800-163999\" does not exist\n",
      "folder \"run164000-164199\" does not exist\n",
      "folder \"run164200-164399\" does not exist\n",
      "folder \"run164400-164599\" does not exist\n",
      "folder \"run164600-164799\" does not exist\n",
      "folder \"run164800-164999\" does not exist\n",
      "folder \"run165000-165199\" does not exist\n",
      "folder \"run165200-165399\" does not exist\n",
      "folder \"run165400-165599\" does not exist\n",
      "folder \"run165600-165799\" does not exist\n",
      "folder \"run165800-165999\" does not exist\n",
      "folder \"run166000-166199\" does not exist\n",
      "folder \"run166200-166399\" does not exist\n",
      "folder \"run166400-166599\" does not exist\n",
      "folder \"run166600-166799\" does not exist\n",
      "folder \"run166800-166999\" does not exist\n",
      "folder \"run167000-167199\" does not exist\n",
      "folder \"run167200-167399\" does not exist\n",
      "folder \"run167400-167599\" does not exist\n",
      "folder \"run167600-167799\" does not exist\n",
      "folder \"run167800-167999\" does not exist\n",
      "folder \"run168000-168199\" does not exist\n",
      "folder \"run168200-168399\" does not exist\n",
      "folder \"run168400-168599\" does not exist\n",
      "folder \"run168600-168799\" does not exist\n",
      "folder \"run168800-168999\" does not exist\n",
      "folder \"run169000-169199\" does not exist\n",
      "folder \"run169200-169399\" does not exist\n",
      "folder \"run169400-169599\" does not exist\n",
      "folder \"run169600-169799\" does not exist\n",
      "folder \"run169800-169999\" does not exist\n",
      "folder \"run170000-170199\" does not exist\n",
      "folder \"run170200-170399\" does not exist\n",
      "folder \"run170400-170599\" does not exist\n",
      "folder \"run170600-170799\" does not exist\n",
      "folder \"run170800-170999\" does not exist\n",
      "folder \"run171000-171199\" does not exist\n",
      "folder \"run171200-171399\" does not exist\n",
      "folder \"run171400-171599\" does not exist\n",
      "folder \"run171600-171799\" does not exist\n",
      "folder \"run171800-171999\" does not exist\n",
      "folder \"run172000-172199\" does not exist\n",
      "folder \"run172200-172399\" does not exist\n",
      "folder \"run172400-172599\" does not exist\n",
      "folder \"run172600-172799\" does not exist\n",
      "folder \"run172800-172999\" does not exist\n",
      "folder \"run173000-173199\" does not exist\n",
      "folder \"run173200-173399\" does not exist\n",
      "folder \"run173400-173599\" does not exist\n",
      "folder \"run173600-173799\" does not exist\n",
      "folder \"run173800-173999\" does not exist\n",
      "folder \"run174000-174199\" does not exist\n",
      "folder \"run174200-174399\" does not exist\n",
      "folder \"run174400-174599\" does not exist\n",
      "folder \"run174600-174799\" does not exist\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174808_CT_5.h5 found in folder 174808\n",
      "No runs in folder/not a folder: 174808high_pix_174808_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174809_CT_5.h5 found in folder 174809\n",
      "No runs in folder/not a folder: 174809high_pix_174809_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174810_CT_5.h5 found in folder 174810\n",
      "No runs in folder/not a folder: 174810high_pix_174810_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174811_CT_5.h5 found in folder 174811\n",
      "No runs in folder/not a folder: 174811high_pix_174811_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174812_CT_5.h5 found in folder 174812\n",
      "No runs in folder/not a folder: 174812high_pix_174812_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174813_CT_5.h5 found in folder 174813\n",
      "No runs in folder/not a folder: 174813high_pix_174813_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174851_CT_5.h5 found in folder 174851\n",
      "No runs in folder/not a folder: 174851high_pix_174851_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174852_CT_5.h5 found in folder 174852\n",
      "No runs in folder/not a folder: 174852high_pix_174852_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174853_CT_5.h5 found in folder 174853\n",
      "No runs in folder/not a folder: 174853high_pix_174853_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174854_CT_5.h5 found in folder 174854\n",
      "No runs in folder/not a folder: 174854high_pix_174854_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174855_CT_5.h5 found in folder 174855\n",
      "No runs in folder/not a folder: 174855high_pix_174855_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174886_CT_5.h5 found in folder 174886\n",
      "No runs in folder/not a folder: 174886high_pix_174886_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174887_CT_5.h5 found in folder 174887\n",
      "No runs in folder/not a folder: 174887high_pix_174887_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174888_CT_5.h5 found in folder 174888\n",
      "No runs in folder/not a folder: 174888high_pix_174888_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174889_CT_5.h5 found in folder 174889\n",
      "No runs in folder/not a folder: 174889high_pix_174889_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174890_CT_5.h5 found in folder 174890\n",
      "No runs in folder/not a folder: 174890high_pix_174890_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174901_CT_5.h5 found in folder 174901\n",
      "No runs in folder/not a folder: 174901high_pix_174901_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174902_CT_5.h5 found in folder 174902\n",
      "No runs in folder/not a folder: 174902high_pix_174902_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174903_CT_5.h5 found in folder 174903\n",
      "No runs in folder/not a folder: 174903high_pix_174903_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174904_CT_5.h5 found in folder 174904\n",
      "No runs in folder/not a folder: 174904high_pix_174904_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174926_CT_5.h5 found in folder 174926\n",
      "No runs in folder/not a folder: 174926high_pix_174926_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174927_CT_5.h5 found in folder 174927\n",
      "No runs in folder/not a folder: 174927high_pix_174927_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174928_CT_5.h5 found in folder 174928\n",
      "No runs in folder/not a folder: 174928high_pix_174928_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174929_CT_5.h5 found in folder 174929\n",
      "No runs in folder/not a folder: 174929high_pix_174929_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174947_CT_5.h5 found in folder 174947\n",
      "No runs in folder/not a folder: 174947high_pix_174947_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run174800-174999\n",
      "No file named high_pix_174949_CT_5.h5 found in folder 174949\n",
      "No runs in folder/not a folder: 174949high_pix_174949_CT_5.h5\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175117_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175118_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175119_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175120_CT_5.h5\n",
      "Reading successful\n",
      "D:\\Masterarbeit ECAP\\First plots\\eval_data\\high_pixel\\run175000-175199\n",
      "Reading high_pix_175121_CT_5.h5\n",
      "Reading successful\n",
      "folder \"run175200-175399\" does not exist\n",
      "[158035, 158229, 158359, 175117, 175118, 175119, 175120, 175121]\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "158035\n",
      "158035 tracks: 1 meteorite or junk: 60\n",
      "Run 158035 without satelite tracks\n",
      "0\n",
      "158229\n",
      "158229 tracks: 2 meteorite or junk: 14\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "158359\n",
      "158359 tracks: 1 meteorite or junk: 22\n",
      "Run 158359 without satelite tracks\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEGCAYAAAB7DNKzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAVyklEQVR4nO3de7RedX3n8fcnCQEKM4AkBeSWKDgWHEQ5MngZlQEtMJoAlgq6Fkil0Vle2s6ysxzpxZFlK20da2donUgZ0SLYcUqNEmQwoDhjKRwUCIECAUGCECIIUq65fOePZ8ecHs7ZedKc55Jz3q+1nnX2/u1f9v6yz+F8zr79dqoKSZImM2vQBUiShptBIUlqZVBIkloZFJKkVgaFJKnVnEEXMNXmzZtXCxYsGHQZkrRDuemmm35SVfMnWjbtgmLBggWMjo4OugxJ2qEkuX+yZZ56kiS1MigkSa0MCklSK4NCktTKoJAktTIoJEmtDApJUiuDQpLUyqCQJLUyKCRJrQwKSVIrg0KS1MqgkCS1MigkSa0MCklSK4NCktTKoJAktRpoUCS5KMkjSW6bZHmS/FmS1UluTfLqftcoSTPdoI8ovgCc0LL8RODQ5rME+Is+1CRJGmOgQVFV1wGPtXRZDHyxOq4H9kyyX3+qkyTB4I8otmZ/4IEx82uatn8iyZIko0lG161b17fiJGkmGPag6EpVLa2qkaoamT9//qDLkaRpZdiD4kHgwDHzBzRtkqQ+GfagWAac2dz9dAzwRFU9NOiiJGkmmTPIjSe5FHgzMC/JGuD3gZ0AqupzwHLgJGA18DRw9mAqlaSZa6BBUVVnbGV5AR/oUzmSpAkM+6knSdKAGRSSpFYGhSSplUEhSWplUEiSWhkUkqRWBoUkqZVBIUlqZVBIkloZFJKkVgaFJKmVQSFJamVQSJJaGRSSpFYGhSSplUEhSWplUEiSWhkUkqRWBoUkqZVBIUlqZVBIkloZFJKkVgaFJKmVQSFJamVQSJJaGRSSpFYGhSSplUEhSWplUEiSWhkUkqRWBoUkqZVBIUlqZVBIkloZFJKkVgMNiiQnJLkzyeokH51g+XuSrEtyc/M5ZxB1StJMNmdQG04yG7gAeAuwBrgxybKqun1c169U1Qf7XqAkCRjsEcXRwOqqureqngcuAxYPsB5J0gQGGRT7Aw+MmV/TtI33jiS3JvlqkgP7U5okabNhv5j9dWBBVR0BXA1cPFGnJEuSjCYZXbduXV8LlKTpbpBB8SAw9gjhgKbt56rq0ap6rpm9EDhqohVV1dKqGqmqkfnz5/ekWEmaqQYZFDcChyZZmGQucDqwbGyHJPuNmV0E3NHH+iRJDPCup6rakOSDwFXAbOCiqlqV5BPAaFUtAz6cZBGwAXgMeM+g6pWkmSpVNegaptTIyEiNjo4OugxJ2qEkuamqRiZaNuwXsyVJA2ZQSJJaGRSSpFYGhSSplUEhSWq11aBI8tIkOzfTb07y4SR79rwySdJQ6OaI4n8DG5McAiyl8zT1l3talSRpaHQTFJuqagNwCvDfquq3gf228m8kSdNEN0GxPskZwFnAN5q2nXpXkiRpmHQTFGcDrwU+WVU/TLIQ+FJvy5IkDYutBkXzxrmPACuTvAJYU1Xn97wySdJQ2OqggEneTOc9EPcBAQ5MclZVXdfTyiRJQ6Gb0WM/Dby1qu4ESPIy4FImeTeEJGl66eYaxU6bQwKgqu7Ci9mSNGN0c0QxmuRC4K+a+XcDjuMtSTNEN0HxH4APAB9u5r8L/HnPKpIkDZWtBkVVPZfkvwMrgE3AnVX1fM8rkyQNhW7uevr3wOeAe+jc9bQwyfuq6speFydJGrxu73o6tqpWQ2eQQOAKwKCQpBmgm7uentwcEo17gSd7VI8kach0e9fTcuCvgQJOA25McipAVf1ND+uTJA1YN0GxC7AWeFMzvw7YFXg7neAwKCRpGuvmrqez+1GIJGk4bdOrUJN8v1eFSJKG07a+Mzs9qUKSNLS2NSiu6EkVkqShtdWgSPLpJIcDVNXv9L4kSdIw6eaI4g5gaZK/T/L+JHv0uihJ0vDo5g13F1bV64EzgQXArUm+nOTYXhcnSRq8rq5RJJkNvLz5/AS4BfiPSS7rYW2SpCHQzaCAnwHeBlwD/EFV3dAsOj/JnZP/S0nSdNDNk9m3Ar9TVU9NsOzoKa5HkjRkunky+3+2LHtiasuRJA2bbX2OQpI0w3Rz6knSVvzsefjGffD0BvjlA+HAfzF1616/Ea78ETz0NLx2Hzhi3tStW+pG10GR5BfpjCQLQFX9aHs3nuQE4LPAbODCqvrUuOU7A18EjgIeBd5ZVfdt73alqXT1A3DKlTArsLFgU8HvjsDHjtr+dd/9OLzxb+Gp9bBhEyRw0sFw2VtgtucD1CfdPJm9KMndwA+B7wD3MQVvt2tuub0AOBE4DDgjyWHjur0X+GlVHQJ8Bjh/e7crTaWn1sOp34SnNsCT6ztHFM9uhE/eBDeu3f71n/pNWPt0Z93PbOysf/n98Pnbt3/dUre6+ZvkPOAY4K6qWggcB1w/Bds+GlhdVfdW1fPAZcDicX0WAxc3018FjkviwIQaGlf9aOKRMp/dCBdv583j9/0M7nmi89KXsZ7eAP/DoFAfdRMU66vqUWBWkllVdS0wMgXb3h94YMz8mqZtwj5VtQF4Ath7/IqSLEkymmR03bp1U1Ca1J3nNr3wFzl0Tj89s2E7172xc6ppsmVSv3QTFI8n2R24DrgkyWeBiZ6pGJiqWlpVI1U1Mn/+/EGXoxnkLQd0rh2Mt9sc+NVDtm/dL9sT9pr7wvadZsG7Dt2+dUvbopugWAw8DfwW8E3gHjqvQd1eDwIHjpk/oGmbsE+SOcAedC5qS0Nh3q7wp2+AXWfDnHROQ+02BxYthLceuNV/3iqBV05wh9OGTfDafbdv3dK2aL3rqbng/I2qOhbYxJbrBVPhRuDQJAvpBMLpwLvG9VkGnAX8HfArwDVVNdGRvjQw7zsc3rgffPGuzsXtkxfCsftPftqoWz99FlaM/9OJzqmu/3ozHHfA9q1f6lZrUFTVxiSbkuwx1U9hV9WGJB8ErqJze+xFVbUqySeA0apaBvwl8KUkq4HH6ISJNHR+6UXwh8dM7ToffArmzpr4esRdj0/ttqQ23TxH8Y/AyiRXM+baRFV9eHs3XlXLgeXj2n5vzPSzwGnbux1pR7TwX8KGCY6fZwVes0//69HM1U1Q/E3zkdRHu+0EH3klfPqWzi2xm+06G353Ch7mk7rVzaCAFyfZFTioqhxWXOqj/3I0HLA7nP8DWPcM/Jt94I9f1znVJfVLN++jeDvwJ8BcYGGSI4FPVNWiHtcmzXgJLDm885EGpZvbYz9O5ynqxwGq6mbgJT2rSJI0VLp9Mnv8HU8TPGIkSZqOurmYvSrJu4DZSQ4FPgx8r7dlSZKGRTdHFB8CDgeeAy4Ffgb8Zg9rkiQNkW7uenoaOLf5SJJmmG7uehoBPgYsGNu/qo7oXVmSpGHRzTWKS4DfBlbiRWxJmnG6CYp1zbhLkqQZqJug+P0kFwIr6FzQBqCqHNZDkmaAboLibODlwE5sOfVUOP6TJM0I3QTFa6rqX/W8EknSUOrmOYrvJTms55VIkoZSN0cUxwA3J/khnWsUAcrbYyVpZugmKE7oeRWSpKHVzZPZ9wMk+UVgl55XJEkaKlu9RpFkUZK7gR8C3wHuA67scV2SpCHRzcXs8+hcp7irqhYCxwHX97QqSdLQ6PZ9FI8Cs5LMqqprgZEe1yVJGhLdXMx+PMnuwHXAJUkeAZ7qbVmSpGHRzRHFYuBp4LeAbwL3AG/vZVGSpOExaVAkOSTJ66vqqaraVFUbqupi4PvAnn2rUJI0UG1HFH9K52124z3RLJMkzQBtQbFPVa0c39i0LehZRZKkodIWFHu2LNt1iuuQJA2ptqAYTfLr4xuTnAPc1LuSJEnDpO322N8ELk/ybrYEwwgwFzilx3VJkobEpEFRVWuB1yU5FnhF03xFVV3Tl8okSUOhm0EBrwWu7UMtkqQh1M0Dd5KkGcygkCS1MigkSa0GEhRJXpTk6iR3N1/3mqTfxiQ3N59l/a5TkjS4I4qPAiuq6lBgRTM/kWeq6sjms6h/5UmSNhtUUCwGLm6mLwZOHlAdkqStGFRQ7FNVDzXTDwP7TNJvlySjSa5PcnJ/SpMkjdXNi4v+WZJ8C9h3gkXnjp2pqkpSk6zm4Kp6MMlLgGuSrKyqeybY1hJgCcBBBx20nZVLksbqWVBU1fGTLUuyNsl+VfVQkv2ARyZZx4PN13uTfBt4FZ0XJ43vtxRYCjAyMjJZ6EiS/hkGdeppGXBWM30W8LXxHZLslWTnZnoe8Hrg9r5VKEkCBhcUnwLekuRu4PhmniQjSS5s+vwSnRFsb6EzhMinqsqgkKQ+69mppzZV9Shw3ATto8A5zfT3gH/d59IkSeP4ZLYkqZVBIUlqZVBIkloZFJKkVgaFJKmVQSFJamVQSJJaGRSSpFYGhSSplUEhSWplUEiSWhkUkqRWBoVmjLVPruMvrzqBC1b86qBLkXYoAxk9Vuq3r//Vy7n7N+7k2aegCv58nzD38ydyzi8vH3Rp0tDziELT3h99+0OsPOdOnnwM1j8HG56HdWvg8dOv5BurRgddnjT0DApNe0d+eSmbNo1rrE5ozF2xaCA1STsSg0LT3jM/3sDG9S9s37QRZq15sv8FSTsYg0LT3m5v2pu5u7ywPcDaN76y7/VIOxqDQtPesyctZ699Yc5OW9p22hle+hp499v+7+AKk3YQBoWmvbcdPsJzl17CyJlzmbc/7LMQjv6N3Vh42epBlybtEFJVg65hSo2MjNToqHeySNK2SHJTVY1MtMwjCklSK4NCktTKoJAktTIoJEmtDApJUiuDQpLUyqCQJLUyKCRJrQwKSVIrg0KS1MqgkCS1MigkSa0MCklSK4NCktRqIEGR5LQkq5JsSjLhsLZNvxOS3JlkdZKP9rNGSVLHoI4obgNOBa6brEOS2cAFwInAYcAZSQ7rT3mSpM3mDGKjVXUHQJK2bkcDq6vq3qbvZcBi4PaeFyhJ+rlhvkaxP/DAmPk1TdsLJFmSZDTJ6Lp16/pSnCTNFD07okjyLWDfCRadW1Vfm8ptVdVSYCl0XoU6leuWpJmuZ0FRVcdv5yoeBA4cM39A0yZJ6qNhPvV0I3BokoVJ5gKnA8sGXJMkzTiDuj32lCRrgNcCVyS5qml/cZLlAFW1AfggcBVwB/DXVbVqEPVK0kw2qLueLgcun6D9x8BJY+aXA8v7WJokaZxhPvUkSRoCBoUkqZVBIUlqZVBIkloZFJKkVgaFJKmVQSFJamVQSJJaGRSSpFYGhSSplUEhSWplUEiSWhkUkqRWBoUkqZVBIUlqZVBIklqlqgZdw5RKsg64f9B1APOAnwy6iCHhvtjCfbGF+2KLYdgXB1fV/IkWTLugGBZJRqtqZNB1DAP3xRbuiy3cF1sM+77w1JMkqZVBIUlqZVD0ztJBFzBE3BdbuC+2cF9sMdT7wmsUkqRWHlFIkloZFJKkVgbFFElyWpJVSTYlmfQ2tyQnJLkzyeokH+1njf2S5EVJrk5yd/N1r0n6bUxyc/NZ1u86e2lr3+ckOyf5SrP875MsGECZPdfFfnhPknVjfg7OGUSd/ZDkoiSPJLltkuVJ8mfNvro1yav7XeNkDIqpcxtwKnDdZB2SzAYuAE4EDgPOSHJYf8rrq48CK6rqUGBFMz+RZ6rqyOazqH/l9VaX3+f3Aj+tqkOAzwDn97fK3tuGn/evjPk5uLCvRfbXF4ATWpafCBzafJYAf9GHmrpiUEyRqrqjqu7cSrejgdVVdW9VPQ9cBizufXV9txi4uJm+GDh5cKUMRDff57H76KvAcUnSxxr7Yab8vHelqq4DHmvpshj4YnVcD+yZZL/+VNfOoOiv/YEHxsyvadqmm32q6qFm+mFgn0n67ZJkNMn1SU7uT2l90c33+ed9qmoD8ASwd1+q659uf97f0Zxq+WqSA/tT2lAa2t8PcwZdwI4kybeAfSdYdG5Vfa3f9QxS274YO1NVlWSye7APrqoHk7wEuCbJyqq6Z6pr1VD7OnBpVT2X5H10jrL+3YBr0jgGxTaoquO3cxUPAmP/YjqgadvhtO2LJGuT7FdVDzWHzo9Mso4Hm6/3Jvk28CpgOgRFN9/nzX3WJJkD7AE82p/y+mar+6Gqxv43Xwj8UR/qGlZD+/vBU0/9dSNwaJKFSeYCpwPT6m6fxjLgrGb6LOAFR1tJ9kqyczM9D3g9cHvfKuytbr7PY/fRrwDX1PR7+nWr+2HcOfhFwB19rG/YLAPObO5+OgZ4Yswp3MGqKj9T8AFOoXNO8TlgLXBV0/5iYPmYficBd9H5y/ncQdfdo32xN527ne4GvgW8qGkfAS5spl8HrARuab6+d9B1T/E+eMH3GfgEsKiZ3gX4X8Bq4AbgJYOueUD74Q+BVc3PwbXAywddcw/3xaXAQ8D65nfFe4H3A+9vlofOXWL3NP9PjAy65s0fh/CQJLXy1JMkqZVBIUlqZVBIkloZFJKkVgaFJKmVQaEZIcm+SS5Lck+Sm5IsT/KyQdcl7QgMCk17zWB7lwPfrqqXVtVRwH9m8jGopnr7joCgHZpBoZngWGB9VX1uc0NV3VJV302ye5IVSb6fZGWSxQBJFiT5hyRfSHJXkkuSHJ/k/zXv2Ti66bdb856BG5L8YMy/f0+SZUmuAVZMtp2xkhzcrHtekllJvpvkrRP0+3iSLyX5u6b/rzftSfLHSW5rtvHOpn2/JNc173u4Lcm/7cVO1vTlXzqaCV4B3DTJsmeBU6rqZ81QItdny0uUDgFOA36NznAU7wLeQGeoiY/RGT79XDrDb/xakj2BG5oBEwFeDRxRVY81RxUv2E6NeeK1qu5Pcj6d9xDcANxeVf9nkrqPAI4BdgN+kOQK4LXAkcArgXnAjUmua+q+qqo+2bwj4he6221Sh0GhmS7AHyR5I7CJzrDOm09J/bCqVgIkWUXnZUyVZCWwoOnzVmBRko8087sABzXTV1fV5vcPTLadh8cWU1UXJjmNztAOR7bU/bWqegZ4Jsm1dN798AY6I7FuBNYm+Q7wGjohd1GSnYC/raqbu947Ep560sywCjhqkmXvBuYDR1XVkXTG6dqlWfbcmH6bxsxvYssfWQHeUVve0HZQVW0e2O6pLrfzc0l+gc6ooQC7N20fyJZXhb64WTZ+7J1Jx+Kpzgtz3khnJNIvJDlzsr7SRAwKzQTXADsnWbK5IckRzbn6PYBHqmp9kmOBg7dx3VcBH2oumJPkVZP063Y75wOXAL8HfB6gqi4YE0Q/bvotTrJLkr2BN9M5avgu8M4ks5PMpxMONyQ5GFhbVZ+nM5T30LyLWTsGg0LTXnMd4BTg+Ob22FV0Ri19mM4v5ZHmdNKZwD9s4+rPA3YCbm3We94k/ba6nSRvonOq6PyqugR4PsnZk6zvVjqjrV4PnNcEyOVN+y10wvE/VdXDdILkliQ/AN4JfHYb/xs1wzl6rLSDSfJx4B+r6k8GXYtmBo8oJEmtPKKQJLXyiEKS1MqgkCS1MigkSa0MCklSK4NCktTq/wN9WQXtX/7oxgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "6\n",
      "175117\n",
      "175117 tracks: 1 meteorite or junk: 4\n",
      "Run 175117 without satelite tracks\n",
      "0\n",
      "175118\n",
      "175118 tracks: 3 meteorite or junk: 3\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1\n",
      "175119\n",
      "175119 tracks: 1 meteorite or junk: 1\n",
      "Run 175119 void of (useful)data\n",
      "175120\n",
      "175120 tracks: 1 meteorite or junk: 1\n",
      "Run 175120 void of (useful)data\n",
      "175121\n",
      "175121 tracks: 2 meteorite or junk: 1\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYoAAAEGCAYAAAB7DNKzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAlkElEQVR4nO3deZRU9Zn/8fcDNCpBcWlFdkRbEfMzqD0gGDWoExtoIEqEgCd2iyxNIp7f5Ew8CegMS0Zw5jdnoklcABcwjgrGBbsBVwxGWWSJuyCKhoZmjRFRBIHn90dVQdl2Vxd0Vd26VZ/XOXWsuvd23cfbTT9d934/92vujoiISH2aBF2AiIhkNzUKERFJSI1CREQSUqMQEZGE1ChERCShZkEXkGqFhYXeuXPnoMsQEQmVlStXbnf3k+tal3ONonPnzqxYsSLoMkREQsXMPqlvnU49iYhIQmoUIiKSkBqFiIgkpEYhIiIJqVGIiEhCahQiIpKQGoWIiCSkRiEiIgmpUYiISEJqFCIikpAahYiIJKRGISIiCalRiIhIQmoUIiKSkBqFHJEdO3YEXYLkoN27d7N79+6gy5Ba1CjksN15550UFhZiZnrokdJHixYtaNGiBWPGjGHJkiW4e9A/7gJYrn0jiouLXRMXpc/q1au5+OKLadmyJWVlZRx99NFBlyQ5ZNOmTaxYsYK1a9fy5ZdfcuaZZ1JeXs5Pf/pTWrduTUFBQdAl5iwzW+nuxXWuC7JRmNn9QCmw1d2/W8d6A+4A+gFfAuXuvirRe6pRpM/HH39Mr169KCgoYMmSJbRr1y7okiRHff7558ydO5cHH3yQV155BYDWrVuzYcMGNYs0SdQogj719CBQkmB9X6Ao+hgN3J2BmqQOO3bsoKSkhK+++oqFCxeqSUhaHXvssYwYMYLFixezbt06+vfvz5YtWxg7dqxORwUg0Ebh7ouBvyfYZBAw2yOWAsebWZvMVCcxu3fvZuDAgXz88cfMmzePbt26BV2S5JHTTz+dyspKbr31Vu677z4mTZoUdEl5p1nQBTSgHbAh7nV1dFlN/EZmNprIJw46duyYseLywf79+xk+fDhLlixhzpw5XHzxxUGXJHlq0qRJVFdXM2nSJNq1a8eoUaOCLilvBH3qKSXcfbq7F7t78cknnxx0OTnD3bnpppt46qmn+O1vf8uPf/zjoEuSPGZm3HvvvZSUlDB27FgqKyuDLilvZHuj2Ah0iHvdPrpMMuD222/nrrvu4pe//CU33XRT0OWIUFBQwNy5c+nevTtDhw5l+fLlQZeUF7K9UcwDrrOIC4HP3L2moS+SxnvooYf49a9/zbBhw5g2bVrQ5Ygc1LJlS6qqqjj11FPp378/69atC7qknBdoozCzR4AlwFlmVm1mN5hZhZlVRDeZD3wErANmAD8LqNS88vzzzzNixAguu+wyHnjgAZo0yfa/JyTftG7dmoULFwJQUlLC1q1bA64otylwJ9+wevVqLrnkErp06cLixYtp1apV0CWJ1GvZsmX06dOHc845h0WLFtGyZcugSwqtbM5RSBb5+OOP6devHyeccALz589Xk5Cs17NnTx577DFWrVrFkCFD+Prrr4MuKSepUQigQJ2E14ABA7j77rtZsGABFRUVCuSlQbbnKCQD4gN1zz//vAJ1EjqjR4+murqaKVOm0KFDByZOnBh0STlFjSLPKVAnuUKBvPRRo8hj8YG6O+64Q4E6CbVYIK+mpoaxY8fSpk0bSktLgy4rJ+gaRR5ToE5yjQJ56aFGkacUqJNcpUBe6qlR5CEF6iTXxQfyrrzySrZs2RJwReGm3xB5ZvXq1Vx99dV069aNJ554gqOOOirokkTSoqioiMrKSmpqaigtLWXXrl1BlxRaahR5JD5Qt2DBAgXqJOcpkJcaahR5onagrm3btkGXJJIRCuQ1nobH5oHdu3czYMAABeokbymQ1zhqFDkuFqhbunSpAnWS1xTIO3JqFDlMgTqRQxTIO3K6RpHDciVQt+kvf+E2MyaZ8R9mbNAUmHKE4gN5Q4YMYdmyZUGXFAqajyJHzZ49m7KyMoYPH85DDz0U2qxEZY8erHz99W8tP7NjR4Z98kkAFUku2LJlC71792bnzp289tprFBUVBV1S4DQfRZ557rnnuOGGG3IiUFdXkwBY+7e/ZbgSySW1Z8hTIC+x8P4GkTqtXr2awYMHHwzUNW/ePOiS0mb7++8HXYKEmAJ5yVOjyCEK1Ikcnp49ezJnzhwF8hqgRpEj8jFQV9i1a9AlSA4oLS1VIK8BGh6bA3I5UNftzDN5d+3aby0/7eSTA6hGcpUCeYmpUYRcfKBu7ty54Q7UPWCwLe51E7hm8Ru8++RrPDF2LPuBpsDAiRM599//PaAiJVcpkFc/NYoQiw/U3XnnnQwePDjoko7cI82+2SQADgCzvke3m51uFRVBVCV5JBbI27x5MxUVFQrkxdE1ihCbNm3awUDduHHjgi4naTW8wJsU8SHtWEc7VtMV37C//i94MXdOpUl2KygoYM6cOZx33nkK5MVRowip2bNnM378eIYPHx6qGeo+ZS1fUEZLvqAJTlOcVuxM/EXr38tMcSIcmiEv9onigw8+CLqkwKlRhFCYA3UfMpgmOBa3LPa83rEmbduntyiRWhTI+6bw/IYRIPyBuu/w+TeaRMy+UxJ8Ub8N6SpHpF4K5B2iRhEi69evp1+/fpx44omhDdTto1mdnxw2lLfhwHF1rBj0X+kuSaReCuRFqFGExI4dO+jbty9fffUVCxYsCG2gbh8//NayWOPYUbEYbnYY8G9Q9kbk+Vn/mtkCRWpRIE/DY0MhzIG6HZ8eoNNnX+LNDnDbgZas6Xg6P6WQ1mz/xnbr6cArbGUiwNmTgihVpF6jR49m48aNTJ48mfbt2zNpUn79jKpRZLkwB+paffgFLbps5djjI6+nsYMbfAfLrBfGLs5lLftoyruczn6O5QveBkKcBZGcNnHiRKqrqw82i3wK5KlRZLEwB+oWbD5Aiy5bAbC4q9fmHjnXZC15k/O/8TVW/7gnkcCZGffccw81NTV5F8jTNYosFtZAHcA1fAZ8s0kAfEqrWoNjIwzYg4bBSnbL10CeGkWWCmugLqZJQd1J6yfscj7leA5EPz84cABjC6dwByMzWqPIkcjHQF6gjcLMSsxsjZmtM7Nf1bG+3My2mdlfo4+8+E0SC9RdfvnloQvUxRy3rWWdy90LuePvZXxEZ3ZwItspZC1nMo3JGa5Q5MjlWyAvsDmzzawpsBb4Z6AaeB0Y5u7vxm1TDhS7+43Jvm/Y58xetWoVl156KV26dGHx4sWhzErEFH65kYJj9h48/eQeefxmcydGtg1f8xOpbdmyZfTp04dzzjmHRYsW0bJl3X8ghUG2zpndA1jn7h+5+17gUWBQgPUEbv369fTv3z+UgTpr/inWaj92/AHs2L106vIxa/a0YdfWVuzf14QD+42vPjuGURs6qElIzsiXQF6Q/2LbAfH3ZqiOLqttsJm9aWaPm1mHzJSWeWEO1NkxX8B3jocmTSKPZgX87dNOnHX2Rj5vfSJbmnVic9POfHr8qUzppIF2kltKS0u55557cjqQl+3/ap8BHnH3PWY2BpgFXFZ7IzMbDYwG6NixY2YrTIEwB+rmzv07HH1CrTGwBu7s+LJNcIWJZNCoUaO+kbHItUBekJ8oNgLxnxDaR5cd5O473H1P9OVM4IK63sjdp7t7sbsXnxyyKTL379/PsGHDWLp0KQ8//HCoAnUAw35az0dtM2jaNLPFiARo4sSJjBgxgsmTJzNjxoygy0mpIBvF60CRmZ1mZs2BnwDz4jcws/g/SQcCOTUxgbszbtw4nn76ae64445QBepi2rT+qv6VOfgRXKQ+sUBe3759qaiooLKyMuiSUiawRuHu+4AbgWeJNIA57v6OmU02s4HRzW4ys3fM7A3gJqA8mGrTY9q0adx9993cfPPNoQvUxWz4pNOh4Uzx3GFvgiYikoNyNZAX2PDYdAnL8NjZs2dTVlbGtddey+zZs0OZlYg58+yP+aCm4zevU+z7ms3rdtG69YnBFSYSkC1bttC7d2927tzJa6+9RlFRUdAlNShbh8fmrfhA3f333x/qJgGw9r3O+D+a0HT3Vtj9Od27/A3/vLmahOStXAvkhfs3VAitWrXq4Ax1f/rTn0I3Q10i+75qjX91HKtXdgq6FJHA5dIMeWoUGZQLM9SJSPJyJZCnRpEh27dvp6SkhD179oQuUCciRy4XAnnZHrjLCV9++SUDBw7kk08+CV2gTkQaL+yBvAYbhZmdDlRH09E/AM4FZrv7P9JbWm4I8wx1IpI68TPktWvXjtGjRwddUtKSOfX0J2C/mZ0BTCeSpv7ftFaVI3IhUCciqREfyBs7dmyoAnnJNIoD0XDcVcDv3P2XgG7ik4RcCNSJSOrEAnnnn39+qAJ5yTSKr81sGFAGxFpgQfpKyg2zZs1i/PjxXHvttUydOjXockQkS4RxhrxkGsX1QC/gP9x9vZmdBjyU3rLC7bnnnmPkyJE5E6gTkdQ65ZRTQhXIa/A3WHTGuX8F3jKz7xK5sH172isLqVwO1IlI6oQpkNdgo4iOdPoA+ANwF7DWzC5Jb1nhpECdiByOsATykjkn8t/AD939Une/BLgS+J/0lhU+sUDd3r17WbhwoQJ1IpKU+EDemDFjsjKQl0zgrsDd18ReuPtaM9PF7DjxgboXXniBs88+O+iSRCRE4gN5HTp0yLpAXjKNYoWZzQT+GH19LZD99/HOkNqBuu9///tBlyQiIZTNgbxkGsVY4OdEJg4CeIXItYq8Fx+ou/POOxWoE5EjFgvk1dTUMHbsWNq2bUtpaWnQZQFJNIrorTt+D7wIHADWuPvetFcWAlOnTlWgTkRSJhbI69OnD0OGDGHRokX07Nkz6LKSGvXUH/gQuAP4PbDOzPqmu7BsN2vWLCZMmKBAnYikVDYG8pId9dTH3X/g7pcCfcjzUU8K1IlIOmVbIC+Z33Cfu/u6uNcfAZ+nqZ6sFwvUnXPOOTzxxBMK1IlIWsQH8vr37x9oIC+ZRrHCzOabWbmZlQHPAK+b2dVmdnWa68sq8YG6+fPnc9xxxwVdkojksFggb/Xq1YEG8pJpFEcDW4BLgR8A24BjgAFAdlySzwAF6kQkCNkQyEtm1NP1mSgkmylQJyJBCjqQd1hToZrZKnc/P13FZCMF6kQkGwQZyDvcObMtLVVkKQXqRCRbBBnIO9xxnVVpqSJLKVAnItkkqBnykgnc/beZnQPg7rekv6TsoECdiGSjIAJ5yXyieA+YbmbLzKzCzHJ+koVnn31WgToRyVqZDuQlM8PdTHe/CLgO6Ay8aWb/a2Z90lpZQBSoE5EwKCoqoqqqis2bN6c9kJfUn8pm1hToGn1sB94AfmFmj6atsgDEAnUnnXSSAnUikvV69OjBY489lvZAXjLXKP4HeB/oB9zm7he4++3uPgA4Ly1VBUCBOhEJo0wE8pIZHvsmcIu7f1HHuh4pricQCtSJSJilO5CXTDL7gQTrPktpNQHYt28fw4YNU6BOREItnYG8ww3c5ZRYoG7evHn87ne/U6BOREKrdiCvTZs2DBgwICXvndfjPqdOnco999zDzTffzI033hh0OSIijRIfyBs6dGjKAnlJNwozO8XMOsYeqdi5mZWY2RozW2dmv6pj/VFm9lh0/TIz65yK/YICdSKSm2KBvNgtPlIRyEtm1NNAM/sAWA/8GfgYWNDYHUeH3P4B6At0A4aZWbdam90AfOruZxCZVe/2xu4XFKgTkdyW6kBeMr8hpwAXAmvd/TTgcmBpo/Ya0QNY5+4fufte4FFgUK1tBgGzos8fBy43s0bdmFCBOhHJB2eccUbKAnnJNIqv3X0H0MTMmrj7IqD4iPd4SDtgQ9zr6uiyOrdx933AZ8BJtd/IzEab2QozW7Ft27aEO73uuus4cOCAAnUikvNSFchLplH8w8xaAouBh83sDqCuTEVg3H26uxe7e/HJJ5+ccNvCwkKKi4sVqBORvBAfyCspKTmiQF4yjWIQ8CXwL8BC4EMi06A21kagQ9zr9tFldW5jZs2AVsCOxu5Y1yREJJ8MGjSIE044gZdffvmILm4nzFFELzhXunsf4ACHrhekwutAkZmdRqQh/AQYXmubeUAZsAT4MfCSNzKfvn//frZv396YtxARCY0vvviC0tJSdu/eTWVlJWeeeeZhv0fCP63dfT9wIB23Fo9ec7gReJbIrcznuPs7ZjbZzAZGN7sPOMnM1gG/AL41hPZwDRgwgPfff5+77rqrsW8lIpLV9u3bx5AhQ1i5ciWPPvooffv2PaL3SSaZvQt4y8yeJ+7ahLvfdER7jOPu84H5tZb9W9zzr4BrGrufeL/4xS/4y1/+wo033kibNm246qqrUvn2IiJZwd0ZO3Ys8+fP5+6772bQoNqDSpOXTKN4IvrICc2aNePRRx/lsssuY/jw4bz44ov07t076LJERFJq8uTJzJw5kwkTJlBRUdGo97JkTvmb2TFAR3df06i9ZUBxcbGvWLGiwe22b99O79692bFjB6+++ipdu3bNQHUiIul33333MXLkSMrKynjggQdIJn5mZivdvc7oQzLJ7AHAX4mMeMLMupvZvMMrO/sUFhaycOFCmjVrRklJCTU1NUGXJCLSaFVVVYwZM4Yrr7ySGTNmJNUkGpLMONGJRFLU/wBw978CXRq95yzQpUsX5s+fz/bt2+nXrx87d+4MuiQRkSP2+uuvM2TIEL73ve8xd+5cCgoKUvK+ySaza887cSAle88CF1xwAY8//jhvvfUWgwcPZu/evUGXJCJy2NatW0f//v055ZRTqKqq4thjj03ZeyfTKN4xs+FAUzMrMrPfAa+lrIIsUFJSwsyZM3nhhRcYOXJkWqYSFBFJl61bt1JSUsKBAwdYuHAhp556akrfP5lGMQ44B9gDPALsBP5vSqvIAuXl5UyZMoWHHnqICRMmBF2OiEhSYoG6jRs38swzz3DWWWelfB/JTIX6JTAh+shpEyZMoLq6mqlTp9K+fXt+9rOfBV2SiEi94gN1TzzxBL169UrLfhpsFGZWDIwHOsdv7+7npqWiAJkZv//979m0aZMCeSKS1eIDdffcc0+jAnUNSSZw9zDwS+Atcugidn0UyBORMIgP1I0ZMyat+0rmGsU2d5/n7uvd/ZPYI61VBaxFixZUVlbSoUOHg/eGEhHJFjNnzmTixImUlZUxZcqUtO+vwWS2mV0ODANeJHJBGwB3z8rbeiSbzE7GRx99RK9evTjmmGNYsmQJbdq0Scn7iogcqaqqKgYNGsQVV1zBM888k7KsRKOS2cD1QHeghMg8FAOA0pRUluUUyBORbJKuQF1DkrlG8U/unvrxViERC+SVlpYyePBgqqqqNM+2iGRcLFDXunXrlAfqGpLMJ4rXzKxb2ivJYgrkiUiQ0h2oa0gynyguBP5qZuuJXKMwwHNxeGwi5eXlVFdXc+utt9K+fXtuu+22oEsSkTwQC9Rt2rSJl1566YhmqGusZBpFSdqrCAkF8kQkk+IDdU8++SQXXnhhIHUkk8z+BMDMTgGOTntFWUyBPBHJFHenoqLiYKBu4MCBDX9RmiQzH8VAM/sAWA/8GfgYWJDmurJWLJDXo0cPhg8fzquvvhp0SSKSgyZPnsx9993HLbfckvZAXUOSuZg9hch1irXufhpwObA0rVVlOQXyRCSdYoG68vJyJk+eHHQ5Sc9HsQNoYmZN3H0RUGcoI5/EZsgrKCjQDHkikjJVVVVUVFRw5ZVXMn369JTMUNdYyTSKf5hZS2Ax8LCZ3QF8kd6ywkGBPBFJpeXLlx8M1D3++OMZC9Q1JJlGMQj4EvgXIvNmf0gknS1ohjwRSY3agbqWLVsGXdJB9TYKMzvDzC5y9y/c/YC773P3WcAq4PiMVRgCCuSJSGPEAnXuHkigriGJPlH8lshsdrV9Fl0ncTRDnogcifhAXWVlZSCBuoYkylG0dve3ai9097fMrHP6Sgqv+EBeu3bt+PnPfx50SSKSxbIlUNeQRI3i+ATrjklxHTkhPpA3btw42rZtq0CeiNQpmwJ1DUl06mmFmY2qvdDMRgIr01dSuCmQJyLJmDRpUtYE6hpS78RFZtYaeBLYy6HGUAw0B65y980ZqfAwpXLiosbYvn07vXv3Zvv27bz22mt07do16JJEJEvMnDmTUaNGUV5ezv33358VWYlEExclM8NdH+C70ZfvuPtLKa4vpbKlUYBmyBORb0vXDHWN1ahGETbZ1CgAVq5cyaWXXkpRURF//vOfOe6444IuSUQCsnz5cvr06cPZZ5/Nyy+/nFVZicZOhSqNoECeiEB2B+oaokaRAfGBvBtuuEGBPJE8UztQ17p166BLOizJTFwkKVB7hrypU6cGXZKIZMCuXbvo379/oDPUNVYgjcLMTgQeAzoTmd9iiLt/Wsd2+4FY6O9v7p69A42TEAvkTZs2jfbt2yuQJ5Lj9u3bx9ChQ1m1alVWB+oaEtSpp18BL7p7EfBi9HVddrt79+gj1E0CDgXyBg4cyLhx43jyySeDLklE0iQ+UHfXXXdldaCuIUE1ikHArOjzWcCPAqoj45o1a8YjjzxCz549FcgTyWFhCtQ1JKhG0drdYzP9bAbqu7JztJmtMLOlZvajzJSWfi1atOCZZ57RDHkiOWrmzJlMmjQpa2aoa6y0NQoze8HM3q7jMSh+O48MAapvGFCn6Lje4cBvzez0evY1OtpQVmzbti21/yNpohnyRHJTbIa6kpKSrJmhrrECCdyZ2RrgB+5eY2ZtgJfd/awGvuZBoNLdH0+0XbYF7hqiQJ5I7sjmQF1DsjFwNw8oiz4vA56uvYGZnWBmR0WfFwIXAe9mrMIMUSBPJDeEOVDXkKAaxTTgn83sA+CK6GvMrNjMZka3OZvIHWzfABYB09w95xoFKJAnEnZhD9Q1JJAchbvvAC6vY/kKYGT0+WvA/8lwaYEpLy9n48aN3HLLLQrkiYRILgTqGqJkdhYZP348GzZsUCBPJCTiA3VPPfVUaAN1DVGjyCKxQF5NTY1myBPJcrVnqBswYEDQJaWNbgqYZRTIEwmHXArUNUSNIgspkCeS3WbMmJFTgbqGqFFkKQXyRLJTZWUlY8eOzalAXUPUKLJYly5dmD9/Ptu3b6dfv37s3Lkz6JJE8try5csZOnQo3bt3Z+7cuVkzjWm6qVFkuVgg7+2331YgTyRAuRyoa4gaRQiUlJQwY8YMBfJEApLrgbqGaHhsSCiQJxKMfAjUNUSNIkQUyBPJrK+//pohQ4bkfKCuIWoUIaJAnkjmxAJ1CxYs4N57783pQF1DdI0iZBTIE8mMSZMmcf/993PrrbcyevTooMsJlBpFCNUO5L333ntBlySSU2KBuuuvv55JkyYFXU7g1ChCKj6Q17dvXwXyRFIkPlB377335kWgriFqFCGmQJ5IauVroK4hahQhp0CeSGrEAnWnnnpq3gXqGqJGkQMUyBNpnC1btnDllVcC5GWgriEaHpsjFMgTOTK7du2itLSUmpoaFi1aRFFRUdAlZR01ihyiQJ7I4akdqOvZs2fQJWUlNYocokCeSPIUqEuerlHkGAXyRJKjQF3y1ChykAJ5IokpUHd41ChyVCyQ17x5cwXyROJUVlZSUVGhQN1hUKPIYV26dKGqqkqBPJGoZcuWMWTIEM477zwF6g6DGkWOUyBPJOKDDz6gtLSUNm3aKFB3mNQo8oACeZLvtmzZQklJCaBA3ZHQ8Ng8oUCe5CsF6hpPjSKPKJAn+SY+UPf0008rUHeE1CjyiAJ5kk9qB+pKS0uDLim0dI0izyiQJ/li4sSJCtSliBpFHlIgT3LdjBkzmDx5sgJ1KaJGkacUyJNcFQvU9e3bV4G6FFGjyGMK5EmuiQ/UzZkzR4G6FFGjyHMK5EmuUKAufdQoRIE8CT0F6tIrkEZhZteY2TtmdsDMihNsV2Jma8xsnZn9KpM15pvy8nJ+85vf8Mc//pHx48cHXY5I0uIDdZWVlQrUpUFQOYq3gauBe+vbwMyaAn8A/hmoBl43s3nu/m5mSsw/48ePp7q6WoE8CQ0F6jIjkEbh7u8BDY1G6AGsc/ePots+CgwC1CjSJBbI27RpkwJ5ktXcnSVLljBixAjWrFnD9OnTFahLo2y+RtEO2BD3ujq67FvMbLSZrTCzFdu2bctIcbmqadOmCuRJ1qqurmbq1KmcffbZXHTRRaxbt45LLrmEUaNGBV1aTkvbJwozewE4tY5VE9z96VTuy92nA9MBiouLdSW2kWKBvF69enHFFVdw3XXXUVhYGHRZksfWrFnDu+++y/vvv4+7c/HFF3PzzTdz9dVX06pVq6DLy3lpaxTufkUj32Ij0CHudfvoMsmAwsJCKisr6dq1K/fdd59CSxKo/fv3U1BQwC233EJZWRmnn3560CXllWy+KeDrQJGZnUakQfwEGB5sSfnlrLPOYs+ePTRv3jzoUiTP7dy5k5YtW9KkSTafLc9dQQ2PvcrMqoFeQJWZPRtd3tbM5gO4+z7gRuBZ4D1gjru/E0S9+UxNQrLBcccdpyYRoKBGPT0JPFnH8k1Av7jX84H5GSxNRERqUYsWEZGE1ChERCQhNQoREUlIjUJERBJSoxARkYTUKEREJCE1ChERSUiNQkREElKjEBGRhNQoREQkITUKERFJSI1CREQSUqMQEZGE1ChERCQhNQoREUlIjUJERBIydw+6hpQys23AJ0HXARQC24MuIkvoWByiY3GIjsUh2XAsOrn7yXWtyLlGkS3MbIW7FwddRzbQsThEx+IQHYtDsv1Y6NSTiIgkpEYhIiIJqVGkz/SgC8giOhaH6FgcomNxSFYfC12jEBGRhPSJQkREElKjEBGRhNQoUsTMrjGzd8zsgJnVO8zNzErMbI2ZrTOzX2WyxkwxsxPN7Hkz+yD63xPq2W6/mf01+piX6TrTqaHvs5kdZWaPRdcvM7POAZSZdkkch3Iz2xb3czAyiDozwczuN7OtZvZ2PevNzO6MHqs3zez8TNdYHzWK1HkbuBpYXN8GZtYU+APQF+gGDDOzbpkpL6N+Bbzo7kXAi9HXddnt7t2jj4GZKy+9kvw+3wB86u5nAP8D3J7ZKtPvMH7eH4v7OZiZ0SIz60GgJMH6vkBR9DEauDsDNSVFjSJF3P09d1/TwGY9gHXu/pG77wUeBQalv7qMGwTMij6fBfwouFICkcz3Of4YPQ5cbmaWwRozIV9+3pPi7ouBvyfYZBAw2yOWAsebWZvMVJeYGkVmtQM2xL2uji7LNa3dvSb6fDPQup7tjjazFWa21Mx+lJnSMiKZ7/PBbdx9H/AZcFJGqsucZH/eB0dPtTxuZh0yU1pWytrfD82CLiBMzOwF4NQ6Vk1w96czXU+QEh2L+Bfu7mZW3xjsTu6+0cy6AC+Z2Vvu/mGqa5Ws9gzwiLvvMbMxRD5lXRZwTVKLGsVhcPcrGvkWG4H4v5jaR5eFTqJjYWZbzKyNu9dEPzpvrec9Nkb/+5GZvQycB+RCo0jm+xzbptrMmgGtgB2ZKS9jGjwO7h7//zwT+M8M1JWtsvb3g049ZdbrQJGZnWZmzYGfADk12idqHlAWfV4GfOvTlpmdYGZHRZ8XAhcB72aswvRK5vscf4x+DLzkuZd+bfA41DoHPxB4L4P1ZZt5wHXR0U8XAp/FncINlrvrkYIHcBWRc4p7gC3As9HlbYH5cdv1A9YS+ct5QtB1p+lYnERktNMHwAvAidHlxcDM6PPewFvAG9H/3hB03Sk+Bt/6PgOTgYHR50cDc4F1wHKgS9A1B3QcpgLvRH8OFgFdg645jcfiEaAG+Dr6u+IGoAKoiK43IqPEPoz+mygOuubYQ7fwEBGRhHTqSUREElKjEBGRhNQoREQkITUKERFJSI1CREQSUqOQvGBmp5rZo2b2oZmtNLP5ZnZm0HWJhIEaheS86M32ngRedvfT3f0C4NfUfw+qVO9fd0CQUFOjkHzQB/ja3e+JLXD3N9z9FTNraWYvmtkqM3vLzAYBmFlnM3vfzB40s7Vm9rCZXWFmr0bn2egR3e470XkGlpvZ6rivLzezeWb2EvBiffuJZ2adou9daGZNzOwVM/thHdtNNLOHzGxJdPtR0eVmZv9lZm9H9zE0uryNmS2OzvfwtpldnI6DLLlLf+lIPvgusLKedV8BV7n7zuitRJbaoUmUzgCuAUYQuR3FcOD7RG41MZ7I7dMnELn9xggzOx5YHr1hIsD5wLnu/vfop4pv7cfjEq/u/omZ3U5kHoLlwLvu/lw9dZ8LXAh8B1htZlVAL6A78D2gEHjdzBZH637W3f8jOkdEi+QOm0iEGoXkOwNuM7NLgANEbuscOyW13t3fAjCzd4hMxuRm9hbQObrND4GBZvav0ddHAx2jz59399j8A/XtZ3N8Me4+08yuIXJrh+4J6n7a3XcDu81sEZG5H75P5E6s+4EtZvZn4J+INLn7zawAeMrd/5r00RFBp54kP7wDXFDPumuBk4EL3L07kft0HR1dtyduuwNxrw9w6I8sAwb7oRnaOrp77MZ2XyS5n4PMrAWRu4YCtIwu+7kdmiq0bXRd7Xvv1HsvHo9MmHMJkTuRPmhm19W3rUhd1CgkH7wEHGVmo2MLzOzc6Ln6VsBWd//azPoAnQ7zvZ8FxkUvmGNm59WzXbL7uR14GPg3YAaAu/8hrhFtim43yMyONrOTgB8Q+dTwCjDUzJqa2clEmsNyM+sEbHH3GURu5Z01czFLOKhRSM6LXge4CrgiOjz2HSJ3Ld1M5JdycfR00nXA+4f59lOAAuDN6PtOqWe7BvdjZpcSOVV0u7s/DOw1s+vreb83idxtdSkwJdpAnowuf4NIc7zZ3TcTaSRvmNlqYChwx2H+P0qe091jRULGzCYCu9z9/wVdi+QHfaIQEZGE9IlCREQS0icKERFJSI1CREQSUqMQEZGE1ChERCQhNQoREUno/wPqWwsU7X8p6QAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Run 175121 without meteories\n",
      "Wall time: 4.81 s\n"
     ]
    }
   ],
   "source": [
    "%%time\n",
    "high_pixel = read_data_sets(158000, 175400) #read in data from start to end, maybe remove print \n",
    "                                            #statements for better readability\n",
    "print(list(high_pixel.keys())) #all runs  \n",
    "nrun = 0\n",
    "cut_high_pixel = apply_selection_cut(high_pixel) #cuts away all pixels that triggered more than 70 times\n",
    "for nrun in cut_high_pixel.keys():\n",
    "    print(nrun)\n",
    "    track, possible_meteorite = track_sorter(cut_high_pixel[nrun][\"pix\"],\n",
    "                                     cut_high_pixel[nrun][\"time\"],\n",
    "                                     cut_high_pixel[nrun][\"brightness\"],\n",
    "                                    typed_nn_pix)\n",
    "    #this one is with @jit, so it was done with typed Lists, still needs to be appended to some sort of dictionary or something\n",
    "    print(nrun, \"tracks:\", len(track), \"meteorite or junk:\", len(possible_meteorite))\n",
    "    if (track[0][0][0] ==-1 and possible_meteorite[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"void of (useful)data\")\n",
    "        continue\n",
    "    if (track[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"without satelite tracks\")\n",
    "    else:\n",
    "        pass\n",
    "        plot_poss_met(track)   \n",
    "    if (possible_meteorite[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"without meteories\")\n",
    "        continue\n",
    "    possible_meteorite, trash = adding_possible_meteorites(possible_meteorite)  #Adding together all data that happened at the \n",
    "                                                                                #same time, trash is most likely not a meteorite\n",
    "    counter = 0\n",
    "    for i in range(len(possible_meteorite)):\n",
    "        if len(np.unique(possible_meteorite[i][0]))<4:\n",
    "            continue\n",
    "        counter+=1\n",
    "        plot_from_pix(possible_meteorite[i][0], possible_meteorite[i][1])\n",
    "        plt.show()\n",
    "    print(counter) # How many meteorites are detected"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3ec57cf2",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'nruns' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-11-89984af97a94>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mnrun\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;36m175118\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mnruns\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m\u001b[0;32m      3\u001b[0m track, possible_meteorite = track_sorter(cut_high_pixel[nrun][\"pix\"],\n\u001b[0;32m      4\u001b[0m                                      \u001b[0mcut_high_pixel\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnrun\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"time\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0;32m      5\u001b[0m                                      \u001b[0mcut_high_pixel\u001b[0m\u001b[1;33m[\u001b[0m\u001b[0mnrun\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m[\u001b[0m\u001b[1;34m\"brightness\"\u001b[0m\u001b[1;33m]\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n",
      "\u001b[1;31mNameError\u001b[0m: name 'nruns' is not defined"
     ]
    }
   ],
   "source": [
    "nrun = 175118\n",
    "print(nruns)\n",
    "track, possible_meteorite = track_sorter(cut_high_pixel[nrun][\"pix\"],\n",
    "                                     cut_high_pixel[nrun][\"time\"],\n",
    "                                     cut_high_pixel[nrun][\"brightness\"],\n",
    "                                    typed_nn_pix)\n",
    "counter = 0\n",
    "print(len(possible_meteorite))\n",
    "for i in range(len(possible_meteorite)):\n",
    "    if len(np.unique(possible_meteorite[i][0]))<3:\n",
    "        continue \n",
    "    if -1 in possible_meteorite[i][1]:\n",
    "        continue\n",
    "    counter+=1\n",
    "#     plot_from_pix(possible_meteorite[i][0], possible_meteorite[i][1])\n",
    "#     plt.show()\n",
    "print(counter)\n",
    "possible_meteorite, trash = adding_possible_meteorites(possible_meteorite)\n",
    "print(\"Adding:\")\n",
    "counter = 0\n",
    "pixelarray = np.array([])\n",
    "for i in range(len(possible_meteorite)):\n",
    "    if len(np.unique(possible_meteorite[i][0]))<4:\n",
    "        continue\n",
    "    if -1 in possible_meteorite[i][1]:\n",
    "        continue\n",
    "    pixelarray = np.concatenate((pixelarray, np.unique(possible_meteorite[i][0])), axis = None)\n",
    "print(len(pixelarray))\n",
    "index_array = np.array([])\n",
    "for i in range(len(possible_meteorite)):\n",
    "    if len(np.unique(possible_meteorite[i][0]))<4:\n",
    "        continue\n",
    "    if -1 in possible_meteorite[i][1]:\n",
    "        continue\n",
    "    \n",
    "    print(\"unique pixels:\",np.unique(possible_meteorite[i][0]))\n",
    "    index_to_delete = np.unique(possible_meteorite[i][0])\n",
    "    for j in range(len(index_to_delete)):\n",
    "        index_to_delete[j] = len(index_array)+j \n",
    "    index_array = np.concatenate((index_array, np.unique(possible_meteorite[i][0])), axis = None) #used just to get the length\n",
    "    print(\"index_to_delete:\",index_to_delete)\n",
    "    a = pixelarray\n",
    "    c = np.delete(a, index_to_delete.astype(int))\n",
    "    print(a)\n",
    "    print(c)\n",
    "    if np.array_equal(np.intersect1d(c,np.unique(possible_meteorite[i][0])),np.unique(possible_meteorite[i][0])):\n",
    "        continue\n",
    "    counter+=1\n",
    "    plot_from_pix(possible_meteorite[i][0], possible_meteorite[i][1])\n",
    "    plt.show()\n",
    "print(len(pixelarray))\n",
    "print(counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "668d9865",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit\n",
    "def remove_more_trash(pos_met):\n",
    "    min_pixel = 3 #minimum pixel number to pass the check\n",
    "    pixarray = np.array([]) #Concatenate unique pixels of each pos_met track\n",
    "    index_count = 0\n",
    "    for i in range(len(pos_met)):\n",
    "        if (len(np.unique(pos_met[i][0]))<min_pixel or -1 in pos_met[i][1]):\n",
    "            continue\n",
    "        pixarray = np.concatenate((pixarray, np.unique(pos_met[i][0])), axis = None)\n",
    "    for i in range(len(pos_met)):\n",
    "        if (len(np.unique(pos_met[i][0]))<min_pixel or -1 in pos_met[i][1]):\n",
    "            continue\n",
    "        index_to_del = np.unique(pos_met[i][0]) \n",
    "        for j in range(len(index_to_del)):\n",
    "            index_to_del[j] = len(index_count)+j #delete these indices \n",
    "        index_count = index_count + len(np.unique(poss_met[i][0]))\n",
    "    return pos_met_cleaned"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62fc2fb0",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def remove_more_trash_test(pos_met):\n",
    "    pos_met_clean = pos_met\n",
    "    \n",
    "    return pos_met_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bc9e4a34",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "cut_high_pixel = apply_selection_cut(high_pixel)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "86f6e071",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(type(possible_meteorite[0]))\n",
    "print(possible_meteorite[0])\n",
    "a = List(possible_meteorite[0])\n",
    "print(a)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "272c32ea",
   "metadata": {},
   "outputs": [],
   "source": [
    "nrun = 175118\n",
    "track, possible_meteorite = track_sorter(cut_high_pixel[nrun][\"pix\"],\n",
    "                                     cut_high_pixel[nrun][\"time\"],\n",
    "                                     cut_high_pixel[nrun][\"brightness\"],\n",
    "                                    typed_nn_pix)\n",
    "# print(type(possible_meteorite[0]))\n",
    "# possible_meteorite, trash = adding_possible_meteorites_jit(possible_meteorite)\n",
    "# print(type(possible_meteorite))\n",
    "# possible_meteorite_cleaned = remove_more_trash_test(possible_meteorite)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ed4a919",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "\n",
    "nrun =158035 \n",
    "track, possible_meteorite = track_sorter(cut_high_pixel[nrun][\"pix\"],\n",
    "                                     cut_high_pixel[nrun][\"time\"],\n",
    "                                     cut_high_pixel[nrun][\"brightness\"],\n",
    "                                    typed_nn_pix)\n",
    "print(nrun, \"tracks:\", len(track), \"meteorite or junk:\", len(possible_meteorite))\n",
    "if (track[0][0][0] ==-1 and possible_meteorite[0][0][0]==-1):\n",
    "    print(\"Run\", nrun,\"void of (useful)data\")\n",
    "    pass\n",
    "if (track[0][0][0]==-1):\n",
    "    print(\"Run\", nrun,\"without satelite tracks\")\n",
    "else:\n",
    "    plot_poss_met(track)   \n",
    "if (possible_meteorite[0][0][0]==-1):\n",
    "    print(\"Run\", nrun,\"without meteories\")\n",
    "    pass\n",
    "possible_meteorite, trash = adding_possible_meteorites(possible_meteorite)\n",
    "print(len(possible_meteorite), len(trash))\n",
    "counter = 0\n",
    "for i in range(len(possible_meteorite)):\n",
    "    if len(np.unique(possible_meteorite[i][0]))<3:\n",
    "        continue\n",
    "#     print(np.unique(possible_meteorite[i][0]))\n",
    "    counter+=1\n",
    "    plot_from_pix(possible_meteorite[i][0], possible_meteorite[i][1])\n",
    "    plt.show()\n",
    "print(counter)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e09fcc3d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "nrun =158035        \n",
    "print(len(np.unique(high_pixel[nrun][\"pix\"])))\n",
    "i=0\n",
    "values, counts = np.unique(high_pixel[nrun][\"pix\"], return_counts=True)\n",
    "print(len(values))\n",
    "while len(values)>200:\n",
    "    mask = high_pixel[nrun][\"brightness\"]>900+i*50\n",
    "    print(\"Threshold\",900+i*50)\n",
    "    print(len(values))\n",
    "    values, counts = np.unique(high_pixel[nrun][\"pix\"][mask], return_counts=True)\n",
    "    i+=1\n",
    "print(len(high_pixel[nrun][\"time\"][mask]))\n",
    "mask_max_counts = counts<max_counts\n",
    "print(\"new treshold at\", 900+i*50)\n",
    "plot_from_pix(high_pixel[nrun][\"pix\"][mask][:1000000], high_pixel[nrun][\"time\"][mask][:1000000])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "13ea6cc5",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "820e50f0",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "# Remove all pixels that have more than max_counts occurences, since those are most of the time no satellite trails.\n",
    "# losses along a  trail have to be accepted. Max_counts is deliberately chosen generously\n",
    "# if unique pixels too many make new threshold\n",
    "#################Improved version without x/y pos#################\n",
    "#################Use this one#################\n",
    "high_pixel = test\n",
    "telId = 5\n",
    "max_counts = 50\n",
    "for nrun in nruns:\n",
    "    trails_high_avg[nrun] = {}\n",
    "    trails_high_avg[nrun][telId] = {}\n",
    "    try:\n",
    "        values, counts = np.unique(high_pixel[nrun][\"pix\"+str(telId)], return_counts=True)\n",
    "        \n",
    "        mask_max_counts = counts<max_counts\n",
    "        i=0\n",
    "        while len(values)>400:\n",
    "            mask = high_pixel[nrun][telId]>900+i*50\n",
    "            values, counts = np.unique(high_pixel[nrun][\"pix\"+str(telId)][mask], return_counts=True)\n",
    "            i+=1\n",
    "        mask_max_counts = counts<max_counts\n",
    "        print(\"new treshold at\", 900+i*50)        \n",
    "        st = set(values[mask_max_counts])\n",
    "        result = [i for i, e in enumerate(high_pixel[nrun][\"pix\"+str(telId)]) if e in st]\n",
    "        trails_high_avg[nrun][telId][\"z\"] = np.array(high_pixel[nrun][\"tmp\"+str(telId)][result]-high_pixel[nrun][\"tmp\"+str(telId)][0])\n",
    "        trails_high_avg[nrun][telId][\"pix ID\"] = np.array(high_pixel[nrun][\"pix\"+str(telId)][result])\n",
    "        trails_high_avg[nrun][telId][\"pix ID\"] = trails_high_avg[nrun][telId][\"pix ID\"].astype(int)\n",
    "        trails_high_avg[nrun][telId][\"brightness\"] = np.array(high_pixel[nrun][telId][result])\n",
    "        plot_from_pix(trails_high_avg[nrun][telId][\"pix ID\"], trails_high_avg[nrun][telId][\"z\"])\n",
    "        draw_box()\n",
    "        plt.show()\n",
    "    except:\n",
    "        print(\"No CT 5 for run \", nrun )\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ded09d4b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "########################################################################################\n",
    "############Good display for tracks and possible meteories##############################\n",
    "########################################################################################\n",
    "########################################################################################\n",
    "#########################DO NOT DELETE##################################################\n",
    "########################################################################################\n",
    "for nrun in nruns:\n",
    "    print(nrun)\n",
    "    track, possible_meteorite = track_sorter(trails_high_avg[nrun][telId][\"pix ID\"],\n",
    "                                     trails_high_avg[nrun][telId][\"z\"],\n",
    "                                     trails_high_avg[nrun][telId][\"brightness\"],\n",
    "                                    typed_nn_pix)\n",
    "    if (track[0][0][0] ==-1 and possible_meteorite[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"void of (useful)data\")\n",
    "        continue\n",
    "    if (track[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"without satelite tracks\")\n",
    "    else:\n",
    "        plot_poss_met(track)   \n",
    "    if (possible_meteorite[0][0][0]==-1):\n",
    "        print(\"Run\", nrun,\"without meteories\")\n",
    "        continue\n",
    "    possible_meteorite, trash = adding_possible_meteorites(possible_meteorite)\n",
    "    plot_poss_met(possible_meteorite)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9537700b",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "for nrun in nruns:\n",
    "    try:\n",
    "        a,b = get_neighbour_pixel_entries(np.array(trails_high_avg[nrun][telId][\"x\"]),\n",
    "                                          np.array(trails_high_avg[nrun][telId][\"y\"]),\n",
    "                                          np.array(trails_high_avg[nrun][telId][\"z\"]),\n",
    "                                          np.array(trails_high_avg[nrun][telId][\"pix ID\"]),\n",
    "                                          np.array(trails_high_avg[nrun][telId][\"brightness\"]))\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8aa828d7",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "### Sort data into tracks and meteories/junk\n",
    "#Adjust get_neighbour_pixel_entries to be faster in evaluation\n",
    "telId = 5\n",
    "trackruns = {}\n",
    "possible_meteorites = {}\n",
    "for nrun in nruns:\n",
    "    trackruns[nrun] = {}\n",
    "    possible_meteorites[nrun] = {}\n",
    "    try:\n",
    "        timeout = 10   # [seconds]\n",
    "\n",
    "        timeout_start = time.time()\n",
    "        while time.time() < timeout_start + timeout:\n",
    "            trackruns[nrun], possible_meteorites[nrun] = get_neighbour_pixel_entries(np.array(trails_high_avg[nrun][telId][\"x\"]),\n",
    "                                    np.array(trails_high_avg[nrun][telId][\"y\"]),\n",
    "                                    np.array(trails_high_avg[nrun][telId][\"z\"]),\n",
    "                                    np.array(trails_high_avg[nrun][telId][\"pix ID\"]),\n",
    "                                    np.array(trails_high_avg[nrun][telId][\"brightness\"]) )\n",
    "            break\n",
    "    except:\n",
    "        print(nrun, \"ERROR\")\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fdd7124",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#timeout testing\n",
    "timeout = 30   # [seconds]\n",
    "\n",
    "timeout_start = time.time()\n",
    "i=0\n",
    "while time.time() < timeout_start + timeout:\n",
    "    print(i)\n",
    "    i+=1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8d90dc86",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#Adding together all the meteorite tracks of the same/close time:\n",
    "for nrun in nruns: \n",
    "    temp = list(possible_meteorites[nrun])\n",
    "    for N in reversed(list(possible_meteorites[nrun].keys())):\n",
    "        #print(possible_meteorites[nrun][np.array(list(possible_meteorites[nrun].keys()))[0]].keys())\n",
    "        try:\n",
    "            try:\n",
    "                try:\n",
    "                    res = temp[temp.index(N) - 1]\n",
    "                except (ValueError, IndexError):\n",
    "                    res = None\n",
    "                #Adding:\n",
    "                if (len(set(possible_meteorites[nrun][N][\"z\"]) & set(possible_meteorites[nrun][res][\"z\"]))>0 or \n",
    "                   len(set(possible_meteorites[nrun][N][\"z\"]-1) & set(possible_meteorites[nrun][res][\"z\"]))>0):\n",
    "                    possible_meteorites[nrun][res][\"x\"] =  possible_meteorites[nrun][res][\"x\"]+ possible_meteorites[nrun][N][\"x\"]\n",
    "                    possible_meteorites[nrun][res][\"y\"] =  possible_meteorites[nrun][res][\"y\"]+ possible_meteorites[nrun][N][\"y\"]\n",
    "                    possible_meteorites[nrun][res][\"z\"] =  possible_meteorites[nrun][res][\"z\"]+ possible_meteorites[nrun][N][\"z\"]\n",
    "                    possible_meteorites[nrun][res][\"pix\"] =  possible_meteorites[nrun][res][\"pix\"]+ possible_meteorites[nrun][N][\"pix\"]\n",
    "                    possible_meteorites[nrun][res][\"brightness\"] =  possible_meteorites[nrun][res][\"brightness\"] + possible_meteorites[nrun][N][\"brightness\"]\n",
    "                    possible_meteorites[nrun].pop(N, None)\n",
    "                    continue\n",
    "            except:\n",
    "                if len(possible_meteorites[nrun][N].keys())==0:\n",
    "                    possible_meteorites[nrun].pop(N, None)\n",
    "                pass\n",
    "            #Delete, if remaining data is no track, might have to be extended/adjusted by linear fit\n",
    "            if len(set(possible_meteorites[nrun][N][\"pix\"]))<3:\n",
    "                possible_meteorites[nrun].pop(N, None)\n",
    "        except:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "00c306cd",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#only for testing, can be deleted if neccessary, just for display\n",
    "for nrun in nruns:\n",
    "    for N in possible_meteorites[nrun]:\n",
    "        try:\n",
    "            print(nrun, N, set(possible_meteorites[nrun][N][\"z\"]))\n",
    "            if len(set(possible_meteorites[nrun][N][\"pix\"]))<3:\n",
    "                continue\n",
    "            if len(set(possible_meteorites[nrun][N][\"z\"]))>2:\n",
    "                plot_scatter(possible_meteorites[nrun][N][\"x\"], \n",
    "                     possible_meteorites[nrun][N][\"y\"],\n",
    "                     possible_meteorites[nrun][N][\"brightness\"])\n",
    "                draw_box(0,0)\n",
    "                plt.show()\n",
    "            \n",
    "            plot_scatter(possible_meteorites[nrun][N][\"x\"], \n",
    "                     possible_meteorites[nrun][N][\"y\"],\n",
    "                     possible_meteorites[nrun][N][\"z\"])\n",
    "            draw_box(0,0)\n",
    "            plt.show()\n",
    "        except:\n",
    "            print(N, possible_meteorites[nrun][N].keys())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "76c1dfb9",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#just for displaying tracks, not optimal, but gist is visible\n",
    "for nrun in nruns:\n",
    "    cax = {}\n",
    "    counter = 0\n",
    "    counter_max_time = 0\n",
    "    if (len(trackruns[nrun])==0 and len(possible_meteorites[nrun])==0):\n",
    "        continue\n",
    "    fig, ax = plt.subplots()\n",
    "    for N in possible_meteorites[nrun]:\n",
    "        counter+=1\n",
    "        if np.max(possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0])>= counter_max_time:\n",
    "            counter_index = counter\n",
    "            counter_max_time = np.max(possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0])\n",
    "        cax[counter] = ax.scatter(possible_meteorites[nrun][N][\"x\"], \n",
    "                     possible_meteorites[nrun][N][\"y\"],\n",
    "                     c = possible_meteorites[nrun][N][\"z\"]- possible_meteorites[nrun][N][\"z\"][0], cmap = \"jet\")\n",
    "    for N in trackruns[nrun]:\n",
    "        counter+=1\n",
    "        if np.max(trackruns[nrun][N][\"z\"]-trackruns[nrun][N][\"z\"][0])>= counter_max_time:\n",
    "            counter_index = counter\n",
    "            counter_max_time = np.max(trackruns[nrun][N][\"z\"]-trackruns[nrun][N][\"z\"][0])\n",
    "        cax[counter] = ax.scatter(trackruns[nrun][N][\"x\"], \n",
    "        trackruns[nrun][N][\"y\"],\n",
    "        c = trackruns[nrun][N][\"z\"]- trackruns[nrun][N][\"z\"][0], cmap = \"jet\")\n",
    "    draw_box(0,0)\n",
    "    ax.set_xlim(-1.25,1.25)\n",
    "    ax.set_ylim(-1.25,1.25)\n",
    "    ax.set_xlabel(\"Camera x-pos\")\n",
    "    ax.set_ylabel(\"Camera y-pos\")\n",
    "    ax.set_title(\"Run {}\".format(nrun)+\", CT {}\".format(telId))\n",
    "    cbar = fig.colorbar(cax[counter_index])\n",
    "    cbar.set_label(\"Time in track [s]\")\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "46912bbb",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "satellite_data = {}\n",
    "#sort into statistics files\n",
    "for nrun in nruns:\n",
    "    satellite_data[nrun] = {}\n",
    "    i = 0\n",
    "    if len(trackruns[nrun]) == 0:\n",
    "        satellite_data[nrun] = \"No data\"\n",
    "        continue\n",
    "    for N in trackruns[nrun]:\n",
    "        if len(trackruns[nrun][N].keys())==0:\n",
    "            continue\n",
    "        i+=1\n",
    "        satellite_data[nrun][i] = {}\n",
    "        satellite_data[nrun][i][\"time in run\"] = trackruns[nrun][N][\"z\"][0]\n",
    "        satellite_data[nrun][i][\"duration\"] = np.max(trackruns[nrun][N][\"z\"]-trackruns[nrun][N][\"z\"][0])\n",
    "        satellite_data[nrun][i][\"mean brightness\"] = int(np.average(trackruns[nrun][N][\"brightness\"]))\n",
    "        satellite_data[nrun][i][\"mean brightness std\"] = int(np.std(trackruns[nrun][N][\"brightness\"]))\n",
    "        satellite_data[nrun][i][\"N pix\"] = len(set(trackruns[nrun][N][\"pix\"]))\n",
    "        width_nrun, std_width_nrun = get_track_width(trackruns[nrun][N][\"x\"], trackruns[nrun][N][\"y\"])\n",
    "        satellite_data[nrun][i][\"mean width\"] = width_nrun\n",
    "        satellite_data[nrun][i][\"std width\"] = std_width_nrun\n",
    "        popt, pcov = curve_fit(lin_fit, trackruns[nrun][N][\"x\"], trackruns[nrun][N][\"y\"])\n",
    "        satellite_data[nrun][i][\"linear fit parameter\"] = (round(popt[0], 5), round(popt[1],5))\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83d79576",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(satellite_data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "85edef59",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "mean_brightness = []\n",
    "mean_width = []\n",
    "new_nruns = []\n",
    "directions = []\n",
    "durations = []\n",
    "for nrun in nruns:\n",
    "    if satellite_data[nrun]==\"No data\":\n",
    "        #print(satellite_data[nrun],\"for\", nrun)\n",
    "        continue\n",
    "    for i in satellite_data[nrun]:\n",
    "        mean_brightness.append(satellite_data[nrun][i][\"mean brightness\"])\n",
    "        mean_width.append(satellite_data[nrun][i][\"mean width\"])\n",
    "        new_nruns.append(nrun)\n",
    "        directions.append(satellite_data[nrun][i][\"linear fit parameter\"][0])\n",
    "        durations.append(satellite_data[nrun][i][\"duration\"])\n",
    "print(np.average(mean_brightness), np.std(mean_brightness))\n",
    "plt.hist(mean_brightness)\n",
    "plt.xlabel(\"mean brightness [MHz]\")\n",
    "plt.ylabel(\"number\")\n",
    "plt.show()\n",
    "plt.hist(directions)\n",
    "plt.show()\n",
    "plt.hist(durations)\n",
    "plt.show()\n",
    "mask = np.array(new_nruns) < 160000\n",
    "plt.scatter(np.array(mean_brightness)[mask],np.array(mean_width)[mask], c =np.array(new_nruns)[mask], cmap=\"jet\")\n",
    "plt.xlabel(\"mean brightness [MHz]\")\n",
    "plt.ylabel(\"mean width [pix]\")\n",
    "cbar = plt.colorbar()\n",
    "cbar.set_label(\"nrun\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ba562d21",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "nrun = 174949\n",
    "telId = 5\n",
    "#Display satellites and meteories all in one plot\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "fig2, ax2 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "fig3, ax3 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "thresh = 3500\n",
    "print(possible_meteorites[nrun].keys())\n",
    "for N in range(np.max(list(possible_meteorites[nrun].keys()))+1):\n",
    "    if N not in possible_meteorites[nrun]:\n",
    "        continue\n",
    "    if len(possible_meteorites[nrun][N].keys()) == 0:\n",
    "        continue\n",
    "    if len(set(possible_meteorites[nrun][N][\"pix\"]))< 6:\n",
    "        possible_meteorites[nrun].pop(N, None)\n",
    "        continue\n",
    "#     print(set(possible_meteorites[nrun][N][\"pix\"]))\n",
    "    ax.scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                possible_meteorites[nrun][N][\"y\"],\n",
    "                c = possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0],  cmap = \"jet\")\n",
    "    pix = list(possible_meteorites[nrun][N][\"pix\"])\n",
    "    z = list(possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0])\n",
    "    brightness = list(possible_meteorites[nrun][N][\"brightness\"])\n",
    "    #print(set(possible_meteorites[nrun][N][\"z\"]- possible_meteorites[nrun][N][\"z\"][0]))\n",
    "    b = np.where(np.array(possible_meteorites[nrun][N][\"brightness\"]) > thresh, thresh, np.array(possible_meteorites[nrun][N][\"brightness\"]))\n",
    "    ax2.scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                possible_meteorites[nrun][N][\"y\"],\n",
    "                c = b, cmap = \"jet\")\n",
    "    \n",
    "    popt, pcov = curve_fit(lin_fit, possible_meteorites[nrun][N][\"x\"],possible_meteorites[nrun][N][\"y\"])\n",
    "    ax.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "    ax2.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "    ax3.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "#print(trackruns[nrun].keys())\n",
    "for N in trackruns[nrun].keys():\n",
    "    cax = ax.scatter(trackruns[nrun][N][\"x\"],\n",
    "                trackruns[nrun][N][\"y\"],\n",
    "                c = trackruns[nrun][N][\"z\"]- trackruns[nrun][N][\"z\"][0], cmap = \"jet\")\n",
    "    pix = pix + list(trackruns[nrun][N][\"pix\"])\n",
    "    z_pre = np.array(trackruns[nrun][N][\"z\"])-trackruns[nrun][N][\"z\"][0]\n",
    "    z = z + list(trackruns[nrun][N][\"z\"]-trackruns[nrun][N][\"z\"][0])\n",
    "    brightness = brightness + list(trackruns[nrun][N][\"brightness\"])\n",
    "    #print(set(trackruns[nrun][N][\"z\"]- trackruns[nrun][N][\"z\"][0]))\n",
    "    popt, pcov = curve_fit(lin_fit, trackruns[nrun][N][\"x\"],trackruns[nrun][N][\"y\"])\n",
    "    \n",
    "    b = np.where(np.array(trackruns[nrun][N][\"brightness\"]) > thresh, thresh, np.array(trackruns[nrun][N][\"brightness\"]))\n",
    "    \n",
    "    \n",
    "    cax2 = ax2.scatter(trackruns[nrun][N][\"x\"],\n",
    "                trackruns[nrun][N][\"y\"],\n",
    "                c = b, cmap = \"jet\")\n",
    "    popt, pcov = curve_fit(lin_fit, trackruns[nrun][N][\"x\"],trackruns[nrun][N][\"y\"])\n",
    "    ax.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    ax2.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    ax3.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    \n",
    "ax.set_xlim(-1.25,1.25)\n",
    "ax.set_ylim(-1.25,1.25)\n",
    "ax2.set_xlim(-1.25,1.25)\n",
    "ax2.set_ylim(-1.25,1.25)\n",
    "draw_box()\n",
    "cbar = fig.colorbar(cax)\n",
    "#cbar.ax.set_yticklabels(['first in track', 'last in track '])\n",
    "ax.set_title(\"Timing during each track\")\n",
    "ax.set_xlabel(\"Camera x-pos\")\n",
    "ax.set_ylabel(\"Camera y-pos\")\n",
    "cbar2 = fig2.colorbar(cax2) #ticks = [1000,2000,3000,4000, 6000])\n",
    "cbar2.set_label(\"MHz\")\n",
    "#cbar2.ax2.set_yticklabels(['first in track', 'last in track '])\n",
    "ax2.set_title(\"Brightness\")\n",
    "ax2.set_xlabel(\"Camera x-pos\")\n",
    "ax2.set_ylabel(\"Camera y-pos\")\n",
    "for i in range(len(pix)):\n",
    "    pix[i] = int(pix[i])\n",
    "\n",
    "ax3.set_xlim(-1.25,1.25)\n",
    "ax3.set_ylim(-1.25,1.25)\n",
    "cax3 = ax3.scatter(np.array(geom_hess5_xc_from_root)[np.array(pix)], \n",
    "            np.array(geom_hess5_yc_from_root)[np.array(pix)],\n",
    "            c = z, cmap =\"rainbow\")\n",
    "cbar3 = fig3.colorbar(cax3)\n",
    "ax3.set_title(\"Timing during each track\")\n",
    "ax3.set_xlabel(\"Camera x-pos\")\n",
    "ax3.set_ylabel(\"Camera y-pos\")\n",
    "cbar3.set_label(\"Time in track [s]\")\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "027e73ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "# print(possible_meteorites[nrun].keys())\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "fig2, ax2 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "fig3, ax3 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "thresh = 2500\n",
    "for N in range(np.max(list(possible_meteorites[nrun].keys()))+1):\n",
    "    if N not in possible_meteorites[nrun]:\n",
    "        continue\n",
    "    if len(set(possible_meteorites[nrun][N][\"pix\"]))< 6:\n",
    "        possible_meteorites[nrun].pop(N, None)\n",
    "        continue\n",
    "    print(set(possible_meteorites[nrun][N][\"pix\"]))\n",
    "    ax.scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                possible_meteorites[nrun][N][\"y\"],\n",
    "                c = possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0],  cmap = \"jet\")\n",
    "    pix = list(possible_meteorites[nrun][N][\"pix\"])\n",
    "    z = list(possible_meteorites[nrun][N][\"z\"]-possible_meteorites[nrun][N][\"z\"][0])\n",
    "    brightness = list(possible_meteorites[nrun][N][\"brightness\"])\n",
    "    print(set(possible_meteorites[nrun][N][\"z\"]- possible_meteorites[nrun][N][\"z\"][0]))\n",
    "    b = np.where(np.array(possible_meteorites[nrun][N][\"brightness\"]) > thresh, thresh, np.array(possible_meteorites[nrun][N][\"brightness\"]))\n",
    "    ax2.scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                possible_meteorites[nrun][N][\"y\"],\n",
    "                c = b, cmap = \"jet\")\n",
    "    \n",
    "    popt, pcov = curve_fit(lin_fit, possible_meteorites[nrun][N][\"x\"],possible_meteorites[nrun][N][\"y\"])\n",
    "    ax.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "    ax2.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "    ax3.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt), \"--\", c = \"black\")\n",
    "print(trackruns[nrun].keys())\n",
    "for N in trackruns[nrun].keys():\n",
    "    cax = ax.scatter(trackruns[nrun][N][\"x\"],\n",
    "                trackruns[nrun][N][\"y\"],\n",
    "                c = trackruns[nrun][N][\"z\"]- trackruns[nrun][N][\"z\"][0], cmap = \"jet\")\n",
    "    pix = pix + list(trackruns[nrun][N][\"pix\"])\n",
    "    z_pre = np.array(trackruns[nrun][N][\"z\"])-trackruns[nrun][N][\"z\"][0]\n",
    "    z = z + list(trackruns[nrun][N][\"z\"]-trackruns[nrun][N][\"z\"][0])\n",
    "    brightness = brightness + list(trackruns[nrun][N][\"brightness\"])\n",
    "    print(set(trackruns[nrun][N][\"z\"]- trackruns[nrun][N][\"z\"][0]))\n",
    "    popt, pcov = curve_fit(lin_fit, trackruns[nrun][N][\"x\"],trackruns[nrun][N][\"y\"])\n",
    "    \n",
    "    b = np.where(np.array(trackruns[nrun][N][\"brightness\"]) > thresh, thresh, np.array(trackruns[nrun][N][\"brightness\"]))\n",
    "    \n",
    "    \n",
    "    cax2 = ax2.scatter(trackruns[nrun][N][\"x\"],\n",
    "                trackruns[nrun][N][\"y\"],\n",
    "                c = b, cmap = \"jet\")\n",
    "    popt, pcov = curve_fit(lin_fit, trackruns[nrun][N][\"x\"],trackruns[nrun][N][\"y\"])\n",
    "    ax.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    ax2.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    ax3.plot(np.arange(-1.,1.01), lin_fit(np.arange(-1.,1.01), *popt),  \"--\", c = \"black\")\n",
    "    \n",
    "ax.set_xlim(-1.25,1.25)\n",
    "ax.set_ylim(-1.25,1.25)\n",
    "ax2.set_xlim(-1.25,1.25)\n",
    "ax2.set_ylim(-1.25,1.25)\n",
    "draw_box()\n",
    "cbar = fig.colorbar(cax)\n",
    "#cbar.ax.set_yticklabels(['first in track', 'last in track '])\n",
    "ax.set_title(\"Timing during each track\")\n",
    "ax.set_xlabel(\"Camera x-pos\")\n",
    "ax.set_ylabel(\"Camera y-pos\")\n",
    "cbar2 = fig2.colorbar(cax2) #ticks = [1000,2000,3000,4000, 6000])\n",
    "cbar2.set_label(\"MHz\")\n",
    "#cbar2.ax2.set_yticklabels(['first in track', 'last in track '])\n",
    "ax2.set_title(\"Brightness\")\n",
    "ax2.set_xlabel(\"Camera x-pos\")\n",
    "ax2.set_ylabel(\"Camera y-pos\")\n",
    "fig.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-all-tracks-timing.jpg\")\n",
    "fig2.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-all-tracks-brightness.jpg\")\n",
    "for i in range(len(pix)):\n",
    "    pix[i] = int(pix[i])\n",
    "\n",
    "ax3.set_xlim(-1.25,1.25)\n",
    "ax3.set_ylim(-1.25,1.25)\n",
    "cax3 = ax3.scatter(np.array(geom_hess5_xc_from_root)[np.array(pix)], \n",
    "            np.array(geom_hess5_yc_from_root)[np.array(pix)],\n",
    "            c = z, cmap =\"rainbow\")\n",
    "cbar3 = fig3.colorbar(cax3)\n",
    "ax3.set_title(\"Timing during each track\")\n",
    "ax3.set_xlabel(\"Camera x-pos\")\n",
    "ax3.set_ylabel(\"Camera y-pos\")\n",
    "cbar3.set_label(\"Time in track [s]\")\n",
    "\n",
    "fig3.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-all-tracks-timing-better.jpg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "422911b3",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "nrun = 174949\n",
    "telId=5\n",
    "\n",
    "fig1, ax1 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "fig2, ax2 = plt.subplots(figsize=(8,6))\n",
    "draw_box()\n",
    "thresh = 2650\n",
    "\n",
    "print(len(high_pixel[nrun][\"x-pos\"+str(telId)]))\n",
    "mask = high_pixel[nrun][telId]<6100\n",
    "b =  np.where(np.array(high_pixel[nrun][telId])>thresh, thresh, np.array(high_pixel[nrun][telId]))\n",
    "cax2 = ax2.scatter(high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "                 high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "                 c = b, cmap = \"jet\")\n",
    "cax1 = ax1.scatter(high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "                 high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "                 c = high_pixel[nrun][\"tmp\"+str(telId)] -high_pixel[nrun][\"tmp\"+str(telId)][0], cmap = \"jet\")\n",
    "\n",
    "\n",
    "ax1.set_title(\"Timing in s\")\n",
    "ax1.set_xlabel(\"Camera x-pos\")\n",
    "ax1.set_ylabel(\"Camera y-pos\")\n",
    "cbar1 = fig1.colorbar(cax1)\n",
    "ax2.set_title(\"Brightness\")\n",
    "ax2.set_xlabel(\"Camera x-pos\")\n",
    "ax2.set_ylabel(\"Camera y-pos\")\n",
    "cbar2 = fig2.colorbar(cax2)\n",
    "fig1.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-uncleaned-timing.jpg\")\n",
    "fig2.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-uncleaned-brightness.jpg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3b13aa71",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "\n",
    "nrun = 174949\n",
    "telId = 5\n",
    "# x = np.array(trails_high_avg[nrun][telId][\"x\"])\n",
    "# y = np.array(trails_high_avg[nrun][telId][\"y\"])\n",
    "# z = np.array(trails_high_avg[nrun][telId][\"z\"])\n",
    "# pix = np.array(trails_high_avg[nrun][telId][\"pix ID\"])\n",
    "# brightness = np.array(trails_high_avg[nrun][telId][\"brightness\"])\n",
    "\n",
    "x = np.array(high_pixel[nrun][\"x-pos\"+str(telId)])\n",
    "y = np.array(high_pixel[nrun][\"y-pos\"+str(telId)])\n",
    "z = np.array(high_pixel[nrun][\"tmp\"+str(telId)]- high_pixel[nrun][\"tmp\"+str(telId)][0])\n",
    "pix = np.array(high_pixel[nrun][\"pix\"+str(telId)])\n",
    "brightness = np.array(high_pixel[nrun][telId])\n",
    "Pix = [ (pix[i],i) for i in np.arange(len(pix))]\n",
    "Pix.sort()\n",
    "#Probiere nochmal mit List comprehension?\n",
    "sorted_pix,permutation = zip(*Pix)\n",
    "sorted_pix = np.array(sorted_pix)\n",
    "permutation = np.array(permutation)\n",
    "#print(len(set(high_pixel[nrun][\"pix\"+str(telId)])))\n",
    "# for pix in set(high_pixel[nrun][\"pix\"+str(telId)]):\n",
    "#     print(int(pix), end = \", \")\n",
    "mean_pix_pix = []\n",
    "mean_pix_x = []\n",
    "mean_pix_y = []\n",
    "mean_pix_z = []\n",
    "mean_pix_brightness = []\n",
    "counter = 0\n",
    "print(len(set(pix)))\n",
    "for i in range(len(x)):\n",
    "    if i == 0:\n",
    "        #mean_x = [x[permutation][i]]\n",
    "        #mean_y = [y[permutation][i]]\n",
    "        mean_z = [z[permutation][i]]\n",
    "        mean_pix = [pix[permutation][i]]\n",
    "        mean_brightness = [brightness[permutation][i]]\n",
    "        continue\n",
    "    if pix[permutation][i] == pix[permutation][i-1]:\n",
    "        \n",
    "        #mean_x.append(x[permutation][i])\n",
    "        #mean_y.append(y[permutation][i])\n",
    "        mean_z.append(z[permutation][i])\n",
    "        mean_pix.append(pix[permutation][i])\n",
    "        mean_brightness.append(brightness[permutation][i])\n",
    "    else:\n",
    "        counter +=1\n",
    "        print(counter)\n",
    "        #mean_pix_x.append(np.average(mean_x))\n",
    "        #mean_pix_y.append(np.average(mean_y))\n",
    "        mean_pix_z.append(np.average(mean_z))\n",
    "        mean_pix_pix.append(np.average(mean_pix))\n",
    "        mean_pix_brightness.append(np.average(mean_brightness))\n",
    "        \n",
    "        #mean_x = [x[permutation][i]]\n",
    "        #mean_y = [y[permutation][i]]\n",
    "        mean_z = [z[permutation][i]]\n",
    "        mean_pix = [pix[permutation][i]]\n",
    "        mean_brightness = [brightness[permutation][i]]\n",
    "fig, ax = plt.subplots(figsize =(8,6))    \n",
    "draw_box()\n",
    "\n",
    "cax = ax.scatter(np.array(mean_pix_x),\n",
    "                 np.array(mean_pix_y),\n",
    "                 c = np.array(mean_pix_brightness), cmap = \"jet\" )\n",
    "fig.colorbar(cax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "df081d8e",
   "metadata": {},
   "outputs": [],
   "source": [
    "print(mean_pix_pix)\n",
    "for i in range(len(mean_pix_pix)):\n",
    "    mean_pix_pix[i] = int(mean_pix_pix[i])\n",
    "thresh = 4100\n",
    "fig, ax = plt.subplots(figsize =(8,6))\n",
    "b = np.where(np.array(mean_pix_brightness) > thresh, thresh, np.array(mean_pix_brightness))\n",
    "    \n",
    "cax =  ax.scatter(np.array(geom_hess5_xc_from_root)[np.array(mean_pix_pix)], \n",
    "           np.array(geom_hess5_yc_from_root)[np.array(mean_pix_pix)], \n",
    "           c = b, cmap = \"jet\")\n",
    "draw_box()\n",
    "ax.set_xlim(-1.25,1.25)\n",
    "ax.set_ylim(-1.25,1.25)\n",
    "ax.set_title(\"Average brightness in MHz\")\n",
    "ax.set_xlabel(\"Camera x-pos\")\n",
    "ax.set_ylabel(\"Camera y-pos\")\n",
    "cbar = fig.colorbar(cax)\n",
    "fig.savefig(\"D:\\\\Masterarbeit ECAP\\\\First Plots\\\\run174949-average-brightness.jpg\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c36dbb5f",
   "metadata": {},
   "outputs": [],
   "source": [
    "nrun = 174949\n",
    "print(possible_meteorites[nrun].keys())\n",
    "for N in reversed(list(possible_meteorites[nrun].keys())):\n",
    "    #print(possible_meteorites[nrun][np.array(list(possible_meteorites[nrun].keys()))[0]].keys())\n",
    "    try:\n",
    "        try:\n",
    "            if len(set(possible_meteorites[nrun][N][\"z\"]) & set(possible_meteorites[nrun][N-1][\"z\"]))>0:\n",
    "                possible_meteorites[nrun][N-1][\"x\"] =  possible_meteorites[nrun][N-1][\"x\"]+ possible_meteorites[nrun][N][\"x\"]\n",
    "                possible_meteorites[nrun][N-1][\"y\"] =  possible_meteorites[nrun][N-1][\"y\"]+ possible_meteorites[nrun][N][\"y\"]\n",
    "                possible_meteorites[nrun][N-1][\"z\"] =  possible_meteorites[nrun][N-1][\"z\"]+ possible_meteorites[nrun][N][\"z\"]\n",
    "                possible_meteorites[nrun][N-1][\"pix\"] =  possible_meteorites[nrun][N-1][\"pix\"]+ possible_meteorites[nrun][N][\"pix\"]\n",
    "                possible_meteorites[nrun][N-1][\"brightness\"] =  possible_meteorites[nrun][N-1][\"brightness\"] + possible_meteorites[nrun][N][\"brightness\"]\n",
    "                possible_meteorites[nrun].pop(N, None)\n",
    "                continue\n",
    "        except:\n",
    "            pass\n",
    "        print(set(possible_meteorites[nrun][N][\"z\"]))\n",
    "        popt, pcov = curve_fit(lin_fit,possible_meteorites[nrun][N][\"x\"],possible_meteorites[nrun][N][\"y\"])\n",
    "        draw_box()\n",
    "        plot_scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                    possible_meteorites[nrun][N][\"y\"],\n",
    "                    possible_meteorites[nrun][N][\"z\"])\n",
    "        plt.plot(np.arange(-1.25,1.25, 0.01), lin_fit(np.arange(-1.25,1.25, 0.01), *popt))\n",
    "        try:\n",
    "            print(\"Saving...\")\n",
    "            plt.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-meteorite.jpg\")\n",
    "        except:\n",
    "            print(\"saving did not work, try closing the file\")\n",
    "        plt.show()\n",
    "        plot_scatter(possible_meteorites[nrun][N][\"x\"],\n",
    "                    possible_meteorites[nrun][N][\"y\"],\n",
    "                    possible_meteorites[nrun][N][\"brightness\"])\n",
    "        draw_box()\n",
    "        plt.show()\n",
    "    except:\n",
    "        try:\n",
    "            print(\"error\", set(possible_meteorites[nrun][N][\"z\"]))\n",
    "            pass\n",
    "        except:\n",
    "            possible_meteorites[nrun].pop(N, None)\n",
    "            print(\"no time found\")\n",
    "            \n",
    "print(trackruns[nrun].keys())\n",
    "counter = 0\n",
    "for N in (list(trackruns[nrun].keys())):\n",
    "    if N not in trackruns[nrun].keys():\n",
    "        continue\n",
    "    if \"x\" not in trackruns[nrun][N].keys():\n",
    "        trackruns[nrun].pop(N, None)\n",
    "        continue\n",
    "    if len(set(trackruns[nrun][N][\"pix\"]))>4:\n",
    "        popt, pcov = curve_fit(lin_fit,trackruns[nrun][N][\"x\"],trackruns[nrun][N][\"y\"])\n",
    "        print(popt)\n",
    "        draw_box()\n",
    "        plot_scatter(trackruns[nrun][N][\"x\"],\n",
    "                    trackruns[nrun][N][\"y\"],\n",
    "                    trackruns[nrun][N][\"z\"])\n",
    "\n",
    "        plt.plot(np.arange(-1.25,1.25, 0.01), lin_fit(np.arange(-1.25,1.25, 0.01), *popt))\n",
    "        counter+=1\n",
    "        plt.savefig(\"D:\\\\Masterarbeit ECAP\\\\Run-174949-track \"+str(counter)+\".jpg\")\n",
    "        plt.show()\n",
    "        mask = np.array(trackruns[nrun][N][\"brightness\"])<np.average(np.array(trackruns[nrun][N][\"brightness\"]))+0.1*np.std(np.array(trackruns[nrun][N][\"brightness\"]))\n",
    "        mask = np.array(trackruns[nrun][N][\"brightness\"])>np.average(np.array(trackruns[nrun][N][\"brightness\"]))-0.1*np.std(np.array(trackruns[nrun][N][\"brightness\"]))\n",
    "        mask = np.array(trackruns[nrun][N][\"brightness\"]) > 0\n",
    "        plot_scatter(np.array(trackruns[nrun][N][\"x\"])[mask],\n",
    "                    np.array(trackruns[nrun][N][\"y\"])[mask],\n",
    "                    np.array(trackruns[nrun][N][\"brightness\"])[mask])\n",
    "        draw_box()\n",
    "        plt.show()\n",
    "\n",
    "    else:\n",
    "        trackruns[nrun].pop(N, None)\n",
    "   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d05e023f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "telId = 5\n",
    "nrun = 174949\n",
    "plot_scatter(-high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "             -high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "             high_pixel[nrun][\"tmp\"+str(telId)])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "cee46e84",
   "metadata": {},
   "outputs": [],
   "source": [
    "for nrun in nruns:\n",
    "    print(nrun)\n",
    "    try:\n",
    "        for N in range(1,np.max(list(possible_meteorites[nrun].keys()))+1):\n",
    "            try:\n",
    "                if len(np.unique(possible_meteorites[nrun][N][\"pix\"]))>0:\n",
    "                    print(N, np.unique(possible_meteorites[nrun][N][\"z\"]))\n",
    "                    popt, pcov = curve_fit(lin_fit, possible_meteorites[nrun][N][\"x\"], possible_meteorites[nrun][N][\"y\"])\n",
    "                    \n",
    "                    intersections = draw_box()\n",
    "                    print(\"values for m, t:\", np.around(popt, 6))\n",
    "                    print(\"Covariances\",np.around(np.diag(pcov),6))\n",
    "                    \n",
    "                    plt.plot(np.arange(-1.25,1.25, 0.01), lin_fit(np.arange(-1.25,1.25, 0.01), *popt))\n",
    "                    plot_scatter(possible_meteorites[nrun][N][\"x\"], \n",
    "                                 possible_meteorites[nrun][N][\"y\"], \n",
    "                                 possible_meteorites[nrun][N][\"z\"])\n",
    "                    plt.show()\n",
    "            except:\n",
    "                print(\"ERROR\")\n",
    "                pass\n",
    "    except:\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0ecd6de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "#appending new_nruns to nruns and delete all empty files\n",
    "os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\\\\eval_data\\\\high_pixel\")\n",
    "first_run = 175000\n",
    "runs_directory = \"run\"+str(first_run)+\"-\"+str(first_run+199)\n",
    "if (first_run % 200==0):\n",
    "    pass\n",
    "else:\n",
    "    print(\"First run not divisible by 200\")\n",
    "    sys.exit()\n",
    "os.chdir(runs_directory)\n",
    "files = os.listdir(os.curdir)\n",
    "print(files)\n",
    "nruns = list(nruns)\n",
    "new_nruns = []\n",
    "for i in range(len(files)):\n",
    "    try:\n",
    "        new_nruns.append(int(files[i]))\n",
    "        nruns.append(int(files[i]))\n",
    "    except:\n",
    "        print(\"No runs in folder/not a folder:\", files[i])\n",
    "nruns = sorted(np.unique(nruns))\n",
    "print(new_nruns)\n",
    "print(nruns)\n",
    "os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\\\\eval_data\")\n",
    "print(os.getcwd())\n",
    "for nrun in new_nruns:\n",
    "    high_pixel[nrun] = {}\n",
    "    high_path = \"high_pixel\\\\\"+runs_directory+\"\\\\\"+str(nrun)+\"\\\\\"\n",
    "    path[nrun] = {}\n",
    "    path[nrun][\"high\"] = \"high_pixel\\\\\"+runs_directory+\"\\\\\"+str(nrun)+\"\\\\\"\n",
    "    for key in path[nrun]:\n",
    "        try:\n",
    "            file_path = path[nrun][key]\n",
    "            for i in range(len(file_path)):\n",
    "                file_name = os.listdir(path[nrun][key])[i]\n",
    "                if os.path.getsize(file_path+file_name) == 0:\n",
    "                    print(\"Empty file\", file_path+file_name ,\"is being removed\")\n",
    "                    os.remove(file_path+file_name)\n",
    "        except:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7328d7ab",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "for nrun in nruns:\n",
    "    telId = 1\n",
    "    for telId in range(1,5):\n",
    "        fig= plt.figure(figsize=(6.5,5), )\n",
    "        try:\n",
    "            print(\"CT\", telId, \"of run\", nrun, end =\": \")\n",
    "            plt.scatter(geom_hess1_xc_from_root, geom_hess1_yc_from_root, c=avg_pix[nrun][telId], s=70, cmap='turbo')\n",
    "            plt.colorbar()\n",
    "            plt.show()\n",
    "            print\n",
    "        except:\n",
    "            print(\"No Data\")\n",
    "            plt.close()\n",
    "    fig= plt.figure(figsize=(10,8), )\n",
    "    try:\n",
    "        \n",
    "        telId = 5\n",
    "        print(\"CT\", telId, \"of run\", nrun, end =\": \")\n",
    "        plt.scatter(geom_hess5_xc_from_root, geom_hess5_yc_from_root, c=avg_pix[nrun][telId], s=30, cmap='rainbow')\n",
    "        plt.colorbar()\n",
    "        plt.show()\n",
    "    except: \n",
    "        print(\"No Data\")\n",
    "        plt.close()\n",
    "        "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fd386a01",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "possible_peak_times = {}\n",
    "for nrun in nruns:\n",
    "    print(\"Run number \",nrun)\n",
    "    telId = 1\n",
    "    #test = avg_tmp[nrun][\"tmp\"+str(telId)]\n",
    "    try:\n",
    "        print(avg_tmp[nrun][\"tmp\"+str(telId)][0])\n",
    "    except:\n",
    "        pass\n",
    "    fig = plt.figure(figsize=(12,6), )\n",
    "   \n",
    "    possible_peak_times[nrun]={}\n",
    "    \n",
    "    for telId in range(1,6):\n",
    "    #    print(\"1st entry: \" ,avg_tmp[nrun][\"tmp\"+str(telId)][0])\n",
    "        try:\n",
    "            possible_peak_times[nrun][telId] = {}\n",
    "            tmp0 = avg_tmp[nrun][\"tmp\"+str(telId)][0]\n",
    "            for i in range(len(avg_tmp[nrun][\"tmp\"+str(telId)])):            \n",
    "                avg_tmp[nrun][\"tmp\"+str(telId)][i] = avg_tmp[nrun][\"tmp\"+str(telId)][i]- tmp0\n",
    "\n",
    "                if telId==5:\n",
    "                    if avg_tmp[nrun][telId][i]>np.average(avg_tmp[nrun][telId][i-10:i+10])+1:\n",
    "                        possible_peak_times[nrun][telId][round(avg_tmp[nrun][\"tmp\"+str(telId)][i],1)] =  avg_tmp[nrun][telId][i]\n",
    "                        #print(\"CT\", telId, \": \", round(avg_tmp[nrun][\"tmp\"+str(telId)][i],1), \", \" , avg_tmp[nrun][telId][i])\n",
    "                else:\n",
    "                    if avg_tmp[nrun][telId][i]>np.average(avg_tmp[nrun][telId][i-3:i+3])+4:\n",
    "                        possible_peak_times[nrun][telId][round(avg_tmp[nrun][\"tmp\"+str(telId)][i],1)] =  avg_tmp[nrun][telId][i]\n",
    "                        #print(\"CT\", telId, \": \", round(avg_tmp[nrun][\"tmp\"+str(telId)][i],1), \", \" , avg_tmp[nrun][telId][i])\n",
    "\n",
    "            print(\"number of unique times vs time diff: \", len(np.unique(avg_tmp[nrun][\"tmp\"+str(telId)])), \"vs\", \n",
    "                  round(np.max(avg_tmp[nrun][\"tmp\"+str(telId)])-np.min(avg_tmp[nrun][\"tmp\"+str(telId)]),1))\n",
    "            plt.scatter(avg_tmp[nrun][\"tmp\"+str(telId)], avg_tmp[nrun][telId], label = \"CT\"+str(telId))\n",
    "            if telId == 4:\n",
    "                #plt.xlim(100,200)\n",
    "                plt.xlabel(\"Time from \\\"GetTime()\\\" [s]\")\n",
    "                plt.ylabel(\"NSB [MHz]\")\n",
    "                plt.legend()\n",
    "                plt.show()\n",
    "\n",
    "                fig = plt.figure(figsize=(12,6), )\n",
    "\n",
    "        except:\n",
    "            print(\"No CT\"+str(telId)+\" Data\")\n",
    "    plt.legend()\n",
    "    plt.xlabel(\"Time from \\\"GetTime()\\\" [s]\")\n",
    "    #plt.xlim(117, 121)\n",
    "    #plt.ylim(450, 470)\n",
    "    plt.ylabel(\"NSB [MHz]\")\n",
    "    plt.show()\n",
    "print(possible_peak_times)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "289e7104",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "telId = 5\n",
    "for nrun in nruns:\n",
    "    plot_scatter(high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "                 high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "                 high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0] )\n",
    "    plt.show()\n",
    "    print(\"test\")\n",
    "\n",
    "    #first cleaning:\n",
    "    x_cleaned_1,y_cleaned_1,z_cleaned_1 = cleaning_cut(high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "                                                       high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "                                                       high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0], 3, 3)\n",
    "\n",
    "    #second cleaning\n",
    "    result = cleaning_cut(x_cleaned_1, y_cleaned_1, z_cleaned_1, 4, 2)\n",
    "\n",
    "\n",
    "    tracks = sort_into_tracks(result[0],result[1], result[2], 6)\n",
    "    for N in range(1,6):\n",
    "        if len(tracks[\"x-\"+str(N)]) !=0:\n",
    "            number_of_tracks +=1\n",
    "            print(\"Track\", N, end =\": \")\n",
    "            popt, pcov = curve_fit(lin_fit, tracks[\"x-\"+str(N)], tracks[\"y-\"+str(N)])\n",
    "            print(\"linear fit : y =\",round(popt[0],4),\"* x +\",round(popt[1],4)) \n",
    "            dur = tracks[\"z-\"+str(N)][-1]- tracks[\"z-\"+str(N)][0]\n",
    "            print(\"Duration: \", int(dur), \"s\" )\n",
    "            x_y_len = np.sqrt((tracks[\"x-\"+str(N)][-1]-tracks[\"x-\"+str(N)][0])**2+\n",
    "                              (lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt)[-1] - \n",
    "                               lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt)[0])**2 \n",
    "                             )\n",
    "            print(\"Length:\", round(x_y_len, 4), \"m(?)\")\n",
    "            print(\"Speed on Cam: \", round(x_y_len/dur,4), \"m/s\")\n",
    "            x_y = []\n",
    "            for i in range(len(tracks[\"x-\"+str(N)])):\n",
    "                x_y.append((round(tracks[\"x-\"+str(N)][i],4), \n",
    "                            round(tracks[\"y-\"+str(N)][i],4)))\n",
    "            print(\"Unique pixels:\",len(list(set(x_y))))\n",
    "            print(\"Pixels per unit of length:\", round(len(list(set(x_y)))/x_y_len, 4) )\n",
    "            plt.plot(np.array(tracks[\"x-\"+str(N)]), lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt))\n",
    "            plt.plot()\n",
    "            plot_scatter(tracks[\"x-\"+str(N)],tracks[\"y-\"+str(N)], tracks[\"z-\"+str(N)])\n",
    "            plt.show()\n",
    "    print(\"number of tracks: \", number_of_tracks)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e49c65cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "telId = 5\n",
    "for nrun in nruns:\n",
    "    \n",
    "    brightness_hist0, brightness_counts = np.unique(np.around(high_pixel[nrun][telId],-1), return_counts=True)    \n",
    "    plt.plot(brightness_hist0, brightness_counts)\n",
    "    plt.title(nrun)\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fd89842",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "nrun = 158214\n",
    "telId = 5\n",
    "# for i in range(0,13):\n",
    "#     mask = (high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0])>i*30\n",
    "#     mask = np.logical_and(mask,(high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0])<(i+1)*30)\n",
    "#     plt.scatter(high_pixel[nrun][\"x-pos\"+str(telId)][mask], high_pixel[nrun][\"y-pos\"+str(telId)][mask], \n",
    "#                 c = high_pixel[nrun][\"tmp\"+str(telId)][mask]-high_pixel[nrun][\"tmp\"+str(telId)][0], cmap = \"jet\")\n",
    "#     plt.colorbar()\n",
    "#     plt.show()\n",
    "print(nruns)\n",
    "avg_from_high_pixel = []\n",
    "nruns_avg_from_high_pixel = []\n",
    "for nrun in nruns:\n",
    "    print(np.average(high_pixel[nrun][telId]))\n",
    "    avg_from_high_pixel.append(np.average(high_pixel[nrun][telId]))\n",
    "    nruns_avg_from_high_pixel.append(nrun)\n",
    "plt.plot(nruns_avg_from_high_pixel, avg_from_high_pixel )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "92a16868",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "telId = 5\n",
    "nrun = 158358\n",
    "mask = np.logical_and(high_pixel[nrun][telId]<10000,high_pixel[nrun][telId]>2000 )\n",
    "values, counts = np.unique(high_pixel[nrun][\"pix\"+str(telId)][mask], return_counts=True)\n",
    "mask2 = counts<30\n",
    "plt.scatter(values[mask2], counts[mask2])\n",
    "plt.show()\n",
    "for i in range(1,17):\n",
    "    mask_time = np.logical_and((high_pixel[nrun][\"tmp\"+str(telId)][mask]-high_pixel[nrun][\"tmp\"+str(telId)][0])<100*(i+1),\n",
    "                              (high_pixel[nrun][\"tmp\"+str(telId)][mask]-high_pixel[nrun][\"tmp\"+str(telId)][0])>100*i)\n",
    "    \n",
    "    plot_scatter(high_pixel[nrun][\"x-pos\"+str(telId)][mask][mask_time],\n",
    "                 high_pixel[nrun][\"y-pos\"+str(telId)][mask][mask_time],\n",
    "                 high_pixel[nrun][\"tmp\"+str(telId)][mask][mask_time]-high_pixel[nrun][\"tmp\"+str(telId)][0])\n",
    "\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bda67079",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "nrun = nruns[0]\n",
    "telId = 5\n",
    "time_in_run = high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0]\n",
    "test_x = []\n",
    "test_y = []\n",
    "test_z = []\n",
    "test_z_1 = []\n",
    "test_z_2 = []\n",
    "values, counts = np.unique(high_pixel[nrun][\"pix\"+str(telId)], return_counts=True)\n",
    "val_num = []\n",
    "for i in range(len(values)):\n",
    "    if counts[i]<30:\n",
    "        #print(values[i], counts[i])\n",
    "        val_num.append(values[i])\n",
    "print(len(val_num))\n",
    "for i in range(len(high_pixel[nrun][\"x-pos\"+str(telId)])):\n",
    "    if high_pixel[nrun][telId][i]<3000:\n",
    "        test_x.append(high_pixel[nrun][\"x-pos\"+str(telId)][i])\n",
    "        test_y.append(high_pixel[nrun][\"y-pos\"+str(telId)][i])\n",
    "        test_z_1.append(high_pixel[nrun][telId][i])\n",
    "        test_z_2.append(time_in_run[i])\n",
    "mask = np.array(test_z_2) < 345.\n",
    "mask = np.logical_and(mask, np.array(test_z_2)> 320.)\n",
    "print(\"Unique times:\", np.unique(np.array(test_z_2)[mask]))\n",
    "print(\"minimum\",np.min(high_pixel[nrun][telId]))\n",
    "print(len(high_pixel[nrun][\"x-pos\"+str(telId)]))\n",
    "print(len(test_z_1))\n",
    "plt.scatter(np.array(test_x)[mask],np.array(test_y)[mask],c=np.array(test_z_1)[mask])\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "plot_scatter(np.array(test_x)[mask],np.array(test_y)[mask],np.array(test_z_2)[mask])\n",
    "plt.show()\n",
    "brightness_hist0, brightness_counts = np.unique(np.around(high_pixel[nrun][telId],0), return_counts=True)\n",
    "plt.plot(brightness_hist0, brightness_counts)\n",
    "plt.xlim(800,5000)\n",
    "plt.show()\n",
    "# x_cleaned_1,y_cleaned_1,z_cleaned_1 = cleaning_cut(high_pixel[nrun][\"x-pos\"+str(telId)], \n",
    "#                                                        high_pixel[nrun][\"y-pos\"+str(telId)], \n",
    "#                                                        time_in_run, 3, 3)\n",
    "# plot_scatter(x_cleaned_1, y_cleaned_1, z_cleaned_1)\n",
    "# plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "000ad31e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "%%time\n",
    "#Sort by pixels\n",
    "tmp_from_high = {}\n",
    "for nrun in nruns:\n",
    "    tmp_from_high[nrun] = {}\n",
    "    for telId in range(1,6):\n",
    "        tmp_from_high[nrun][telId] = {}\n",
    "        tmp_from_high[nrun][telId][\"all pixels\"] = {}\n",
    "        try:\n",
    "            print(\"Run\", nrun,\"CT\"+str(telId)+\":\", high_pixel[nrun][\"pix\"+str(telId)])\n",
    "            counter = 0\n",
    "            for pix in high_pixel[nrun][\"pix\"+str(telId)]:\n",
    "                if \"tmp\"+str(pix) in tmp_from_high[nrun][telId]:\n",
    "                    pass\n",
    "                else:\n",
    "                    tmp_from_high[nrun][telId][\"tmp\"+str(pix)] = []\n",
    "                    tmp_from_high[nrun][telId][\"nsb\"+str(pix)] = []\n",
    "                    tmp_from_high[nrun][telId][\"x-pos\"+str(pix)] = []\n",
    "                    tmp_from_high[nrun][telId][\"y-pos\"+str(pix)] = []\n",
    "                    tmp_from_high[nrun][telId][\"all pixels\"][pix] = pix \n",
    "                tmp_from_high[nrun][telId][\"tmp\"+str(pix)].append(high_pixel[nrun][\"tmp\"+str(telId)][counter])\n",
    "                tmp_from_high[nrun][telId][\"nsb\"+str(pix)].append(high_pixel[nrun][telId][counter])\n",
    "                tmp_from_high[nrun][telId][\"x-pos\"+str(pix)].append(high_pixel[nrun][\"x-pos\"+str(telId)][counter])\n",
    "                tmp_from_high[nrun][telId][\"y-pos\"+str(pix)].append(high_pixel[nrun][\"y-pos\"+str(telId)][counter])\n",
    "                #print(pix,tmp_from_roll[nrun][telId][\"tmp\"+str(pix)], tmp_from_roll[nrun][telId][\"nsb\"+str(pix)])\n",
    "                \n",
    "                counter = counter+1\n",
    "        except:\n",
    "            print(\"Run\", nrun,\",CT\", telId,\"does not exist\")\n",
    "\n",
    "\n",
    "\n",
    "for nrun in nruns:\n",
    "    print(\"\")\n",
    "    print(\"Run number\", nrun)\n",
    "    for telId in range(1,6):\n",
    "        print(\"\")\n",
    "        print(\"Run\", nrun,\", CT\", telId, end =\": \")\n",
    "        counter = 0\n",
    "        for pix in sorted(tmp_from_high[nrun][telId][\"all pixels\"]):\n",
    "            print(int(tmp_from_high[nrun][telId][\"all pixels\"][pix]), end = \", \")\n",
    "            x = tmp_from_high[nrun][telId][\"tmp\"+str(pix)]\n",
    "            y = tmp_from_high[nrun][telId][\"nsb\"+str(pix)]\n",
    "            plt.plot(x,y, label = int(pix), lw = 0.5)\n",
    "            counter+=1\n",
    "            if counter >8:                \n",
    "                plt.legend()\n",
    "                plt.show()\n",
    "                counter = 0\n",
    "                print(\"Run\", nrun,\", CT\", telId, end=\": \")\n",
    "        if counter >0:\n",
    "            plt.legend()\n",
    "            plt.show()\n",
    "            \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "430a6c23",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "nrun = 158212\n",
    "telId = 4\n",
    "new_x = []\n",
    "new_y = []\n",
    "new_time = []\n",
    "time = high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0]\n",
    "lowlim = 1430\n",
    "uplim = 1445\n",
    "for i in range(len(high_pixel[nrun][\"y-pos\"+str(telId)])):\n",
    "    if lowlim<time[i] <uplim:\n",
    "        new_x.append(high_pixel[nrun][\"x-pos\"+str(telId)][i])\n",
    "        new_y.append(high_pixel[nrun][\"y-pos\"+str(telId)][i])\n",
    "        new_time.append(time[i])\n",
    "plt.scatter(new_x, new_y, c = new_time, cmap = \"jet\")\n",
    "plt.colorbar(label = \"time in s\")\n",
    "plt.xlabel(\"x-coordinate\")\n",
    "plt.ylabel(\"y-coordinate\")\n",
    "plt.savefig(str(nrun)+\" CT 5.pdf\")\n",
    "plt.show()\n",
    "pix_for_now = []\n",
    "for pix in sorted(tmp_from_high[nrun][telId][\"all pixels\"]):\n",
    "    #print(int(tmp_from_high[nrun][telId][\"all pixels\"][pix]), end = \", \")\n",
    "    tmp = tmp_from_high[nrun][telId][\"tmp\"+str(pix)]-high_pixel[nrun][\"tmp\"+str(telId)][0]\n",
    "    nsb = tmp_from_high[nrun][telId][\"nsb\"+str(pix)]\n",
    "    print(\"pixel\", pix, end=\": \")\n",
    "    lower = np.where(lowlim<=tmp)\n",
    "    upper = np.where(uplim>=tmp)\n",
    "    try:\n",
    "        print(list(tmp[lower[0]])[0], end =\"\") \n",
    "    except:\n",
    "        pass\n",
    "    try:\n",
    "        print(list(tmp[upper[-1]])[-1])\n",
    "    except:\n",
    "        print(\"\")\n",
    "    if np.std(nsb)>500:\n",
    "        print(pix, \", \",np.std(nsb))\n",
    "        plt.plot(tmp,nsb, label = int(pix), lw = 0.5)\n",
    "        pix_for_now.append(pix)\n",
    "plt.xlim(lowlim,uplim)\n",
    "plt.ylim(0,7000)\n",
    "plt.show()\n",
    "#print(pix_for_now)\n",
    "newnew_x = []\n",
    "newnew_y = []\n",
    "print(len(pix_for_now))\n",
    "for i in range(0,1):\n",
    "    print(i)\n",
    "#     pixel = pix_for_now[i]\n",
    "#     newnew_x.append(geom_hess5_xc_from_root[pixel])\n",
    "#     newnew_y.append(geom_hess5_yc_from_root[pixel])\n",
    "#     print(pixel)\n",
    "plt.plot(newnew_x, newnew_y)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a4743743",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "\n",
    "for nrun in nruns:\n",
    "    print(\"\")\n",
    "    print(\"Run number\", nrun)\n",
    "    for telId in range(1,6):\n",
    "        print(\"\")\n",
    "        print(\"CT\", telId, end =\": \")\n",
    "        counter = 0\n",
    "        for pix in sorted(tmp_from_roll[nrun][telId][\"all pixels\"]):\n",
    "            print(int(tmp_from_roll[nrun][telId][\"all pixels\"][pix]), end = \", \")\n",
    "            x = tmp_from_roll[nrun][telId][\"tmp\"+str(pix)]\n",
    "            y = tmp_from_roll[nrun][telId][\"nsb\"+str(pix)]\n",
    "            plt.scatter(x,y, label = int(pix))\n",
    "            counter+=1\n",
    "            if counter >8:                \n",
    "                plt.legend()\n",
    "                plt.show()\n",
    "                counter = 0\n",
    "                print(\"CT\", telId, end=\": \")\n",
    "        if counter >0:\n",
    "            plt.legend()\n",
    "            plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "62bf76a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "telId = 5\n",
    "nrun = nruns[1]\n",
    "print(len(high_pixel[nrun][\"x-pos\"+str(telId)]))\n",
    "plot_scatter(high_pixel[nrun][\"x-pos\"+str(telId)],\n",
    "            high_pixel[nrun][\"y-pos\"+str(telId)],\n",
    "            high_pixel[nrun][\"tmp\"+str(telId)])\n",
    "draw_box()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bf03aecf",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "# Remove all pixels that have more than max_counts occurences, since those are most of the time no satellite trails.\n",
    "# losses along a satellite trail have to be accepted. Max_counts is deliberately chosen generously\n",
    "#################Old version#################\n",
    "#################Do Not Use this one#########\n",
    "trails_high_avg = {}\n",
    "telId = 5\n",
    "max_counts = 50\n",
    "\n",
    "for nrun in nruns:\n",
    "    trails_high_avg[nrun] = {}\n",
    "    for telId in range(5,6):\n",
    "        trails_high_avg[nrun][telId] = {}\n",
    "        try:\n",
    "            values, counts = np.unique(high_pixel[nrun][\"pix\"+str(telId)], return_counts=True)\n",
    "            print(\"Length of values\", len(values))\n",
    "            trails_high_avg[nrun][telId][\"unique pix ID\"] = []\n",
    "            trails_high_avg[nrun][telId][\"pix ID counts\"] = []\n",
    "            new_val = []\n",
    "            new_counts = []\n",
    "            for i in range(len(values)):\n",
    "                if counts[i]<max_counts:#Number needs to be calculated for slowest satellite\n",
    "                    new_val.append(values[i])\n",
    "                    new_counts.append(counts[i])\n",
    "\n",
    "                    trails_high_avg[nrun][telId][\"unique pix ID\"].append(values[i])\n",
    "                    trails_high_avg[nrun][telId][\"pix ID counts\"].append(counts[i])\n",
    "\n",
    "            trails_high_avg[nrun][telId][\"pix ID\"] = []\n",
    "            trails_high_avg[nrun][telId][\"x\"] = []\n",
    "            trails_high_avg[nrun][telId][\"y\"] = []\n",
    "            trails_high_avg[nrun][telId][\"z\"] = []\n",
    "            trails_high_avg[nrun][telId][\"brightness\"] = []\n",
    "\n",
    "            print(\"Run\", nrun, \", CT\", telId,\":\")\n",
    "            for i in range(len(high_pixel[nrun][\"pix\"+str(telId)])):\n",
    "                if high_pixel[nrun][\"pix\"+str(telId)][i] in trails_high_avg[nrun][telId][\"unique pix ID\"]:\n",
    "\n",
    "                    if high_pixel[nrun][\"tmp\"+str(telId)][i]-high_pixel[nrun][\"tmp\"+str(telId)][0] <5:\n",
    "                        pass\n",
    "\n",
    "                    else:\n",
    "                        trails_high_avg[nrun][telId][\"pix ID\"].append(int(high_pixel[nrun][\"pix\"+str(telId)][i]))\n",
    "                        trails_high_avg[nrun][telId][\"x\"].append(high_pixel[nrun][\"x-pos\"+str(telId)][i])\n",
    "                        trails_high_avg[nrun][telId][\"y\"].append(high_pixel[nrun][\"y-pos\"+str(telId)][i])\n",
    "                        trails_high_avg[nrun][telId][\"z\"].append(high_pixel[nrun][\"tmp\"+str(telId)][i]-high_pixel[nrun][\"tmp\"+str(telId)][0])\n",
    "                        trails_high_avg[nrun][telId][\"brightness\"].append(high_pixel[nrun][telId][i])\n",
    "\n",
    "            plt.scatter(trails_high_avg[nrun][telId][\"x\"],\n",
    "                        trails_high_avg[nrun][telId][\"y\"],\n",
    "                        c=trails_high_avg[nrun][telId][\"z\"], \n",
    "                        cmap = \"jet\")\n",
    "            plt.colorbar()\n",
    "            plt.xlim(-1.2,1.2)\n",
    "            plt.ylim(-1.2,1.2)\n",
    "            plt.show()\n",
    "        except:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ed8146f7",
   "metadata": {},
   "source": [
    "Plan: GetNeighboursList.C schreiben, um PixId von neighbours and nextneigbours zu erhalten. \n",
    "=> Beschleunigung von cleaning"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3ed8ceb1",
   "metadata": {},
   "source": [
    "width of trail (done),\n",
    "\n",
    "angular distance, duration (done to second timescale), speed (m/s, pixels/s(done) )\n",
    "\n",
    "direction of run (zenith) (still need code snippet to insert in C++ )\n",
    "\n",
    "CT1-4 cuts, finding trails"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "50d3bb83",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#Version for only CT5\n",
    "#Remove all pixels that have too few neighbouring pixels by cleaning twice\n",
    "telId = 5\n",
    "x_values = np.arange(-1.2,1.2, 0.01)\n",
    "for nrun in nruns:\n",
    "    try:\n",
    "        print(\"CT\", telId, \", Run\", nrun, \":\")\n",
    "        plot_scatter(trails_high_avg[nrun][telId][\"x\"], trails_high_avg[nrun][telId][\"y\"], \n",
    "                    trails_high_avg[nrun][telId][\"z\"])    \n",
    "        plt.show()\n",
    "        #first  cleaning:\n",
    "        x_cleaned_1,y_cleaned_1,z_cleaned_1, brightness_cleaned_1 = cleaning_cut(trails_high_avg[nrun][telId][\"x\"],\n",
    "                                                                                 trails_high_avg[nrun][telId][\"y\"],\n",
    "                                                                                 trails_high_avg[nrun][telId][\"z\"],\n",
    "                                                                                 trails_high_avg[nrun][telId][\"brightness\"],4, 3)\n",
    "\n",
    "        #second cleaning\n",
    "        result = cleaning_cut(x_cleaned_1, y_cleaned_1, z_cleaned_1, brightness_cleaned_1, 4, 3)\n",
    "        trails_high_avg[nrun][telId][\"x_cleaned\"] = result[0]\n",
    "        trails_high_avg[nrun][telId][\"y_cleaned\"] = result[1]\n",
    "        trails_high_avg[nrun][telId][\"z_cleaned\"] = result[2]\n",
    "        trails_high_avg[nrun][telId][\"brightness_cleaned\"] = result[3]\n",
    "\n",
    "        tracks, meterorites = sort_into_tracks(trails_high_avg[nrun][telId][\"x_cleaned\"],\n",
    "                                               trails_high_avg[nrun][telId][\"y_cleaned\"],\n",
    "                                               trails_high_avg[nrun][telId][\"z_cleaned\"], \n",
    "                                               trails_high_avg[nrun][telId][\"brightness_cleaned\"], 6)\n",
    "        trails_high_avg[nrun][telId][\"tracks\"] = tracks\n",
    "        print(\"Trying to separate:\")\n",
    "        number_of_tracks = 0\n",
    "        for N in range(1,6):\n",
    "            if len(tracks[\"x-\"+str(N)]) !=0:\n",
    "                number_of_tracks +=1\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(number_of_tracks)] = np.around(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(N)],1)\n",
    "                if N != number_of_tracks:\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(N)] = []\n",
    "                print(\"Track\", number_of_tracks, end =\": \")\n",
    "                popt, pcov = curve_fit(lin_fit, tracks[\"x-\"+str(number_of_tracks)], tracks[\"y-\"+str(number_of_tracks)])\n",
    "                print(\"linear fit : y =\",round(popt[0],4),\"* x +\",round(popt[1],4)) \n",
    "                dur = tracks[\"z-\"+str(number_of_tracks)][-1]- tracks[\"z-\"+str(number_of_tracks)][0]\n",
    "                print(\"Duration: \", int(dur), \"s\" )\n",
    "                x_y_len = np.sqrt((tracks[\"x-\"+str(number_of_tracks)][-1]-tracks[\"x-\"+str(number_of_tracks)][0])**2+\n",
    "                                  (lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt)[-1] - \n",
    "                                   lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt)[0])**2 \n",
    "                                 )\n",
    "                print(\"Length:\", round(x_y_len, 4), \"m(?)\")\n",
    "                print(\"Average brightness:\", round(np.average(tracks[\"brightness-\"+str(number_of_tracks)]),1) , \"+-\", \n",
    "                      round(np.std(tracks[\"brightness-\"+str(number_of_tracks)]), 1))\n",
    "                print(\"Speed on Cam: \", round(x_y_len/dur,4), \"m/s\")\n",
    "                x_y = []\n",
    "                for i in range(len(tracks[\"x-\"+str(number_of_tracks)])):\n",
    "                    x_y.append((round(tracks[\"x-\"+str(number_of_tracks)][i],4), \n",
    "                                round(tracks[\"y-\"+str(number_of_tracks)][i],4)))\n",
    "                print(\"Unique pixels:\",len(list(set(x_y))))\n",
    "                print(\"Pixels per unit of length:\", round(len(list(set(x_y)))/x_y_len, 4) )             \n",
    "                get_track_width(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(number_of_tracks)],\n",
    "                               trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(number_of_tracks)])\n",
    "                #intersection = draw_box(_new(popt[0], popt[1]))\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)] = []\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)].append(intersection)\n",
    "                plt.plot(np.array(tracks[\"x-\"+str(number_of_tracks)]), lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt))\n",
    "                plot_scatter(tracks[\"x-\"+str(number_of_tracks)],tracks[\"y-\"+str(number_of_tracks)], tracks[\"z-\"+str(number_of_tracks)])\n",
    "    #           '  \n",
    "    #             print_important_params(tracks[\"x-\"+str(N)],\n",
    "    #                                    tracks[\"y-\"+str(N)],\n",
    "    #                                    tracks[\"z-\"+str(N)])'\n",
    "\n",
    "                plt.savefig(\"run_\"+str(nrun)+\"_CT_\"+str(telId)+\"_track_\"+str(number_of_tracks)+\".pdf\")\n",
    "                plt.show()\n",
    "                brightness_hist0, brightness_counts = np.unique(np.around(tracks[\"brightness-\"+str(number_of_tracks)],-3), return_counts=True)\n",
    "                plt.plot(brightness_hist0, brightness_counts)\n",
    "                plt.show()\n",
    "\n",
    "\n",
    "        print(\"Number of satellite tracks found in run\", nrun, \"CT\", telId, \": \", number_of_tracks)\n",
    "        print(\"Number of tracks identified as metiorites:\", len(meterorites.keys()))\n",
    "    except:\n",
    "        print(\"No CT 5 data available\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a2310e24",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#version without cleaning first\n",
    "telId = 5 \n",
    "x_values = np.arange(-1.2,1.2, 0.01)\n",
    "for nrun in nruns:\n",
    "    try:\n",
    "        print(\"CT\", telId, \", Run\", nrun, \":\")\n",
    "        plot_scatter(trails_high_avg[nrun][telId][\"x\"], trails_high_avg[nrun][telId][\"y\"], \n",
    "                    trails_high_avg[nrun][telId][\"z\"])    \n",
    "        plt.show()\n",
    "        tracks, meterorites = sort_into_tracks(trails_high_avg[nrun][telId][\"x\"],\n",
    "                                               trails_high_avg[nrun][telId][\"y\"],\n",
    "                                               trails_high_avg[nrun][telId][\"z\"], \n",
    "                                               trails_high_avg[nrun][telId][\"brightness\"], 6)\n",
    "        trails_high_avg[nrun][telId][\"tracks\"] = tracks\n",
    "        print(\"Trying to separate:\")\n",
    "        number_of_tracks = 0\n",
    "        for N in range(1,9):\n",
    "            if len(tracks[\"x-\"+str(N)]) !=0:\n",
    "                number_of_tracks +=1\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(number_of_tracks)] = trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(N)]\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(number_of_tracks)] = np.around(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(N)],1)\n",
    "                if N != number_of_tracks:\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(N)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"brightness-\"+str(N)] = []\n",
    "                print(\"Track\", number_of_tracks, end =\": \")\n",
    "                popt, pcov = curve_fit(lin_fit, tracks[\"x-\"+str(number_of_tracks)], tracks[\"y-\"+str(number_of_tracks)])\n",
    "                print(\"linear fit : y =\",round(popt[0],4),\"* x +\",round(popt[1],4)) \n",
    "                dur = tracks[\"z-\"+str(number_of_tracks)][-1]- tracks[\"z-\"+str(number_of_tracks)][0]\n",
    "                print(\"Duration: \", int(dur), \"s\" )\n",
    "                x_y_len = np.sqrt((tracks[\"x-\"+str(number_of_tracks)][-1]-tracks[\"x-\"+str(number_of_tracks)][0])**2+\n",
    "                                  (lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt)[-1] - \n",
    "                                   lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt)[0])**2 \n",
    "                                 )\n",
    "                print(\"Length:\", round(x_y_len, 4), \"m(?)\")\n",
    "                print(\"Average brightness:\", round(np.average(tracks[\"brightness-\"+str(number_of_tracks)]),1) , \"+-\", \n",
    "                      round(np.std(tracks[\"brightness-\"+str(number_of_tracks)]), 1))\n",
    "                print(\"Speed on Cam: \", round(x_y_len/dur,4), \"m/s\")\n",
    "                x_y = []\n",
    "                for i in range(len(tracks[\"x-\"+str(number_of_tracks)])):\n",
    "                    x_y.append((round(tracks[\"x-\"+str(number_of_tracks)][i],4), \n",
    "                                round(tracks[\"y-\"+str(number_of_tracks)][i],4)))\n",
    "                print(\"Unique pixels:\",len(list(set(x_y))))\n",
    "                print(\"Pixels per unit of length:\", round(len(list(set(x_y)))/x_y_len, 4) )             \n",
    "                get_track_width(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(number_of_tracks)],\n",
    "                               trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(number_of_tracks)])\n",
    "                intersection = draw_box_new(popt[0], popt[1])\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)] = []\n",
    "                trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)].append(intersection)\n",
    "                plt.plot(np.array(tracks[\"x-\"+str(number_of_tracks)]), lin_fit(np.array(tracks[\"x-\"+str(number_of_tracks)]), *popt))\n",
    "                plot_scatter(tracks[\"x-\"+str(number_of_tracks)],tracks[\"y-\"+str(number_of_tracks)], tracks[\"z-\"+str(number_of_tracks)])\n",
    "                plt.show()\n",
    "        print(\"Number of satellite tracks found in run\", nrun, \"CT\", telId, \": \", number_of_tracks)\n",
    "        print(\"Number of tracks identified as metiorites:\", len(meterorites.keys()))\n",
    "    except:\n",
    "        print(\"No CT 5 data available\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6e5f1c0e",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#Version for all CTs\n",
    "#Remove all pixels that have too few neighbouring pixels by cleaning twice\n",
    "telId = 5\n",
    "x_values = np.arange(-1.2,1.2, 0.01)\n",
    "for nrun in nruns:\n",
    "    for telId in range(5,6):\n",
    "        try:\n",
    "            print(\"CT\", telId, \", Run\", nrun, \":\")\n",
    "            plot_scatter(trails_high_avg[nrun][telId][\"x\"], trails_high_avg[nrun][telId][\"y\"], \n",
    "                        trails_high_avg[nrun][telId][\"z\"])    \n",
    "            plt.show()\n",
    "            #first  cleaning:\n",
    "            x_cleaned_1,y_cleaned_1,z_cleaned_1, brightness_cleaned_1 = cleaning_cut(trails_high_avg[nrun][telId][\"x\"],\n",
    "                                                                                     trails_high_avg[nrun][telId][\"y\"],\n",
    "                                                                                     trails_high_avg[nrun][telId][\"z\"],\n",
    "                                                                                     trails_high_avg[nrun][telId][\"brightness\"],3, 3)\n",
    "\n",
    "            #second cleaning\n",
    "            result = cleaning_cut(x_cleaned_1, y_cleaned_1, z_cleaned_1, brightness_cleaned_1, 4, 2)\n",
    "            trails_high_avg[nrun][telId][\"x_cleaned\"] = result[0]\n",
    "            trails_high_avg[nrun][telId][\"y_cleaned\"] = result[1]\n",
    "            trails_high_avg[nrun][telId][\"z_cleaned\"] = result[2]\n",
    "            trails_high_avg[nrun][telId][\"brightness_cleaned\"] = result[3]\n",
    "\n",
    "            tracks, meterorites = sort_into_tracks(trails_high_avg[nrun][telId][\"x_cleaned\"],\n",
    "                                                   trails_high_avg[nrun][telId][\"y_cleaned\"],\n",
    "                                                   trails_high_avg[nrun][telId][\"z_cleaned\"], \n",
    "                                                   trails_high_avg[nrun][telId][\"brightness_cleaned\"], 6)\n",
    "            trails_high_avg[nrun][telId][\"tracks\"] = tracks\n",
    "            print(\"Trying to separate:\")\n",
    "            number_of_tracks = 0\n",
    "            for N in range(1,6):\n",
    "                if len(tracks[\"x-\"+str(N)]) !=0:\n",
    "                    number_of_tracks +=1\n",
    "                    print(\"Track\", N, end =\": \")\n",
    "                    popt, pcov = curve_fit(lin_fit, tracks[\"x-\"+str(N)], tracks[\"y-\"+str(N)])\n",
    "                    print(\"linear fit : y =\",round(popt[0],4),\"* x +\",round(popt[1],4)) \n",
    "                    dur = tracks[\"z-\"+str(N)][-1]- tracks[\"z-\"+str(N)][0]\n",
    "                    print(\"Duration: \", int(dur), \"s\" )\n",
    "                    x_y_len = np.sqrt((tracks[\"x-\"+str(N)][-1]-tracks[\"x-\"+str(N)][0])**2+\n",
    "                                      (lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt)[-1] - \n",
    "                                       lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt)[0])**2 \n",
    "                                     )\n",
    "                    print(\"Length:\", round(x_y_len, 4), \"m(?)\")\n",
    "                    print(\"Average brightness:\", round(np.average(tracks[\"brightness-\"+str(N)]),1) , \"+-\", \n",
    "                          round(np.std(tracks[\"brightness-\"+str(N)]), 1))\n",
    "                    print(\"Speed on Cam: \", round(x_y_len/dur,4), \"m/s\")\n",
    "                    x_y = []\n",
    "                    for i in range(len(tracks[\"x-\"+str(N)])):\n",
    "                        x_y.append((round(tracks[\"x-\"+str(N)][i],4), \n",
    "                                    round(tracks[\"y-\"+str(N)][i],4)))\n",
    "                    print(\"Unique pixels:\",len(list(set(x_y))))\n",
    "                    print(\"Pixels per unit of length:\", round(len(list(set(x_y)))/x_y_len, 4) )             \n",
    "                    get_track_width(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)],\n",
    "                                   trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)])\n",
    "                    intersection = draw_box_new(popt[0], popt[1])\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)] = []\n",
    "                    trails_high_avg[nrun][telId][\"tracks\"][\"IS track \"+str(number_of_tracks)].append(intersection)\n",
    "                    plt.plot(np.array(tracks[\"x-\"+str(N)]), lin_fit(np.array(tracks[\"x-\"+str(N)]), *popt))\n",
    "                    plot_scatter(tracks[\"x-\"+str(N)],tracks[\"y-\"+str(N)], tracks[\"z-\"+str(N)])\n",
    "        #           '  \n",
    "        #             print_important_params(tracks[\"x-\"+str(N)],\n",
    "        #                                    tracks[\"y-\"+str(N)],\n",
    "        #                                    tracks[\"z-\"+str(N)])'\n",
    "\n",
    "                    plt.savefig(\"run_\"+str(nrun)+\"_CT_\"+str(telId)+\"_track_\"+str(number_of_tracks)+\".pdf\")\n",
    "                    plt.show()\n",
    "\n",
    "            print(\"Number of satellite tracks found in run\", nrun, \"CT\", telId, \": \", number_of_tracks)\n",
    "            print(\"Number of tracks identified as metiorites:\", len(meterorites.keys()))\n",
    "        except:\n",
    "            pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ebd4b04b",
   "metadata": {},
   "outputs": [],
   "source": [
    "nrun = 158385\n",
    "telId = 5\n",
    "print(high_pixel.keys())\n",
    "mask = np.array(trails_high_avg[nrun][telId][\"z\"]) < 800.\n",
    "mask = np.logical_and(mask, np.array(trails_high_avg[nrun][telId][\"z\"])>790.)\n",
    "print(mask)\n",
    "plot_scatter(np.array(trails_high_avg[nrun][telId][\"x\"])[mask],\n",
    "             np.array(trails_high_avg[nrun][telId][\"y\"])[mask], \n",
    "             np.array(trails_high_avg[nrun][telId][\"z\"])[mask])\n",
    "print(np.array(trails_high_avg[nrun][telId][\"z\"])[mask])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ab4d64be",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "nrun = 158229\n",
    "telId = 5\n",
    "#print(high_pixel[nrun].keys())\n",
    "print(len(high_pixel[nrun][telId]))\n",
    "mask = high_pixel[nrun][telId] >200. \n",
    "print(len(np.where(mask==True)[0]))\n",
    "mask = np.logical_and(mask, high_pixel[nrun][telId] <5000)\n",
    "print(len(np.where(mask==True)[0]))\n",
    "#mask = np.logical_and(mask, high_pixel[nrun][\"tmp\"+str(telId)]-high_pixel[nrun][\"tmp\"+str(telId)][0]>350)\n",
    "print(len(np.where(mask==True)[0]))\n",
    "plot_scatter(high_pixel[nrun][\"x-pos\"+str(telId)][mask], high_pixel[nrun][\"y-pos\"+str(telId)][mask],\n",
    "             high_pixel[nrun][\"tmp\"+str(telId)][mask]-high_pixel[nrun][\"tmp\"+str(telId)][0])\n",
    "if telId != 5:\n",
    "    plt.xlim(-0.75,0.75)\n",
    "    plt.ylim(-0.75,0.75)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f93030de",
   "metadata": {},
   "source": [
    "get charateristic parameters for each run which are of interest:\n",
    "nrun, telid, direction (zenith, azimuth or sky coordinates RA, DEC), trail direction (maybe in appropriate coordinate system, \n",
    "duration, start-/end-time in UTC, mean brightness of trail, \n",
    "\n",
    "applying mask of CT5 on CT1-4 \n",
    "\n",
    "mon 11:00"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0e932596",
   "metadata": {
    "scrolled": false
   },
   "outputs": [],
   "source": [
    "nrun = 158229\n",
    "telId = 5\n",
    "for N in range(1,6):\n",
    "    if len(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)])!=0:\n",
    "        popt, pcov = curve_fit(lin_fit, trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)], \n",
    "                              trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)])\n",
    "        print(\"linear fit : y =\",round(popt[0],4),\"* x +\",round(popt[1],4)) \n",
    "        plot_scatter(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)],\n",
    "                     trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)],\n",
    "                     trails_high_avg[nrun][telId][\"tracks\"][\"z-\"+str(N)])\n",
    "        \n",
    "        plt.plot(np.array(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)]), lin_fit(np.array(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)]), *popt))\n",
    "        \n",
    "        d_from_lin_fit = []\n",
    "        for i in range(len(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)])):\n",
    "            x_p = trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)][i]\n",
    "            y_p = trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)][i]\n",
    "            t_2 = x_p/popt[0]+y_p\n",
    "            x_s = popt[0]/(popt[0]**2+1)*(t_2 -popt[1])\n",
    "            y_s = popt[0]*x_s+popt[1]\n",
    "            d_from_lin_fit.append(np.sqrt(((x_p-x_s)/min_x_dif)**2+((y_p-y_s)/min_y_dif)**2))\n",
    "        print(np.average(d_from_lin_fit))\n",
    "        get_track_width(trails_high_avg[nrun][telId][\"tracks\"][\"x-\"+str(N)], \n",
    "                       trails_high_avg[nrun][telId][\"tracks\"][\"y-\"+str(N)])\n",
    "        draw_box(popt[0], popt[1])\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9fbef0be",
   "metadata": {},
   "outputs": [],
   "source": [
    "#linear fits, direction of travel and speed\n",
    "#popt, pcov = curve_fit(lin_fit, track_x_1, track_y_1)\n",
    "#vector:\n",
    "# v =[track_x_1[-1]-track_x_1[0],track_y_1[-1]-track_y_1[-0]]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d92779f3",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time \n",
    "nrun = 158229\n",
    "print(\"CT\", telId, \", Run\", nrun, \":\")\n",
    "plt.scatter(trails_high_avg[nrun][telId][\"x_cleaned\"], trails_high_avg[nrun][telId][\"y_cleaned\"],\n",
    "           c= trails_high_avg[nrun][telId][\"z_cleaned\"], cmap = \"jet\")\n",
    "plt.xlim(-1.2,1.2)\n",
    "plt.ylim(-1.2,1.2)\n",
    "plt.colorbar()\n",
    "plt.show()\n",
    "track_x_1 = []\n",
    "track_x_2 = []\n",
    "track_y_1 = []\n",
    "track_y_2 = []\n",
    "track_z_1 = []\n",
    "track_z_2 = []\n",
    "for i in range(len(trails_high_avg[nrun][telId][\"x_cleaned\"])):      \n",
    "    x = trails_high_avg[nrun][telId][\"x_cleaned\"][i]\n",
    "    y = trails_high_avg[nrun][telId][\"y_cleaned\"][i]\n",
    "    z = trails_high_avg[nrun][telId][\"z_cleaned\"][i]\n",
    "    #neighbours and next neighbours\n",
    "    nn_x_xcut = [] \n",
    "    nn_y_xcut = []\n",
    "    nn_z_xcut = []\n",
    "    nn_x = [] \n",
    "    nn_y = []\n",
    "    nn_z = []\n",
    "    for j in range(len(trails_high_avg[nrun][telId][\"x_cleaned\"])):\n",
    "        if (x-2*min_x_dif<\n",
    "            trails_high_avg[nrun][telId][\"x_cleaned\"][j] < \n",
    "            x + 2*min_x_dif):\n",
    "            nn_x_xcut.append(trails_high_avg[nrun][telId][\"x_cleaned\"][j])\n",
    "            nn_y_xcut.append(trails_high_avg[nrun][telId][\"y_cleaned\"][j])\n",
    "            nn_z_xcut.append(trails_high_avg[nrun][telId][\"z_cleaned\"][j])\n",
    "    for j in range(len(nn_x_xcut)):\n",
    "        if (y-2*min_y_dif<\n",
    "            nn_y_xcut[j] < \n",
    "            y + 2*min_y_dif):\n",
    "            nn_x.append(nn_x_xcut[j])\n",
    "            nn_y.append(nn_y_xcut[j])\n",
    "            nn_z.append(nn_z_xcut[j])\n",
    "    \n",
    "    if np.max(nn_x)-np.min(nn_x)> 4*min_x_dif:\n",
    "        print(np.max(nn_x)-np.min(nn_x), \"max allowed: \", 4*min_x_dif)\n",
    "    if np.max(nn_y)-np.min(nn_y)> 4*min_y_dif:\n",
    "        print(np.max(nn_y)-np.min(nn_y), \"max allowed: \", 4*min_y_dif)\n",
    "#     if i == 563:\n",
    "#         plt.scatter(nn_x,nn_y, c = nn_z)\n",
    "#         plt.xlim(-1.2,1.2)\n",
    "#         plt.ylim(-1.2,1.2)\n",
    "#         plt.colorbar()\n",
    "#         plt.show()\n",
    "    # Insert into tracks\n",
    "    if i == 0:\n",
    "        track_x_1.append(x)\n",
    "        track_y_1.append(y)\n",
    "        track_z_1.append(z)\n",
    "    else:\n",
    "        if track_x_1[-1] in nn_x and track_y_1[-1] in nn_y:\n",
    "            track_x_1.append(x)\n",
    "            track_y_1.append(y)\n",
    "            track_z_1.append(z)\n",
    "        elif len(track_x_2) == 0:\n",
    "            track_x_2.append(x)\n",
    "            track_y_2.append(y)\n",
    "            track_z_2.append(z)\n",
    "        elif track_x_2[-1] in nn_x and track_y_2[-1] in nn_y:\n",
    "            track_x_2.append(x)\n",
    "            track_y_2.append(y)\n",
    "            track_z_2.append(z)\n",
    "            \n",
    "            \n",
    "            \n",
    "        \n",
    "        \n",
    "if len(track_x_1)!=0:      \n",
    "    print(\"Trying to separate:\")        \n",
    "    plt.scatter(track_x_1, track_y_1, c = track_z_1, cmap = \"jet\")\n",
    "    plt.xlim(-1.2,1.2)\n",
    "    plt.ylim(-1.2,1.2)\n",
    "    plt.colorbar()\n",
    "    plt.arrow(track_x_1[0],track_y_1[0], track_x_1[-1]-track_x_1[0],track_y_1[-1]-track_y_1[0])\n",
    "    plt.show()\n",
    "    print(\"Time difference:\", track_z_1[-1]-track_z_1[0], \"s\")\n",
    "    print(\"Maximum distance on cam:\", round(np.sqrt((track_x_1[-1]-track_x_1[0])**2 +(track_y_1[-1]-track_y_1[0])**2 ),3))\n",
    "    if len(np.unique(track_z_1)) <3:\n",
    "        print(\"Probably metiorite\")\n",
    "        print(\"\")\n",
    "print(len(track_x_1))\n",
    "plt.plot(track_x_1[540:580], track_y_1[540:580])\n",
    "plt.xlim(-1.2,1.2)\n",
    "plt.ylim(-1.2,1.2)\n",
    "plt.show()\n",
    "print(len(track_x_2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "e5a7af0a",
   "metadata": {},
   "outputs": [],
   "source": [
    "a = [1,1,1,4,5]\n",
    "b = [2,1,2,1,4]\n",
    "a_b = []\n",
    "for i in range(len(a)):\n",
    "    a_b.append((a[i], b[i]))\n",
    "print(a_b)\n",
    "print(len(list(set(a_b))))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c43fee3e",
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "x_fov = 5\n",
    "y_fov = 5\n",
    "x_fov_pp = x_fov/len(np.unique(geom_hess5_xc_from_root)) #per pixel\n",
    "y_fov_pp = y_fov/len(np.unique(geom_hess5_yc_from_root))\n",
    "x_fov_px = x_fov/(np.max(geom_hess5_xc_from_root)-np.min(geom_hess5_xc_from_root))\n",
    "y_fov_py = y_fov/(np.max(geom_hess5_yc_from_root)-np.min(geom_hess5_yc_from_root))\n",
    "print(x_fov_pp, y_fov_pp)\n",
    "print(x_fov_px, y_fov_py)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2b6cdadc",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#reading zenith files:\n",
    "os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\")\n",
    "az_zen_nrun = np.loadtxt(\"az_zen_file.txt\", usecols=0, delimiter = \";\")\n",
    "az_zen_telId = np.loadtxt(\"az_zen_file.txt\", usecols=1, delimiter = \";\")\n",
    "az_zen_az = np.loadtxt(\"az_zen_file.txt\", usecols=2, delimiter = \";\")\n",
    "az_zen_zen = np.loadtxt(\"az_zen_file.txt\", usecols=3, delimiter = \";\")\n",
    "az_zen_utc = np.genfromtxt(\"az_zen_file.txt\", dtype=str, usecols=4, delimiter = \";\")\n",
    "os.chdir(\"D:\\\\Masterarbeit ECAP\\\\First plots\\eval_data\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff4f73d0",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#write to a file the interesting values such as \n",
    "#nrun, telId, az, zen, utc,\n",
    "#1.track IS times and points and mean brigtness, 2. track IS times and points and mean brigtness, ... \n",
    "nrun = nruns[1]\n",
    "print(nrun)\n",
    "s = az_zen_utc[np.where(az_zen_nrun ==nrun)[0]][0]\n",
    "print(s[6:])\n",
    "header = [\"nrun\", \"telId\", \"az\", \"zen\", \"utc first event in nrun\",\n",
    "          \"1. track X1 \", \"1. track Y1\", \"1. track X2\", \"1. track Y2\", \n",
    "          \"1. track time\", \"1. track duration\", \"1. track mean brightness\",\n",
    "          \"2. track X1 \", \"2. track Y1\", \"2. track X2\", \"2. track Y2\", \n",
    "          \"2. track time\", \"2. track duration\", \"2. track mean brightness\",\n",
    "          \"3. track X1 \", \"3. track Y1\", \"3. track X2\", \"3. track Y2\", \n",
    "          \"3. track time\", \"3. track duration\", \"3. track mean brightness\"]\n",
    "file_params = open(\"parameters.csv\", \"w\")\n",
    "params_writer = csv.writer(file_params)\n",
    "params_writer.writerow(header) \n",
    "for i in range(len(az_zen_nrun)):\n",
    "    row = [int(az_zen_nrun[i]), int(az_zen_telId[i]), int(az_zen_az[i]), int(az_zen_zen[i]), az_zen_utc[i]]\n",
    "    for nrun in nruns:\n",
    "        for telId in range(1,6):\n",
    "\n",
    "            try:\n",
    "                \n",
    "                if (nrun == int(az_zen_nrun[i]) and int(az_zen_telId[i]) == telId):\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][0][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][0][1])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][1])\n",
    "                    print(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][1])\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][0]))\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][-1] - \n",
    "                               trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][0]))\n",
    "                    row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-1\"]),1))\n",
    "                    try:\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][0][0])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][0][1])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][1][0])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][1][1])\n",
    "                        row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][0]))\n",
    "                        row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][-1] - \n",
    "                                       trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][0]))\n",
    "                        row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-2\"]),1))\n",
    "                    except:\n",
    "                        pass\n",
    "                    try:\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][0][0])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][0][1])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][1][0])\n",
    "                        row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][1][1])\n",
    "                        row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][0]))\n",
    "                        row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][-1] - \n",
    "                                       trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][0]))\n",
    "                        row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-3\"]),1))\n",
    "                    except:\n",
    "                        pass\n",
    "            except:\n",
    "                pass\n",
    "            \n",
    "    params_writer.writerow(row)\n",
    "file_params.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "a50a3894",
   "metadata": {},
   "outputs": [],
   "source": [
    "%%time\n",
    "#write to a file the interesting values such as \n",
    "#nrun, telId, az, zen, utc,\n",
    "#1.track IS times and points and mean brigtness, 2. track IS times and points and mean brigtness, ... \n",
    "nrun = nruns[1]\n",
    "print(nrun)\n",
    "s = az_zen_utc[np.where(az_zen_nrun ==nrun)[0]][0]\n",
    "print(s[6:])\n",
    "header_CT5 = [\"nrun\", \"telId\", \"az\", \"zen\", \"utc first event in nrun\",\n",
    "          \"1. track X1 \", \"1. track Y1\", \"1. track X2\", \"1. track Y2\", \n",
    "          \"1. track time\", \"1. track duration\", \"1. track mean brightness\",\n",
    "          \"2. track X1 \", \"2. track Y1\", \"2. track X2\", \"2. track Y2\", \n",
    "          \"2. track time\", \"2. track duration\", \"2. track mean brightness\",\n",
    "          \"3. track X1 \", \"3. track Y1\", \"3. track X2\", \"3. track Y2\", \n",
    "          \"3. track time\", \"3. track duration\", \"3. track mean brightness\"]\n",
    "file_params_CT5 = open(\"parameters_CT5.csv\", \"w\")\n",
    "params_CT5_writer = csv.writer(file_params_CT5)\n",
    "params_CT5_writer.writerow(header_CT5) \n",
    "row = []\n",
    "for i in range(len(az_zen_nrun)):\n",
    "    lastrow = row\n",
    "    row = [int(az_zen_nrun[i]),int(az_zen_telId[i]), int(az_zen_az[i]), int(az_zen_zen[i]), az_zen_utc[i]]\n",
    "    for nrun in nruns:\n",
    "        try:\n",
    "\n",
    "            if (nrun == int(az_zen_nrun[i]) and int(az_zen_telId[i]) == 5):\n",
    "                print(nrun , int(az_zen_nrun[i]) , int(az_zen_telId[i]) , 5)\n",
    "                row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][0][0])\n",
    "                row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][0][1])\n",
    "                row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][0])\n",
    "                row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][1])\n",
    "                print(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 1\"][0][1][1])\n",
    "                row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][0]))\n",
    "                row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][-1] - \n",
    "                           trails_high_avg[nrun][telId][\"tracks\"][\"z-1\"][0]))\n",
    "                row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-1\"]),1))\n",
    "                try:\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][0][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][0][1])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][1][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 2\"][0][1][1])\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][0]))\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][-1] - \n",
    "                                   trails_high_avg[nrun][telId][\"tracks\"][\"z-2\"][0]))\n",
    "                    row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-2\"]),1))\n",
    "                except:\n",
    "                    pass\n",
    "                try:\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][0][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][0][1])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][1][0])\n",
    "                    row.append(trails_high_avg[nrun][telId][\"tracks\"][\"IS track 3\"][0][1][1])\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][0]))\n",
    "                    row.append(int(trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][-1] - \n",
    "                                   trails_high_avg[nrun][telId][\"tracks\"][\"z-3\"][0]))\n",
    "                    row.append(round(np.average(trails_high_avg[nrun][telId][\"tracks\"][\"brightness-3\"]),1))\n",
    "                except:\n",
    "                    pass\n",
    "                \n",
    "        except:\n",
    "            pass\n",
    "    try:\n",
    "        if row[1] ==5:\n",
    "            print(row)\n",
    "            params_CT5_writer.writerow(row)\n",
    "    except:\n",
    "        pass\n",
    "file_params_CT5.close()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a14ab9dc",
   "metadata": {},
   "source": [
    "Old functions, that might become useful in some way later"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6f6e66e8",
   "metadata": {},
   "outputs": [],
   "source": [
    "@jit\n",
    "def trail_finder_no_dict(dict_pix, dict_tmp, dict_brightness):   \n",
    "    if (len(dict_pix)==0):\n",
    "        print(\"Too few values in run\", nrun)\n",
    "        return \n",
    "#     x = []\n",
    "#     y = []\n",
    "#     for i in range(len(pix)):\n",
    "#         x.append(flash_geom_x[pix[i]])\n",
    "#         y.append(flash_geom_y[pix[i]])##there must be a better way...\n",
    "    pix = [dict_pix[0]]\n",
    "    tmp = [dict_tmp[0]]\n",
    "    brightness = [dict_brightness[0]]\n",
    "    for i in range(1, len(dict_pix)):\n",
    "        mask_time = np.logical_and( dict_tmp>dict_tmp[i]-5,dict_tmp<dict_tmp[i]+5)\n",
    "        st = set(nn_pix[int(dict_pix[i])])\n",
    "        mask_space = [i for i, e in enumerate(dict_pix[mask_time]) if e in st]\n",
    "        \n",
    "        if len(set(dict_pix[mask_time][mask_space]))>0:\n",
    "            pix.append(dict_pix[i])\n",
    "            tmp.append(dict_tmp[i])\n",
    "            brightness.append(dict_brightness[i])\n",
    "    tracks = [[[pix[0]], [tmp[0]], [brightness[0]]]]\n",
    "#     tracks.append([])\n",
    "#     tracks[0].append([pix[0]])\n",
    "#     tracks[0].append([tmp[0]])\n",
    "#     tracks[0].append([brightness[0]])\n",
    "    N_tot = 1\n",
    "    print(len(pix))\n",
    "    for i in range(1, len(pix)):\n",
    "        appended_to_track = False\n",
    "        for N in range(len(tracks)):\n",
    "            if len(set(tracks[N][0][-20:]) & set(nn_pix[pix[i]]))>0:\n",
    "                if tmp[i]-5 < tracks[N][1][-1]:\n",
    "                    tracks[N][0].append(pix[i])\n",
    "                    tracks[N][1].append(tmp[i])\n",
    "                    tracks[N][2].append(brightness[i])\n",
    "                    appended_to_track  = True \n",
    "                    break\n",
    "#             else:\n",
    "#                 if len(tracks[N][\"tmp\"])<2:\n",
    "#                     tracks.pop(N, None)\n",
    "        if appended_to_track == False:\n",
    "            tracks.append([[pix[i]], [tmp[i]], [brightness[i]]])\n",
    "#             tracks.append([])\n",
    "#             tracks[-1].append([pix[i]])\n",
    "#             tracks[-1].append([tmp[i]])\n",
    "#             tracks[-1].append([brightness[i]])\n",
    "            continue\n",
    "#     for N in range(len(tracks)):\n",
    "#         if len(tracks[N][0]) < 3:\n",
    "#             del(tracks[N])\n",
    "    possible_meteorites = np.zeros(len(tracks))\n",
    "    for N in range(len(tracks)):\n",
    "        if len(set(tracks[N][0]))<3:\n",
    "            print(\"Track\", N, \"from\", set(tracks[N][1]),\n",
    "                  \",too few individual pixels\", len(set(tracks[N][0])))\n",
    "            possible_meteorites[N] = [tracks[N][0], tracks[N][1], tracks[N][2]]\n",
    "#             possible_meteorites.append([])\n",
    "#             possible_meteorites[-1].append([tracks[N][0]])\n",
    "#             possible_meteorites[-1].append([tracks[N][1]])\n",
    "#             possible_meteorites[-1].append([tracks[N][2]])\n",
    "        elif len(set(tracks[N][1]))<3:\n",
    "            print(\"Track\", N, \"from\", set(tracks[N][1]),\n",
    "                  \",too few different times\", set(tracks[N][1]))\n",
    "            possible_meteorites[N] = [tracks[N][0], tracks[N][1], tracks[N][2]]\n",
    "#             possible_meteorites.append([])\n",
    "#             possible_meteorites[-1].append([tracks[N][0]])\n",
    "#             possible_meteorites[-1].append([tracks[N][1]])\n",
    "#             possible_meteorites[-1].append([tracks[N][2]])\n",
    "    \n",
    "    \n",
    "    return tracks, possible_meteorites\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8f692649",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def get_next_neighbours(dict_x, dict_y, dict_z, width):\n",
    "    nnn_x = []\n",
    "    nnn_y = []\n",
    "    nnn_z = []\n",
    "    for k in range(len(dict_x)):\n",
    "        x_x_cut = []\n",
    "        y_x_cut = []\n",
    "        z_x_cut = []\n",
    "        x_y_cut = []\n",
    "        y_y_cut = []\n",
    "        z_y_cut = []\n",
    "        x = dict_x[k]\n",
    "        y = dict_y[k]\n",
    "        z = dict_z[k]\n",
    "        for i in range(len(dict_x)):\n",
    "            if x-width*min_x_dif < dict_x[i] < x+width*min_x_dif:\n",
    "                x_x_cut.append(dict_x[i])\n",
    "                y_x_cut.append(dict_y[i])\n",
    "                z_x_cut.append(dict_z[i])\n",
    "\n",
    "        for i in range(len(x_x_cut)):\n",
    "            if y-width*min_y_dif < y_x_cut[i] < y+width*min_y_dif:\n",
    "                x_y_cut.append(x_x_cut[i])\n",
    "                y_y_cut.append(y_x_cut[i])\n",
    "                z_y_cut.append(z_x_cut[i])\n",
    "        nnn_x.append(x_y_cut)\n",
    "        nnn_y.append(y_y_cut)\n",
    "        nnn_z.append(z_y_cut)\n",
    "    return nnn_x, nnn_y, nnn_z\n",
    "def check_z_neighbours(dict_x, dict_y, dict_z):\n",
    "    nnn_x = []\n",
    "    nnn_y = []\n",
    "    nnn_z = []\n",
    "    for i in range(len(dict_z)):\n",
    "        close_times = np.concatenate((np.where(np.array(dict_z) == dict_z[i]-1)[0],\n",
    "                                    np.where(np.array(dict_z) == dict_z[i])[0],\n",
    "                                    np.where(np.array(dict_z) == dict_z[i]+1)[0]))\n",
    "        nnn_x.append(np.array(dict_x)[close_times])\n",
    "        nnn_y.append(np.array(dict_y)[close_times])\n",
    "        nnn_z.append(np.array(dict_z)[close_times])\n",
    "    return nnn_x, nnn_y, nnn_z\n",
    "\n",
    "def cleaning_cut(dict_x,dict_y,dict_z, dict_brightness, width, length):\n",
    "    x_reduced = []\n",
    "    y_reduced = []\n",
    "    z_reduced = []\n",
    "    brightness_reduced = []\n",
    "    nn_x, nn_y, nn_z = get_next_neighbours(dict_x, dict_y, dict_z, width)\n",
    "    for k in range(len(dict_x)):\n",
    "        if len(np.unique(nn_y[k]))>length:\n",
    "            x_reduced.append(dict_x[k])\n",
    "            y_reduced.append(dict_y[k])\n",
    "            z_reduced.append(dict_z[k])\n",
    "            brightness_reduced.append(dict_brightness[k])\n",
    "    return x_reduced, y_reduced, z_reduced, brightness_reduced\n",
    "def cleaning_z_cut(dict_x,dict_y,dict_z, width):\n",
    "    nnn_x, nnn_y, nnn_z = get_next_neighbours(dict_x, dict_y, dict_z, width)\n",
    "    for i in range(len(dict_z)):\n",
    "        counter = 0\n",
    "        for j in range(len(nnn_z[i])):\n",
    "            if dict_z[i]-2 < nnn_z[i][j] < dict_z[i]+2:\n",
    "                    counter = counter + 1\n",
    "        if counter < 7: \n",
    "            print(\"less than 7 values in nn_z for index\", i)\n",
    "def sort_into_tracks(dict_x,dict_y,dict_z,dict_brightness, width):\n",
    "    nnn_x, nnn_y, nnn_z = get_next_neighbours(dict_x, dict_y, dict_z, width)\n",
    "    tracks = {}\n",
    "    max_tracks = 9\n",
    "    for N in range(1,max_tracks):\n",
    "        tracks[\"x-\"+str(N)] = []\n",
    "        tracks[\"y-\"+str(N)] = []\n",
    "        tracks[\"z-\"+str(N)] = []\n",
    "        tracks[\"brightness-\"+str(N)] = []\n",
    "    k=0\n",
    "    for i in range(len(dict_x)):\n",
    "        appended_to_track = False\n",
    "        empty_first_track = True\n",
    "        if k == 0:\n",
    "            tracks[\"x-\"+str(1)].append(dict_x[i])\n",
    "            tracks[\"y-\"+str(1)].append(dict_y[i])\n",
    "            tracks[\"z-\"+str(1)].append(dict_z[i])\n",
    "            tracks[\"brightness-\"+str(1)].append(dict_brightness[i])\n",
    "            appended_to_track  = True \n",
    "            k = k+1\n",
    "            continue\n",
    "        for N in range(1,max_tracks):\n",
    "            if len(tracks[\"x-\"+str(N)])==0:\n",
    "                continue            \n",
    "            if tracks[\"x-\"+str(N)][-1] in nnn_x[i] and tracks[\"y-\"+str(N)][-1] in nnn_y[i]:\n",
    "                if dict_z[i] -2< tracks[\"z-\"+str(N)][-1]:\n",
    "                    tracks[\"x-\"+str(N)].append(dict_x[i])\n",
    "                    tracks[\"y-\"+str(N)].append(dict_y[i])\n",
    "                    tracks[\"z-\"+str(N)].append(dict_z[i])\n",
    "                    tracks[\"brightness-\"+str(N)].append(dict_brightness[i])\n",
    "                    appended_to_track  = True \n",
    "                    break\n",
    "                else:\n",
    "                    if len(tracks[\"x-\"+str(N)])<3:\n",
    "                        tracks[\"x-\"+str(N)] = []\n",
    "                        tracks[\"y-\"+str(N)] = []\n",
    "                        tracks[\"z-\"+str(N)] = []\n",
    "                        tracks[\"brightness-\"+str(N)] = []\n",
    "                        print(\"track\", N, \" was deleted at time\", dict_z[i] )\n",
    "                        \n",
    "        if appended_to_track == False:\n",
    "            for N in range(1,max_tracks):\n",
    "                if len(tracks[\"x-\"+str(N)])==0:\n",
    "                    tracks[\"x-\"+str(N)].append(dict_x[i])\n",
    "                    tracks[\"y-\"+str(N)].append(dict_y[i])\n",
    "                    tracks[\"z-\"+str(N)].append(dict_z[i])\n",
    "                    tracks[\"brightness-\"+str(N)].append(dict_brightness[i])\n",
    "                    break\n",
    "    possible_meteorites = {}\n",
    "    for N in range(1,max_tracks):\n",
    "        if len(tracks[\"x-\"+str(N)]) != 0 and len(np.unique(tracks[\"z-\"+str(N)]))<2:\n",
    "            print(\"Track\", N, \"from\", np.unique(tracks[\"z-\"+str(N)]),\n",
    "                  \",too fast\", len(tracks[\"z-\"+str(N)]), \" entires, hence no track\")\n",
    "            possible_meteorites[\"x-\"+str(N)] = tracks[\"x-\"+str(N)] \n",
    "            possible_meteorites[\"y-\"+str(N)] = tracks[\"y-\"+str(N)] \n",
    "            possible_meteorites[\"z-\"+str(N)] = tracks[\"z-\"+str(N)] \n",
    "            possible_meteorites[\"brightness-\"+str(N)] = tracks[\"brightness-\"+str(N)]\n",
    "            tracks[\"x-\"+str(N)] = []\n",
    "            tracks[\"y-\"+str(N)] = []\n",
    "            tracks[\"z-\"+str(N)] = []\n",
    "            tracks[\"brightness-\"+str(N)] = []\n",
    "        try:\n",
    "            if possible_meteorites[\"z-\"+str(N)]:\n",
    "                pass # add tracks with same time\n",
    "        except:\n",
    "            pass\n",
    "        \n",
    "            \n",
    "    return tracks, possible_meteorites\n",
    "\n",
    "\n",
    "\n",
    "def sort_into_tracks_old(dict_x,dict_y,dict_z, width):\n",
    "    nnn_x, nnn_y, nnn_z = get_next_neighbours(dict_x, dict_y, dict_z, width)\n",
    "    tracks = {}\n",
    "    for N in range(1,6):\n",
    "        tracks[\"x-\"+str(N)] = []\n",
    "        tracks[\"y-\"+str(N)] = []\n",
    "        tracks[\"z-\"+str(N)] = []\n",
    "    k=0\n",
    "    for i in range(len(dict_x)):\n",
    "        appended_to_track = False\n",
    "        empty_first_track = True\n",
    "        if k == 0:\n",
    "            tracks[\"x-\"+str(1)].append(dict_x[i])\n",
    "            tracks[\"y-\"+str(1)].append(dict_y[i])\n",
    "            tracks[\"z-\"+str(1)].append(dict_z[i])\n",
    "            appended_to_track  = True \n",
    "            k = k+1\n",
    "            continue\n",
    "        for N in range(1,6):\n",
    "            if len(tracks[\"x-\"+str(N)])==0:\n",
    "                continue            \n",
    "            if tracks[\"x-\"+str(N)][-1] in nnn_x[i] and tracks[\"y-\"+str(N)][-1] in nnn_y[i]:\n",
    "                if dict_z[i] -2< tracks[\"z-\"+str(N)][-1]:\n",
    "                    tracks[\"x-\"+str(N)].append(dict_x[i])\n",
    "                    tracks[\"y-\"+str(N)].append(dict_y[i])\n",
    "                    tracks[\"z-\"+str(N)].append(dict_z[i])\n",
    "                    appended_to_track  = True \n",
    "                    break\n",
    "                else:\n",
    "                    if len(tracks[\"x-\"+str(N)])<3:\n",
    "                        tracks[\"x-\"+str(N)] = []\n",
    "                        tracks[\"y-\"+str(N)] = []\n",
    "                        tracks[\"z-\"+str(N)] = []\n",
    "                        print(\"track\", N, \" was deleted at time\", dict_z[i] )\n",
    "                        \n",
    "        if appended_to_track == False:\n",
    "            for N in range(1,6):\n",
    "                if len(tracks[\"x-\"+str(N)])==0:\n",
    "                    tracks[\"x-\"+str(N)].append(dict_x[i])\n",
    "                    tracks[\"y-\"+str(N)].append(dict_y[i])\n",
    "                    tracks[\"z-\"+str(N)].append(dict_z[i])\n",
    "                    break\n",
    "    for N in range(1,6):\n",
    "        if len(tracks[\"x-\"+str(N)]) != 0 and len(np.unique(tracks[\"z-\"+str(N)]))<2:\n",
    "            print(\"Track\", N, \"from\", np.unique(tracks[\"z-\"+str(N)]),\n",
    "                  \",too fast\", len(tracks[\"z-\"+str(N)]), \" entires, hence no track\")\n",
    "            tracks[\"x-\"+str(N)] = []\n",
    "            tracks[\"y-\"+str(N)] = []\n",
    "            tracks[\"z-\"+str(N)] = []\n",
    "            \n",
    "    return tracks\n",
    "\n",
    "def get_track_width(dict_x, dict_y):\n",
    "    popt, pcov = curve_fit(lin_fit, dict_x, dict_y)\n",
    "    d_from_lin_fit = []\n",
    "    for i in range(len(dict_x)):\n",
    "        x_p = dict_x[i]\n",
    "        y_p = dict_y[i]\n",
    "        t_2 = x_p/popt[0]+y_p\n",
    "        x_s = popt[0]/(popt[0]**2+1)*(t_2 -popt[1])\n",
    "        y_s = popt[0]*x_s+popt[1]\n",
    "        d_from_lin_fit.append(np.sqrt(((x_p-x_s)/min_x_dif)**2+((y_p-y_s)/min_y_dif)**2))\n",
    "        width = round(np.average(d_from_lin_fit)*2, 4)\n",
    "        std_width = round(np.std(d_from_lin_fit)*2, 4)\n",
    "    #print(\"Average distance from linfit: \",  round(np.average(d_from_lin_fit), 4))\n",
    "    #print(\"Average width = \", round(np.average(d_from_lin_fit)*2, 4), \"Pixels\")\n",
    "    return width, std_width\n",
    "def draw_box(m, t):\n",
    "    y_top = np.where(geom_hess5_yc_from_root == np.max(geom_hess5_yc_from_root))[0]\n",
    "    y_bot = np.where(geom_hess5_yc_from_root == np.min(geom_hess5_yc_from_root))[0]\n",
    "    x_top = np.where(geom_hess5_xc_from_root == np.max(geom_hess5_xc_from_root))[0]\n",
    "    x_bot = np.where(geom_hess5_xc_from_root == np.min(geom_hess5_xc_from_root))[0]\n",
    "\n",
    "    #draw a box \n",
    "    box_x = []\n",
    "    box_y = []\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[y_top])[0])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[y_top])[-1])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[x_top])[0])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[y_bot])[-1])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[y_bot])[0])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[x_bot])[0])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[x_bot])[1])\n",
    "    box_x.append(sorted(geom_hess5_xc_from_root[y_top])[0])\n",
    "\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[y_top])[0])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[y_top])[-1])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[x_top])[0])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[y_bot])[-1])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[y_bot])[0])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[x_bot])[0])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[x_bot])[1])\n",
    "    box_y.append(sorted(geom_hess5_yc_from_root[y_top])[0])\n",
    "    # 7 lines to draw the box:    \n",
    "    plt.plot(box_x, box_y, c = \"blue\")\n",
    "    #plt.plot((box_x[-1], box_x[0]),(box_y[-1], box_y[0]), c = \"blue\")\n",
    "    #find intersections with lin_fit:\n",
    "    box_lines_param = {}\n",
    "    for i in range(0,7):\n",
    "        if (box_x[i+1]-box_x[i]) !=0:\n",
    "            m_box = (box_y[i+1]-box_y[i])/(box_x[i+1]-box_x[i])\n",
    "            t_box = box_y[i]- m_box*box_x[i]\n",
    "            box_lines_param[i] =[m_box, t_box] \n",
    "        else:\n",
    "            box_lines_param[i] = [box_x[i]]\n",
    "#     m_box = (box_y[0]-box_y[-1])/(box_x[0]-box_x[-1])\n",
    "#     t_box = box_y[-1]- m_box*box_x[-1]\n",
    "#     box_lines_param[6] =[m_box, t_box] \n",
    "    intersections = []\n",
    "    for i in range(len(box_lines_param)):\n",
    "        if len(box_lines_param[i])==1:\n",
    "            pass\n",
    "        else: \n",
    "            x_sp = (box_lines_param[i][1] - t)/(m - box_lines_param[i][0])\n",
    "        y_sp = m * x_sp + t\n",
    "        if -1.25< x_sp < 1.25:\n",
    "            if -1.25< y_sp < 1.25:\n",
    "                intersections.append([x_sp, y_sp])\n",
    "    intersections = np.array(intersections)\n",
    "    plt.scatter(intersections[:,0],intersections[:,1], marker =\"o\", facecolors='none', edgecolors='black', s = 100)\n",
    "    print(\"Coordinates of intersections:\", np.around(intersections[0], 4), \", \", np.around(intersections[1], 4))\n",
    "    return(intersections)\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "967c0cdb",
   "metadata": {},
   "outputs": [],
   "source": [
    "def trail_finder(dict_pix, dict_tmp, dict_brightness):   \n",
    "    tracks = {}\n",
    "    possible_meteorites = {}\n",
    "    if (len(dict_pix)==0):\n",
    "        print(\"Too few values in run\", nrun)\n",
    "        return tracks, possible_meteorites\n",
    "#     x = []\n",
    "#     y = []\n",
    "#     for i in range(len(pix)):\n",
    "#         x.append(flash_geom_x[pix[i]])\n",
    "#         y.append(flash_geom_y[pix[i]])##there must be a better way...\n",
    "    pix = []\n",
    "    tmp = []\n",
    "    brightness = []\n",
    "    for i in range(len(dict_pix)):\n",
    "        mask_time = np.logical_and( dict_tmp>dict_tmp[i]-5,dict_tmp<dict_tmp[i]+5)\n",
    "        st = set(nn_pix[int(dict_pix[i])])\n",
    "        mask_space = [i for i, e in enumerate(dict_pix[mask_time]) if e in st]\n",
    "        \n",
    "        if len(set(dict_pix[mask_time][mask_space]))>0:\n",
    "            pix.append(dict_pix[i])\n",
    "            tmp.append(dict_tmp[i])\n",
    "            brightness.append(dict_brightness[i])\n",
    "    tracks[1] = {}\n",
    "    tracks[1][\"pix\"] = [pix[0]]\n",
    "    tracks[1][\"tmp\"] = [tmp[0]]\n",
    "    tracks[1][\"brightness\"] = [brightness[0]]\n",
    "    N_tot = 1\n",
    "    print(len(pix))\n",
    "    for i in range(1, len(pix)):\n",
    "        appended_to_track = False\n",
    "        for N in tracks:\n",
    "            if len(set(tracks[N][\"pix\"][-20:]) & set(nn_pix[pix[i]]))>0:\n",
    "                if tmp[i]-5 < tracks[N][\"tmp\"][-1]:\n",
    "                    tracks[N][\"pix\"].append(pix[i])\n",
    "                    tracks[N][\"tmp\"].append(tmp[i])\n",
    "                    tracks[N][\"brightness\"].append(brightness[i])\n",
    "                    appended_to_track  = True \n",
    "                    break\n",
    "#             else:\n",
    "#                 if len(tracks[N][\"tmp\"])<2:\n",
    "#                     tracks.pop(N, None)\n",
    "        if appended_to_track == False:\n",
    "            N_tot+=1\n",
    "            print(N_tot)\n",
    "            tracks[N_tot] = {}\n",
    "            tracks[N_tot][\"pix\"] = [pix[i]]\n",
    "            tracks[N_tot][\"tmp\"] = [tmp[i]]\n",
    "            tracks[N_tot][\"brightness\"] = [brightness[i]]\n",
    "            continue\n",
    "    N_track = 1\n",
    "    N_to_pop = []\n",
    "    for N in list(tracks.keys()):\n",
    "        if len(tracks[N][\"pix\"]) < 3:\n",
    "            tracks.pop(N, None)\n",
    "            continue\n",
    "    for N in tracks:\n",
    "#         if len(tracks[N][\"pix\"]) == 0:\n",
    "#             tracks.pop(N, None)\n",
    "#             continue\n",
    "        if len(set(tracks[N][\"pix\"]))<3:\n",
    "            print(\"Track\", N, \"from\", set(tracks[N][\"tmp\"]),\n",
    "                  \",too few pixels\", len(tracks[N][\"pix\"]))\n",
    "            possible_meteorites[N_track] = {}\n",
    "            possible_meteorites[N_track][\"pix\"] = tracks[N][\"pix\"] \n",
    "            possible_meteorites[N_track][\"tmp\"] = tracks[N][\"tmp\"] \n",
    "            possible_meteorites[N_track][\"brightness\"] = tracks[N][\"brightness\"]\n",
    "            N_to_pop.append(N)#tracks.pop(N, None)\n",
    "            N_track+=1\n",
    "        elif len(set(tracks[N][\"tmp\"]))<3:\n",
    "            print(\"Track\", N, \"from\", set(tracks[N][\"tmp\"]),\n",
    "                  \",too few different times\", set(tracks[N][\"tmp\"]))\n",
    "            possible_meteorites[N_track] = {}\n",
    "            possible_meteorites[N_track][\"pix\"] = tracks[N][\"pix\"] \n",
    "            possible_meteorites[N_track][\"tmp\"] = tracks[N][\"tmp\"] \n",
    "            possible_meteorites[N_track][\"brightness\"] = tracks[N][\"brightness\"]\n",
    "            N_to_pop.append(N)#tracks.pop(N, None)\n",
    "            N_track+=1\n",
    "#     for N in N_to_pop:\n",
    "#         tracks.pop(N, None)\n",
    "    \n",
    "    \n",
    "    return tracks, possible_meteorites\n",
    "def get_neighbour_pixel_entries(dict_x,dict_y,dict_z, dict_pix, dict_brightness):\n",
    "    #check für jeden Eintrag, ob in den next_neighbours einträge innerhalb der nächsten 2s liegen\n",
    "    #nn_pix ist array mit array von neighbours und next neigbours als einträgen (2d-array), nn_pix[N] gibt nn von pixId N an\n",
    "    min_len = 0\n",
    "    x = []\n",
    "    y = []\n",
    "    z = []\n",
    "    pix = []\n",
    "    brightness = []\n",
    "    tracks = {}\n",
    "    for i in range(len(dict_pix)):\n",
    "        mask_time = np.logical_and( dict_z>dict_z[i]-3,dict_z<dict_z[i]+3)\n",
    "        st = set(nn_pix[int(dict_pix[i])])\n",
    "        mask_space = [i for i, e in enumerate(dict_pix[mask_time]) if e in st]\n",
    "        \n",
    "        if len(np.unique(dict_pix[mask_time][mask_space]))>min_len:\n",
    "            x.append(dict_x[i])\n",
    "            y.append(dict_y[i])\n",
    "            z.append(dict_z[i])\n",
    "            pix.append(dict_pix[i])\n",
    "            brightness.append(dict_brightness[i])\n",
    "    x = np.array(x)\n",
    "    y = np.array(y)\n",
    "    z = np.array(z)\n",
    "    pix = np.array(pix)\n",
    "    brightness = np.array(brightness)\n",
    "    \n",
    "    time_values, time_counts = np.unique(z, return_counts=True)\n",
    "    if len(z)>0:  \n",
    "        mask_min_counts = time_counts>0\n",
    "        set_min_counts =set(time_values[mask_min_counts])\n",
    "        mask = [i for i, e in enumerate(z) if e in set_min_counts] \n",
    "        \n",
    "        print(len(mask), len(z))\n",
    "        # mask is for all values in the previously appended arrays to get only the values which also fulfill mask_min_counts \n",
    "        plot_scatter(x[mask],y[mask],z[mask])\n",
    "        draw_box()\n",
    "        plt.show()\n",
    "    else:\n",
    "        print(\"No suitable values found for\", nrun)\n",
    "        return\n",
    "    if (len(x[mask])==0):\n",
    "        print(\"Too few values in run\", nrun)\n",
    "        return\n",
    "    \n",
    "    \n",
    "    max_tracks = 100 #stupid, but if neccessary just add a 0\n",
    "    for N in range(1,max_tracks):\n",
    "        tracks[N] = {}\n",
    "        tracks[N][\"x\"] = []\n",
    "        tracks[N][\"y\"] = []\n",
    "        tracks[N][\"z\"] = []\n",
    "        tracks[N][\"pix\"] = []\n",
    "        tracks[N][\"brightness\"] = []\n",
    "    for i in range(len(x[mask])):\n",
    "        appended_to_track = False\n",
    "        if i == 0:\n",
    "            tracks[1][\"x\"].append(x[mask][i])\n",
    "            tracks[1][\"y\"].append(y[mask][i])\n",
    "            tracks[1][\"z\"].append(z[mask][i])\n",
    "            tracks[1][\"pix\"].append(pix[mask][i])\n",
    "            tracks[1][\"brightness\"].append(brightness[mask][i])\n",
    "            appended_to_track  = True \n",
    "            continue\n",
    "        for N in range(1,max_tracks):\n",
    "            if N not in tracks:\n",
    "                continue       \n",
    "            if len(tracks[N][\"pix\"])==0:\n",
    "                continue\n",
    "            if tracks[N][\"pix\"][-1] in nn_pix[int(pix[mask][i])]:\n",
    "                if z[mask][i] -2< tracks[N][\"z\"][-1]:\n",
    "                    tracks[N][\"x\"].append(x[mask][i])\n",
    "                    tracks[N][\"y\"].append(y[mask][i])\n",
    "                    tracks[N][\"z\"].append(z[mask][i])\n",
    "                    tracks[N][\"pix\"].append(pix[mask][i])\n",
    "                    tracks[N][\"brightness\"].append(brightness[mask][i])\n",
    "                    appended_to_track  = True \n",
    "                    break\n",
    "            else:\n",
    "                if len(tracks[N][\"x\"])<2:\n",
    "                    tracks.pop(N, None)\n",
    "          \n",
    "                        \n",
    "        if appended_to_track == False:\n",
    "            for N in range(1,max_tracks):\n",
    "                if N not in tracks:\n",
    "                    continue\n",
    "                if len(tracks[N][\"x\"])==0:\n",
    "                    tracks[N][\"x\"].append(x[mask][i])\n",
    "                    tracks[N][\"y\"].append(y[mask][i])\n",
    "                    tracks[N][\"z\"].append(z[mask][i])\n",
    "                    tracks[N][\"pix\"].append(pix[mask][i])\n",
    "                    tracks[N][\"brightness\"].append(brightness[mask][i])\n",
    "                    break\n",
    "               \n",
    "                        \n",
    "    possible_meteorites = {}\n",
    "    N_track = 1\n",
    "    for N in range(1,max_tracks):\n",
    "        if N not in tracks:\n",
    "            continue\n",
    "        if len(tracks[N][\"x\"]) == 0:\n",
    "            tracks.pop(N, None)\n",
    "            continue\n",
    "        possible_meteorites[N_track] = {}\n",
    "        #if len(tracks[N][\"x\"]) != 0 and len(np.unique(tracks[N][\"z\"]))<3:\n",
    "        if len(np.unique(tracks[N][\"pix\"]))<3:\n",
    "            print(\"Track\", N, \"from\", np.unique(tracks[N][\"z\"]),\n",
    "                  \",too few pixels\", len(tracks[N][\"pix\"]))\n",
    "            possible_meteorites[N_track][\"x\"] = tracks[N][\"x\"] \n",
    "            possible_meteorites[N_track][\"y\"] = tracks[N][\"y\"] \n",
    "            possible_meteorites[N_track][\"z\"] = tracks[N][\"z\"] \n",
    "            possible_meteorites[N_track][\"pix\"] = tracks[N][\"pix\"] \n",
    "            possible_meteorites[N_track][\"brightness\"] = tracks[N][\"brightness\"]\n",
    "            tracks.pop(N, None)\n",
    "        elif len(np.unique(tracks[N][\"z\"]))<3:\n",
    "            print(\"Track\", N, \"from\", np.unique(tracks[N][\"z\"]),\n",
    "                  \",too few different times\", set(tracks[N][\"z\"]))\n",
    "            possible_meteorites[N_track][\"x\"] = tracks[N][\"x\"] \n",
    "            possible_meteorites[N_track][\"y\"] = tracks[N][\"y\"] \n",
    "            possible_meteorites[N_track][\"z\"] = tracks[N][\"z\"] \n",
    "            possible_meteorites[N_track][\"pix\"] = tracks[N][\"pix\"] \n",
    "            possible_meteorites[N_track][\"brightness\"] = tracks[N][\"brightness\"]\n",
    "            tracks.pop(N, None)\n",
    "            \n",
    "        try:\n",
    "            if possible_meteorites[N_track][\"z\"]:\n",
    "                pass # add tracks with same time\n",
    "        except:\n",
    "            if len(np.unique(tracks[N][\"pix\"]))>2:\n",
    "                plot_scatter(tracks[N][\"x\"], tracks[N][\"y\"], tracks[N][\"z\"])\n",
    "                draw_box_new(0,0)\n",
    "                plt.show()\n",
    "        N_track+=1\n",
    "#         for N in reversed(range(1,max_tracks)):\n",
    "#             try:\n",
    "#                 #print(N, np.unique(possible_meteorites[N][\"z\"]))\n",
    "#                 if len(set(np.unique(possible_meteorites[N][\"z\"]) + np.min(possible_meteorites[N][\"z\"])-1) & \n",
    "#                        set(np.unique(possible_meteorites[N-1][\"z\"]) + np.max(possible_meteorites[N-1][\"z\"])+1 ))>0:\n",
    "#                     print(\"yes\")\n",
    "#                     possible_meteorites[N-1][\"x\"] = possible_meteorites[N-1][\"x\"]+possible_meteorites[N][\"x\"]\n",
    "#                     possible_meteorites[N-1][\"y\"] = possible_meteorites[N-1][\"y\"]+possible_meteorites[N][\"y\"]\n",
    "#                     possible_meteorites[N-1][\"z\"] = possible_meteorites[N-1][\"z\"]+possible_meteorites[N][\"z\"]\n",
    "#                     possible_meteorites[N-1][\"pix\"] = possible_meteorites[N-1][\"pix\"]+possible_meteorites[N][\"pix\"]\n",
    "#                     possible_meteorites[N-1][\"brightness\"] = possible_meteorites[N-1][\"brightness\"]+possible_meteorites[N][\"brightness\"]\n",
    "#                     possible_meteorites.pop(N, None)\n",
    "\n",
    "#                 else:\n",
    "#                     if len(np.unique(possible_meteorites[N][\"pix\"]))<5:\n",
    "#                         possible_meteorites.pop(N, None)\n",
    "#             except:\n",
    "#                 pass\n",
    "        \n",
    "            \n",
    "    return tracks, possible_meteorites\n",
    "    \n",
    "   \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5e762758",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Define camera geometry:\n",
    "fin_data = open_file(\"D:/Masterarbeit ECAP/2022-04-06/Thomas/gamma_sat_postselect.h5\", mode=\"r\")\n",
    "geom_hess1_xc_from_root = np.squeeze(fin_data.get_node('/configuration/instrument/telescope/camera/geometry_0').col('pix_x'))\n",
    "geom_hess1_yc_from_root = np.squeeze(fin_data.get_node('/configuration/instrument/telescope/camera/geometry_0').col('pix_y'))\n",
    "geom_hess5_xc_from_root = np.squeeze(fin_data.get_node('/configuration/instrument/telescope/camera/geometry_1').col('pix_x'))\n",
    "geom_hess5_yc_from_root = np.squeeze(fin_data.get_node('/configuration/instrument/telescope/camera/geometry_1').col('pix_y'))\n",
    "a = sorted(geom_hess5_xc_from_root)\n",
    "b = sorted(geom_hess5_yc_from_root)\n",
    "for i in range(len(a)-1):\n",
    "    if a[i+1]-a[i]>0:\n",
    "        min_x_dif = round(a[i+1]-a[i], 5)\n",
    "        print(min_x_dif)\n",
    "        break\n",
    "for i in range(len(b)-1):\n",
    "    if b[i+1]-b[i]>0:\n",
    "        min_y_dif = round(b[i+1]-b[i], 5)\n",
    "        print(min_y_dif)\n",
    "        break"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
